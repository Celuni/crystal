/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolLobbyTeamBuilderLobby {
    #[serde(rename = "allowablePremadeSizes", skip_serializing_if = "Option::is_none")]
    pub allowable_premade_sizes: Option<Vec<i32>>,
    #[serde(rename = "autoFillEligible", skip_serializing_if = "Option::is_none")]
    pub auto_fill_eligible: Option<bool>,
    #[serde(rename = "autoFillProtectedForPromos", skip_serializing_if = "Option::is_none")]
    pub auto_fill_protected_for_promos: Option<bool>,
    #[serde(rename = "autoFillProtectedForStreaking", skip_serializing_if = "Option::is_none")]
    pub auto_fill_protected_for_streaking: Option<bool>,
    #[serde(rename = "canStartMatchmaking", skip_serializing_if = "Option::is_none")]
    pub can_start_matchmaking: Option<bool>,
    #[serde(rename = "chatRoomId", skip_serializing_if = "Option::is_none")]
    pub chat_room_id: Option<String>,
    #[serde(rename = "chatRoomKey", skip_serializing_if = "Option::is_none")]
    pub chat_room_key: Option<String>,
    #[serde(rename = "invitationId", skip_serializing_if = "Option::is_none")]
    pub invitation_id: Option<String>,
    #[serde(rename = "invitations", skip_serializing_if = "Option::is_none")]
    pub invitations: Option<Vec<crate::models::LolLobbyTeamBuilderLobbyInvitation>>,
    #[serde(rename = "isTeamBuilderManaged", skip_serializing_if = "Option::is_none")]
    pub is_team_builder_managed: Option<bool>,
    #[serde(rename = "localMember", skip_serializing_if = "Option::is_none")]
    pub local_member: Option<crate::models::LolLobbyTeamBuilderLobbyMember>,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<crate::models::LolLobbyTeamBuilderLobbyMember>>,
    #[serde(rename = "premadeSizeAllowed", skip_serializing_if = "Option::is_none")]
    pub premade_size_allowed: Option<bool>,
    #[serde(rename = "queueId", skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<i32>,
    #[serde(rename = "removalReason", skip_serializing_if = "Option::is_none")]
    pub removal_reason: Option<crate::models::LolLobbyTeamBuilderLobbyRemovedFromGameReason>,
    #[serde(rename = "requiredPositionCoverageMet", skip_serializing_if = "Option::is_none")]
    pub required_position_coverage_met: Option<bool>,
    #[serde(rename = "showPositionExcluder", skip_serializing_if = "Option::is_none")]
    pub show_position_excluder: Option<bool>,
    #[serde(rename = "showPositionSelector", skip_serializing_if = "Option::is_none")]
    pub show_position_selector: Option<bool>,
    #[serde(rename = "specifiablePositionPreferences", skip_serializing_if = "Option::is_none")]
    pub specifiable_position_preferences: Option<Vec<String>>,
    #[serde(rename = "wasKicked", skip_serializing_if = "Option::is_none")]
    pub was_kicked: Option<bool>,
}

impl LolLobbyTeamBuilderLobby {
    pub fn new() -> LolLobbyTeamBuilderLobby {
        LolLobbyTeamBuilderLobby {
            allowable_premade_sizes: None,
            auto_fill_eligible: None,
            auto_fill_protected_for_promos: None,
            auto_fill_protected_for_streaking: None,
            can_start_matchmaking: None,
            chat_room_id: None,
            chat_room_key: None,
            invitation_id: None,
            invitations: None,
            is_team_builder_managed: None,
            local_member: None,
            members: None,
            premade_size_allowed: None,
            queue_id: None,
            removal_reason: None,
            required_position_coverage_met: None,
            show_position_excluder: None,
            show_position_selector: None,
            specifiable_position_preferences: None,
            was_kicked: None,
        }
    }
}


