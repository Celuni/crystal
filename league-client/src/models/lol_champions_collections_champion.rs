/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolChampionsCollectionsChampion {
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "alias", skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(rename = "banVoPath", skip_serializing_if = "Option::is_none")]
    pub ban_vo_path: Option<String>,
    #[serde(rename = "baseLoadScreenPath", skip_serializing_if = "Option::is_none")]
    pub base_load_screen_path: Option<String>,
    #[serde(rename = "botEnabled", skip_serializing_if = "Option::is_none")]
    pub bot_enabled: Option<bool>,
    #[serde(rename = "chooseVoPath", skip_serializing_if = "Option::is_none")]
    pub choose_vo_path: Option<String>,
    #[serde(rename = "disabledQueues", skip_serializing_if = "Option::is_none")]
    pub disabled_queues: Option<Vec<String>>,
    #[serde(rename = "freeToPlay", skip_serializing_if = "Option::is_none")]
    pub free_to_play: Option<bool>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "ownership", skip_serializing_if = "Option::is_none")]
    pub ownership: Option<crate::models::LolChampionsCollectionsOwnership>,
    #[serde(rename = "passive", skip_serializing_if = "Option::is_none")]
    pub passive: Option<crate::models::LolChampionsCollectionsChampionSpell>,
    #[serde(rename = "purchased", skip_serializing_if = "Option::is_none")]
    pub purchased: Option<i64>,
    #[serde(rename = "rankedPlayEnabled", skip_serializing_if = "Option::is_none")]
    pub ranked_play_enabled: Option<bool>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    #[serde(rename = "skins", skip_serializing_if = "Option::is_none")]
    pub skins: Option<Vec<crate::models::LolChampionsCollectionsChampionSkin>>,
    #[serde(rename = "spells", skip_serializing_if = "Option::is_none")]
    pub spells: Option<Vec<crate::models::LolChampionsCollectionsChampionSpell>>,
    #[serde(rename = "squarePortraitPath", skip_serializing_if = "Option::is_none")]
    pub square_portrait_path: Option<String>,
    #[serde(rename = "stingerSfxPath", skip_serializing_if = "Option::is_none")]
    pub stinger_sfx_path: Option<String>,
    #[serde(rename = "tacticalInfo", skip_serializing_if = "Option::is_none")]
    pub tactical_info: Option<crate::models::LolChampionsCollectionsChampionTacticalInfo>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

impl LolChampionsCollectionsChampion {
    pub fn new() -> LolChampionsCollectionsChampion {
        LolChampionsCollectionsChampion {
            active: None,
            alias: None,
            ban_vo_path: None,
            base_load_screen_path: None,
            bot_enabled: None,
            choose_vo_path: None,
            disabled_queues: None,
            free_to_play: None,
            id: None,
            name: None,
            ownership: None,
            passive: None,
            purchased: None,
            ranked_play_enabled: None,
            roles: None,
            skins: None,
            spells: None,
            square_portrait_path: None,
            stinger_sfx_path: None,
            tactical_info: None,
            title: None,
        }
    }
}


