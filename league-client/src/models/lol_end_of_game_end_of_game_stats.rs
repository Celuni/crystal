/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolEndOfGameEndOfGameStats {
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<i64>,
    #[serde(rename = "basePoints", skip_serializing_if = "Option::is_none")]
    pub base_points: Option<i32>,
    #[serde(rename = "battleBoostIpEarned", skip_serializing_if = "Option::is_none")]
    pub battle_boost_ip_earned: Option<i32>,
    #[serde(rename = "boostIpEarned", skip_serializing_if = "Option::is_none")]
    pub boost_ip_earned: Option<i32>,
    #[serde(rename = "boostXpEarned", skip_serializing_if = "Option::is_none")]
    pub boost_xp_earned: Option<i32>,
    #[serde(rename = "causedEarlySurrender", skip_serializing_if = "Option::is_none")]
    pub caused_early_surrender: Option<bool>,
    #[serde(rename = "championId", skip_serializing_if = "Option::is_none")]
    pub champion_id: Option<i32>,
    #[serde(rename = "coOpVsAiMinutesLeftToday", skip_serializing_if = "Option::is_none")]
    pub co_op_vs_ai_minutes_left_today: Option<i32>,
    #[serde(rename = "coOpVsAiMsecsUntilReset", skip_serializing_if = "Option::is_none")]
    pub co_op_vs_ai_msecs_until_reset: Option<i32>,
    #[serde(rename = "completionBonusPoints", skip_serializing_if = "Option::is_none")]
    pub completion_bonus_points: Option<i32>,
    #[serde(rename = "currentLevel", skip_serializing_if = "Option::is_none")]
    pub current_level: Option<i64>,
    #[serde(rename = "customMinutesLeftToday", skip_serializing_if = "Option::is_none")]
    pub custom_minutes_left_today: Option<i32>,
    #[serde(rename = "customMsecsUntilReset", skip_serializing_if = "Option::is_none")]
    pub custom_msecs_until_reset: Option<i32>,
    #[serde(rename = "difficulty", skip_serializing_if = "Option::is_none")]
    pub difficulty: Option<String>,
    #[serde(rename = "earlySurrenderAccomplice", skip_serializing_if = "Option::is_none")]
    pub early_surrender_accomplice: Option<bool>,
    #[serde(rename = "elo", skip_serializing_if = "Option::is_none")]
    pub elo: Option<i32>,
    #[serde(rename = "eloChange", skip_serializing_if = "Option::is_none")]
    pub elo_change: Option<i32>,
    #[serde(rename = "experienceEarned", skip_serializing_if = "Option::is_none")]
    pub experience_earned: Option<i32>,
    #[serde(rename = "experienceTotal", skip_serializing_if = "Option::is_none")]
    pub experience_total: Option<i32>,
    #[serde(rename = "firstWinBonus", skip_serializing_if = "Option::is_none")]
    pub first_win_bonus: Option<i32>,
    #[serde(rename = "gameEndedInEarlySurrender", skip_serializing_if = "Option::is_none")]
    pub game_ended_in_early_surrender: Option<bool>,
    #[serde(rename = "gameId", skip_serializing_if = "Option::is_none")]
    pub game_id: Option<i64>,
    #[serde(rename = "gameLength", skip_serializing_if = "Option::is_none")]
    pub game_length: Option<i32>,
    #[serde(rename = "gameMode", skip_serializing_if = "Option::is_none")]
    pub game_mode: Option<String>,
    #[serde(rename = "gameMutators", skip_serializing_if = "Option::is_none")]
    pub game_mutators: Option<Vec<String>>,
    #[serde(rename = "gameType", skip_serializing_if = "Option::is_none")]
    pub game_type: Option<String>,
    #[serde(rename = "globalBoostXpEarned", skip_serializing_if = "Option::is_none")]
    pub global_boost_xp_earned: Option<i32>,
    #[serde(rename = "imbalancedTeamsNoPoints", skip_serializing_if = "Option::is_none")]
    pub imbalanced_teams_no_points: Option<bool>,
    #[serde(rename = "invalid", skip_serializing_if = "Option::is_none")]
    pub invalid: Option<bool>,
    #[serde(rename = "ipEarned", skip_serializing_if = "Option::is_none")]
    pub ip_earned: Option<i32>,
    #[serde(rename = "ipTotal", skip_serializing_if = "Option::is_none")]
    pub ip_total: Option<i32>,
    #[serde(rename = "leveledUp", skip_serializing_if = "Option::is_none")]
    pub leveled_up: Option<bool>,
    #[serde(rename = "loyaltyBoostIpEarned", skip_serializing_if = "Option::is_none")]
    pub loyalty_boost_ip_earned: Option<i32>,
    #[serde(rename = "loyaltyBoostXpEarned", skip_serializing_if = "Option::is_none")]
    pub loyalty_boost_xp_earned: Option<i32>,
    #[serde(rename = "missionsXpEarned", skip_serializing_if = "Option::is_none")]
    pub missions_xp_earned: Option<i32>,
    #[serde(rename = "myTeamStatus", skip_serializing_if = "Option::is_none")]
    pub my_team_status: Option<String>,
    #[serde(rename = "newSpells", skip_serializing_if = "Option::is_none")]
    pub new_spells: Option<Vec<i32>>,
    #[serde(rename = "nextLevelXp", skip_serializing_if = "Option::is_none")]
    pub next_level_xp: Option<i64>,
    #[serde(rename = "odinBonusIp", skip_serializing_if = "Option::is_none")]
    pub odin_bonus_ip: Option<i32>,
    #[serde(rename = "partyRewardsBonusIpEarned", skip_serializing_if = "Option::is_none")]
    pub party_rewards_bonus_ip_earned: Option<i32>,
    #[serde(rename = "pointsPenalties", skip_serializing_if = "Option::is_none")]
    pub points_penalties: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "preLevelUpExperienceTotal", skip_serializing_if = "Option::is_none")]
    pub pre_level_up_experience_total: Option<i64>,
    #[serde(rename = "preLevelUpNextLevelXp", skip_serializing_if = "Option::is_none")]
    pub pre_level_up_next_level_xp: Option<i64>,
    #[serde(rename = "previousLevel", skip_serializing_if = "Option::is_none")]
    pub previous_level: Option<i64>,
    #[serde(rename = "previousXpTotal", skip_serializing_if = "Option::is_none")]
    pub previous_xp_total: Option<i64>,
    #[serde(rename = "queueBonusEarned", skip_serializing_if = "Option::is_none")]
    pub queue_bonus_earned: Option<i32>,
    #[serde(rename = "queueType", skip_serializing_if = "Option::is_none")]
    pub queue_type: Option<String>,
    #[serde(rename = "ranked", skip_serializing_if = "Option::is_none")]
    pub ranked: Option<bool>,
    #[serde(rename = "reportGameId", skip_serializing_if = "Option::is_none")]
    pub report_game_id: Option<i64>,
    #[serde(rename = "rerollData", skip_serializing_if = "Option::is_none")]
    pub reroll_data: Option<crate::models::LolEndOfGameEndOfGamePoints>,
    #[serde(rename = "roomName", skip_serializing_if = "Option::is_none")]
    pub room_name: Option<String>,
    #[serde(rename = "roomPassword", skip_serializing_if = "Option::is_none")]
    pub room_password: Option<String>,
    #[serde(rename = "rpEarned", skip_serializing_if = "Option::is_none")]
    pub rp_earned: Option<i32>,
    #[serde(rename = "sendStatsToTournamentProvider", skip_serializing_if = "Option::is_none")]
    pub send_stats_to_tournament_provider: Option<bool>,
    #[serde(rename = "skinId", skip_serializing_if = "Option::is_none")]
    pub skin_id: Option<i32>,
    #[serde(rename = "skinIndex", skip_serializing_if = "Option::is_none")]
    pub skin_index: Option<i32>,
    #[serde(rename = "summonerId", skip_serializing_if = "Option::is_none")]
    pub summoner_id: Option<i64>,
    #[serde(rename = "summonerName", skip_serializing_if = "Option::is_none")]
    pub summoner_name: Option<String>,
    #[serde(rename = "talentPointsGained", skip_serializing_if = "Option::is_none")]
    pub talent_points_gained: Option<i32>,
    #[serde(rename = "teamBoost", skip_serializing_if = "Option::is_none")]
    pub team_boost: Option<crate::models::LolEndOfGameEndOfGameTeamBoost>,
    #[serde(rename = "teamEarlySurrendered", skip_serializing_if = "Option::is_none")]
    pub team_early_surrendered: Option<bool>,
    #[serde(rename = "teams", skip_serializing_if = "Option::is_none")]
    pub teams: Option<Vec<crate::models::LolEndOfGameEndOfGameTeam>>,
    #[serde(rename = "timeUntilNextFirstWinBonus", skip_serializing_if = "Option::is_none")]
    pub time_until_next_first_win_bonus: Option<i32>,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i64>,
}

impl LolEndOfGameEndOfGameStats {
    pub fn new() -> LolEndOfGameEndOfGameStats {
        LolEndOfGameEndOfGameStats {
            account_id: None,
            base_points: None,
            battle_boost_ip_earned: None,
            boost_ip_earned: None,
            boost_xp_earned: None,
            caused_early_surrender: None,
            champion_id: None,
            co_op_vs_ai_minutes_left_today: None,
            co_op_vs_ai_msecs_until_reset: None,
            completion_bonus_points: None,
            current_level: None,
            custom_minutes_left_today: None,
            custom_msecs_until_reset: None,
            difficulty: None,
            early_surrender_accomplice: None,
            elo: None,
            elo_change: None,
            experience_earned: None,
            experience_total: None,
            first_win_bonus: None,
            game_ended_in_early_surrender: None,
            game_id: None,
            game_length: None,
            game_mode: None,
            game_mutators: None,
            game_type: None,
            global_boost_xp_earned: None,
            imbalanced_teams_no_points: None,
            invalid: None,
            ip_earned: None,
            ip_total: None,
            leveled_up: None,
            loyalty_boost_ip_earned: None,
            loyalty_boost_xp_earned: None,
            missions_xp_earned: None,
            my_team_status: None,
            new_spells: None,
            next_level_xp: None,
            odin_bonus_ip: None,
            party_rewards_bonus_ip_earned: None,
            points_penalties: None,
            pre_level_up_experience_total: None,
            pre_level_up_next_level_xp: None,
            previous_level: None,
            previous_xp_total: None,
            queue_bonus_earned: None,
            queue_type: None,
            ranked: None,
            report_game_id: None,
            reroll_data: None,
            room_name: None,
            room_password: None,
            rp_earned: None,
            send_stats_to_tournament_provider: None,
            skin_id: None,
            skin_index: None,
            summoner_id: None,
            summoner_name: None,
            talent_points_gained: None,
            team_boost: None,
            team_early_surrendered: None,
            teams: None,
            time_until_next_first_win_bonus: None,
            user_id: None,
        }
    }
}


