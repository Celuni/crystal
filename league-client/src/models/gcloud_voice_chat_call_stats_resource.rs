/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GcloudVoiceChatCallStatsResource {
    #[serde(rename = "callId", skip_serializing_if = "Option::is_none")]
    pub call_id: Option<String>,
    #[serde(rename = "captureDeviceConsecutivelyReadCount", skip_serializing_if = "Option::is_none")]
    pub capture_device_consecutively_read_count: Option<Vec<i64>>,
    #[serde(rename = "codecName", skip_serializing_if = "Option::is_none")]
    pub codec_name: Option<String>,
    #[serde(rename = "currentBars", skip_serializing_if = "Option::is_none")]
    pub current_bars: Option<i64>,
    #[serde(rename = "currentOpusBandwidth", skip_serializing_if = "Option::is_none")]
    pub current_opus_bandwidth: Option<i64>,
    #[serde(rename = "currentOpusBitRate", skip_serializing_if = "Option::is_none")]
    pub current_opus_bit_rate: Option<i64>,
    #[serde(rename = "currentOpusComplexity", skip_serializing_if = "Option::is_none")]
    pub current_opus_complexity: Option<i64>,
    #[serde(rename = "currentOpusMaxPacketSize", skip_serializing_if = "Option::is_none")]
    pub current_opus_max_packet_size: Option<i64>,
    #[serde(rename = "currentOpusVbrMode", skip_serializing_if = "Option::is_none")]
    pub current_opus_vbr_mode: Option<i64>,
    #[serde(rename = "incomingDiscarded", skip_serializing_if = "Option::is_none")]
    pub incoming_discarded: Option<i64>,
    #[serde(rename = "incomingOutOfTime", skip_serializing_if = "Option::is_none")]
    pub incoming_out_of_time: Option<i64>,
    #[serde(rename = "incomingPacketloss", skip_serializing_if = "Option::is_none")]
    pub incoming_packetloss: Option<i64>,
    #[serde(rename = "incomingReceived", skip_serializing_if = "Option::is_none")]
    pub incoming_received: Option<i64>,
    #[serde(rename = "lastLatencyMeasured", skip_serializing_if = "Option::is_none")]
    pub last_latency_measured: Option<f64>,
    #[serde(rename = "latencyMeasurementCount", skip_serializing_if = "Option::is_none")]
    pub latency_measurement_count: Option<i64>,
    #[serde(rename = "latencyPacketsDropped", skip_serializing_if = "Option::is_none")]
    pub latency_packets_dropped: Option<i64>,
    #[serde(rename = "latencyPacketsLost", skip_serializing_if = "Option::is_none")]
    pub latency_packets_lost: Option<i64>,
    #[serde(rename = "latencyPacketsMalformed", skip_serializing_if = "Option::is_none")]
    pub latency_packets_malformed: Option<i64>,
    #[serde(rename = "latencyPacketsNegativeLatency", skip_serializing_if = "Option::is_none")]
    pub latency_packets_negative_latency: Option<i64>,
    #[serde(rename = "latencyPacketsSent", skip_serializing_if = "Option::is_none")]
    pub latency_packets_sent: Option<i64>,
    #[serde(rename = "latencySum", skip_serializing_if = "Option::is_none")]
    pub latency_sum: Option<f64>,
    #[serde(rename = "maxLatency", skip_serializing_if = "Option::is_none")]
    pub max_latency: Option<f64>,
    #[serde(rename = "minLatency", skip_serializing_if = "Option::is_none")]
    pub min_latency: Option<f64>,
    #[serde(rename = "outgoingSent", skip_serializing_if = "Option::is_none")]
    pub outgoing_sent: Option<i64>,
    #[serde(rename = "plcOn", skip_serializing_if = "Option::is_none")]
    pub plc_on: Option<i64>,
    #[serde(rename = "plcSyntheticFrames", skip_serializing_if = "Option::is_none")]
    pub plc_synthetic_frames: Option<i64>,
    #[serde(rename = "rFactor", skip_serializing_if = "Option::is_none")]
    pub r_factor: Option<f64>,
    #[serde(rename = "renderDeviceErrors", skip_serializing_if = "Option::is_none")]
    pub render_device_errors: Option<i64>,
    #[serde(rename = "renderDeviceOverruns", skip_serializing_if = "Option::is_none")]
    pub render_device_overruns: Option<i64>,
    #[serde(rename = "renderDeviceUnderruns", skip_serializing_if = "Option::is_none")]
    pub render_device_underruns: Option<i64>,
    #[serde(rename = "sampleIntervalBegin", skip_serializing_if = "Option::is_none")]
    pub sample_interval_begin: Option<f64>,
    #[serde(rename = "sampleIntervalEnd", skip_serializing_if = "Option::is_none")]
    pub sample_interval_end: Option<f64>,
}

impl GcloudVoiceChatCallStatsResource {
    pub fn new() -> GcloudVoiceChatCallStatsResource {
        GcloudVoiceChatCallStatsResource {
            call_id: None,
            capture_device_consecutively_read_count: None,
            codec_name: None,
            current_bars: None,
            current_opus_bandwidth: None,
            current_opus_bit_rate: None,
            current_opus_complexity: None,
            current_opus_max_packet_size: None,
            current_opus_vbr_mode: None,
            incoming_discarded: None,
            incoming_out_of_time: None,
            incoming_packetloss: None,
            incoming_received: None,
            last_latency_measured: None,
            latency_measurement_count: None,
            latency_packets_dropped: None,
            latency_packets_lost: None,
            latency_packets_malformed: None,
            latency_packets_negative_latency: None,
            latency_packets_sent: None,
            latency_sum: None,
            max_latency: None,
            min_latency: None,
            outgoing_sent: None,
            plc_on: None,
            plc_synthetic_frames: None,
            r_factor: None,
            render_device_errors: None,
            render_device_overruns: None,
            render_device_underruns: None,
            sample_interval_begin: None,
            sample_interval_end: None,
        }
    }
}


