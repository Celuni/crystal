/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolRankedLcuLeagueNotification {
    #[serde(rename = "changeReason", skip_serializing_if = "Option::is_none")]
    pub change_reason: Option<String>,
    #[serde(rename = "displayType", skip_serializing_if = "Option::is_none")]
    pub display_type: Option<crate::models::LolRankedNotificationDisplayType>,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<crate::models::LolRankedLeagueDivision>,
    #[serde(rename = "eligibleForPromoHelper", skip_serializing_if = "Option::is_none")]
    pub eligible_for_promo_helper: Option<bool>,
    #[serde(rename = "gameId", skip_serializing_if = "Option::is_none")]
    pub game_id: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "leaguePoints", skip_serializing_if = "Option::is_none")]
    pub league_points: Option<i32>,
    #[serde(rename = "leaguePointsDelta", skip_serializing_if = "Option::is_none")]
    pub league_points_delta: Option<i32>,
    #[serde(rename = "miniseriesProgress", skip_serializing_if = "Option::is_none")]
    pub miniseries_progress: Option<String>,
    #[serde(rename = "miniseriesWins", skip_serializing_if = "Option::is_none")]
    pub miniseries_wins: Option<i32>,
    #[serde(rename = "msgId", skip_serializing_if = "Option::is_none")]
    pub msg_id: Option<String>,
    #[serde(rename = "notifyReason", skip_serializing_if = "Option::is_none")]
    pub notify_reason: Option<String>,
    #[serde(rename = "numberOfPromotions", skip_serializing_if = "Option::is_none")]
    pub number_of_promotions: Option<i32>,
    #[serde(rename = "provisionalGamesRemaining", skip_serializing_if = "Option::is_none")]
    pub provisional_games_remaining: Option<i32>,
    #[serde(rename = "queueType", skip_serializing_if = "Option::is_none")]
    pub queue_type: Option<crate::models::LolRankedLeagueQueueType>,
    #[serde(rename = "rewardEarnedId", skip_serializing_if = "Option::is_none")]
    pub reward_earned_id: Option<String>,
    #[serde(rename = "rewardEarnedType", skip_serializing_if = "Option::is_none")]
    pub reward_earned_type: Option<String>,
    #[serde(rename = "splitPointsNotification", skip_serializing_if = "Option::is_none")]
    pub split_points_notification: Option<crate::models::LolRankedSplitPointsNotification>,
    #[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
    pub tier: Option<crate::models::LolRankedLeagueTier>,
    #[serde(rename = "timeUntilInactivityStatusChanges", skip_serializing_if = "Option::is_none")]
    pub time_until_inactivity_status_changes: Option<i64>,
}

impl LolRankedLcuLeagueNotification {
    pub fn new() -> LolRankedLcuLeagueNotification {
        LolRankedLcuLeagueNotification {
            change_reason: None,
            display_type: None,
            division: None,
            eligible_for_promo_helper: None,
            game_id: None,
            id: None,
            league_points: None,
            league_points_delta: None,
            miniseries_progress: None,
            miniseries_wins: None,
            msg_id: None,
            notify_reason: None,
            number_of_promotions: None,
            provisional_games_remaining: None,
            queue_type: None,
            reward_earned_id: None,
            reward_earned_type: None,
            split_points_notification: None,
            tier: None,
            time_until_inactivity_status_changes: None,
        }
    }
}


