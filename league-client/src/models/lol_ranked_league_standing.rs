/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolRankedLeagueStanding {
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<crate::models::LolRankedLeagueDivision>,
    #[serde(rename = "earnedRegaliaRewardIds", skip_serializing_if = "Option::is_none")]
    pub earned_regalia_reward_ids: Option<Vec<String>>,
    #[serde(rename = "isProvisional", skip_serializing_if = "Option::is_none")]
    pub is_provisional: Option<bool>,
    #[serde(rename = "leaguePoints", skip_serializing_if = "Option::is_none")]
    pub league_points: Option<i64>,
    #[serde(rename = "losses", skip_serializing_if = "Option::is_none")]
    pub losses: Option<i64>,
    #[serde(rename = "miniseriesResults", skip_serializing_if = "Option::is_none")]
    pub miniseries_results: Option<Vec<crate::models::LolRankedMiniseries>>,
    #[serde(rename = "pendingDemotion", skip_serializing_if = "Option::is_none")]
    pub pending_demotion: Option<bool>,
    #[serde(rename = "pendingPromotion", skip_serializing_if = "Option::is_none")]
    pub pending_promotion: Option<bool>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(rename = "positionDelta", skip_serializing_if = "Option::is_none")]
    pub position_delta: Option<i32>,
    #[serde(rename = "previousPosition", skip_serializing_if = "Option::is_none")]
    pub previous_position: Option<i32>,
    #[serde(rename = "previousSeasonAchievedDivision", skip_serializing_if = "Option::is_none")]
    pub previous_season_achieved_division: Option<crate::models::LolRankedLeagueDivision>,
    #[serde(rename = "previousSeasonAchievedTier", skip_serializing_if = "Option::is_none")]
    pub previous_season_achieved_tier: Option<crate::models::LolRankedLeagueTier>,
    #[serde(rename = "provisionalGamesRemaining", skip_serializing_if = "Option::is_none")]
    pub provisional_games_remaining: Option<i32>,
    #[serde(rename = "puuid", skip_serializing_if = "Option::is_none")]
    pub puuid: Option<String>,
    #[serde(rename = "rankedRegaliaLevel", skip_serializing_if = "Option::is_none")]
    pub ranked_regalia_level: Option<i32>,
    #[serde(rename = "rivalName", skip_serializing_if = "Option::is_none")]
    pub rival_name: Option<String>,
    #[serde(rename = "summonerId", skip_serializing_if = "Option::is_none")]
    pub summoner_id: Option<i64>,
    #[serde(rename = "summonerName", skip_serializing_if = "Option::is_none")]
    pub summoner_name: Option<String>,
    #[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
    pub tier: Option<crate::models::LolRankedLeagueTier>,
    #[serde(rename = "wins", skip_serializing_if = "Option::is_none")]
    pub wins: Option<i64>,
}

impl LolRankedLeagueStanding {
    pub fn new() -> LolRankedLeagueStanding {
        LolRankedLeagueStanding {
            division: None,
            earned_regalia_reward_ids: None,
            is_provisional: None,
            league_points: None,
            losses: None,
            miniseries_results: None,
            pending_demotion: None,
            pending_promotion: None,
            position: None,
            position_delta: None,
            previous_position: None,
            previous_season_achieved_division: None,
            previous_season_achieved_tier: None,
            provisional_games_remaining: None,
            puuid: None,
            ranked_regalia_level: None,
            rival_name: None,
            summoner_id: None,
            summoner_name: None,
            tier: None,
            wins: None,
        }
    }
}


