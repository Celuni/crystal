/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameQueuesLcdsGameQueueConfig {
    #[serde(rename = "blockedMinutesThreshold", skip_serializing_if = "Option::is_none")]
    pub blocked_minutes_threshold: Option<i32>,
    #[serde(rename = "botsCanSpawnOnBlueSide", skip_serializing_if = "Option::is_none")]
    pub bots_can_spawn_on_blue_side: Option<bool>,
    #[serde(rename = "cacheName", skip_serializing_if = "Option::is_none")]
    pub cache_name: Option<String>,
    #[serde(rename = "disallowFreeChampions", skip_serializing_if = "Option::is_none")]
    pub disallow_free_champions: Option<bool>,
    #[serde(rename = "gameMode", skip_serializing_if = "Option::is_none")]
    pub game_mode: Option<String>,
    #[serde(rename = "gameMutators", skip_serializing_if = "Option::is_none")]
    pub game_mutators: Option<Vec<String>>,
    #[serde(rename = "gameTypeConfigId", skip_serializing_if = "Option::is_none")]
    pub game_type_config_id: Option<i32>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "lastToggledOffTime", skip_serializing_if = "Option::is_none")]
    pub last_toggled_off_time: Option<i64>,
    #[serde(rename = "lastToggledOnTime", skip_serializing_if = "Option::is_none")]
    pub last_toggled_on_time: Option<i64>,
    #[serde(rename = "mapSelectionAlgorithm", skip_serializing_if = "Option::is_none")]
    pub map_selection_algorithm: Option<String>,
    #[serde(rename = "matchingThrottleConfig", skip_serializing_if = "Option::is_none")]
    pub matching_throttle_config: Option<crate::models::GameQueuesLcdsMatchingThrottleConfig>,
    #[serde(rename = "maxLevel", skip_serializing_if = "Option::is_none")]
    pub max_level: Option<i32>,
    #[serde(rename = "maxSummonerLevelForFirstWinOfTheDay", skip_serializing_if = "Option::is_none")]
    pub max_summoner_level_for_first_win_of_the_day: Option<i32>,
    #[serde(rename = "maximumParticipantListSize", skip_serializing_if = "Option::is_none")]
    pub maximum_participant_list_size: Option<i32>,
    #[serde(rename = "minLevel", skip_serializing_if = "Option::is_none")]
    pub min_level: Option<i32>,
    #[serde(rename = "minimumParticipantListSize", skip_serializing_if = "Option::is_none")]
    pub minimum_participant_list_size: Option<i32>,
    #[serde(rename = "minimumQueueDodgeDelayTime", skip_serializing_if = "Option::is_none")]
    pub minimum_queue_dodge_delay_time: Option<i32>,
    #[serde(rename = "numPlayersPerTeam", skip_serializing_if = "Option::is_none")]
    pub num_players_per_team: Option<i32>,
    #[serde(rename = "pointsConfigKey", skip_serializing_if = "Option::is_none")]
    pub points_config_key: Option<String>,
    #[serde(rename = "queueBonusKey", skip_serializing_if = "Option::is_none")]
    pub queue_bonus_key: Option<String>,
    #[serde(rename = "queueState", skip_serializing_if = "Option::is_none")]
    pub queue_state: Option<String>,
    #[serde(rename = "queueStateString", skip_serializing_if = "Option::is_none")]
    pub queue_state_string: Option<String>,
    #[serde(rename = "randomizeTeamSizes", skip_serializing_if = "Option::is_none")]
    pub randomize_team_sizes: Option<bool>,
    #[serde(rename = "ranked", skip_serializing_if = "Option::is_none")]
    pub ranked: Option<bool>,
    #[serde(rename = "removalFromGameAllowed", skip_serializing_if = "Option::is_none")]
    pub removal_from_game_allowed: Option<bool>,
    #[serde(rename = "removalFromGameDelayMinutes", skip_serializing_if = "Option::is_none")]
    pub removal_from_game_delay_minutes: Option<i32>,
    #[serde(rename = "supportedMapIds", skip_serializing_if = "Option::is_none")]
    pub supported_map_ids: Option<Vec<i32>>,
    #[serde(rename = "teamOnly", skip_serializing_if = "Option::is_none")]
    pub team_only: Option<bool>,
    #[serde(rename = "thresholdEnabled", skip_serializing_if = "Option::is_none")]
    pub threshold_enabled: Option<bool>,
    #[serde(rename = "thresholdSize", skip_serializing_if = "Option::is_none")]
    pub threshold_size: Option<i64>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "typeString", skip_serializing_if = "Option::is_none")]
    pub type_string: Option<String>,
}

impl GameQueuesLcdsGameQueueConfig {
    pub fn new() -> GameQueuesLcdsGameQueueConfig {
        GameQueuesLcdsGameQueueConfig {
            blocked_minutes_threshold: None,
            bots_can_spawn_on_blue_side: None,
            cache_name: None,
            disallow_free_champions: None,
            game_mode: None,
            game_mutators: None,
            game_type_config_id: None,
            id: None,
            last_toggled_off_time: None,
            last_toggled_on_time: None,
            map_selection_algorithm: None,
            matching_throttle_config: None,
            max_level: None,
            max_summoner_level_for_first_win_of_the_day: None,
            maximum_participant_list_size: None,
            min_level: None,
            minimum_participant_list_size: None,
            minimum_queue_dodge_delay_time: None,
            num_players_per_team: None,
            points_config_key: None,
            queue_bonus_key: None,
            queue_state: None,
            queue_state_string: None,
            randomize_team_sizes: None,
            ranked: None,
            removal_from_game_allowed: None,
            removal_from_game_delay_minutes: None,
            supported_map_ids: None,
            team_only: None,
            threshold_enabled: None,
            threshold_size: None,
            _type: None,
            type_string: None,
        }
    }
}


