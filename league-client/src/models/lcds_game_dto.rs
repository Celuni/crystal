/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LcdsGameDto {
    #[serde(rename = "gameMode", skip_serializing_if = "Option::is_none")]
    pub game_mode: Option<String>,
    #[serde(rename = "gameMutators", skip_serializing_if = "Option::is_none")]
    pub game_mutators: Option<Vec<String>>,
    #[serde(rename = "gameState", skip_serializing_if = "Option::is_none")]
    pub game_state: Option<String>,
    #[serde(rename = "gameType", skip_serializing_if = "Option::is_none")]
    pub game_type: Option<String>,
    #[serde(rename = "gameTypeConfigId", skip_serializing_if = "Option::is_none")]
    pub game_type_config_id: Option<i32>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "mapId", skip_serializing_if = "Option::is_none")]
    pub map_id: Option<i32>,
    #[serde(rename = "maxNumPlayers", skip_serializing_if = "Option::is_none")]
    pub max_num_players: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "observers", skip_serializing_if = "Option::is_none")]
    pub observers: Option<Vec<crate::models::LcdsPlayerParticipant>>,
    #[serde(rename = "optimisticLock", skip_serializing_if = "Option::is_none")]
    pub optimistic_lock: Option<i64>,
    #[serde(rename = "ownerSummary", skip_serializing_if = "Option::is_none")]
    pub owner_summary: Option<crate::models::LcdsPlayerParticipant>,
    #[serde(rename = "passbackDataPacket", skip_serializing_if = "Option::is_none")]
    pub passback_data_packet: Option<String>,
    #[serde(rename = "passbackUrl", skip_serializing_if = "Option::is_none")]
    pub passback_url: Option<String>,
    #[serde(rename = "practiceGameRewardsDisabledReasons", skip_serializing_if = "Option::is_none")]
    pub practice_game_rewards_disabled_reasons: Option<Vec<String>>,
    #[serde(rename = "roomName", skip_serializing_if = "Option::is_none")]
    pub room_name: Option<String>,
    #[serde(rename = "roomPassword", skip_serializing_if = "Option::is_none")]
    pub room_password: Option<String>,
    #[serde(rename = "spectatorsAllowed", skip_serializing_if = "Option::is_none")]
    pub spectators_allowed: Option<String>,
    #[serde(rename = "teamOne", skip_serializing_if = "Option::is_none")]
    pub team_one: Option<Vec<crate::models::LcdsPlayerParticipant>>,
    #[serde(rename = "teamTwo", skip_serializing_if = "Option::is_none")]
    pub team_two: Option<Vec<crate::models::LcdsPlayerParticipant>>,
}

impl LcdsGameDto {
    pub fn new() -> LcdsGameDto {
        LcdsGameDto {
            game_mode: None,
            game_mutators: None,
            game_state: None,
            game_type: None,
            game_type_config_id: None,
            id: None,
            map_id: None,
            max_num_players: None,
            name: None,
            observers: None,
            optimistic_lock: None,
            owner_summary: None,
            passback_data_packet: None,
            passback_url: None,
            practice_game_rewards_disabled_reasons: None,
            room_name: None,
            room_password: None,
            spectators_allowed: None,
            team_one: None,
            team_two: None,
        }
    }
}


