/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChampSelectLcdsGameDto {
    #[serde(rename = "bannedChampions", skip_serializing_if = "Option::is_none")]
    pub banned_champions: Option<Vec<crate::models::BannedChampion>>,
    #[serde(rename = "gameMutators", skip_serializing_if = "Option::is_none")]
    pub game_mutators: Option<Vec<String>>,
    #[serde(rename = "gameState", skip_serializing_if = "Option::is_none")]
    pub game_state: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "optimisticLock", skip_serializing_if = "Option::is_none")]
    pub optimistic_lock: Option<i64>,
    #[serde(rename = "pickTurn", skip_serializing_if = "Option::is_none")]
    pub pick_turn: Option<i32>,
    #[serde(rename = "playerChampionSelections", skip_serializing_if = "Option::is_none")]
    pub player_champion_selections: Option<Vec<crate::models::ChampSelectLcdsPlayerChampionSelectionDto>>,
    #[serde(rename = "queueTypeName", skip_serializing_if = "Option::is_none")]
    pub queue_type_name: Option<String>,
    #[serde(rename = "roomName", skip_serializing_if = "Option::is_none")]
    pub room_name: Option<String>,
    #[serde(rename = "roomPassword", skip_serializing_if = "Option::is_none")]
    pub room_password: Option<String>,
    #[serde(rename = "spectatorDelay", skip_serializing_if = "Option::is_none")]
    pub spectator_delay: Option<i64>,
    #[serde(rename = "statusOfParticipants", skip_serializing_if = "Option::is_none")]
    pub status_of_participants: Option<String>,
    #[serde(rename = "teamOne", skip_serializing_if = "Option::is_none")]
    pub team_one: Option<Vec<::std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(rename = "teamTwo", skip_serializing_if = "Option::is_none")]
    pub team_two: Option<Vec<::std::collections::HashMap<String, serde_json::Value>>>,
}

impl ChampSelectLcdsGameDto {
    pub fn new() -> ChampSelectLcdsGameDto {
        ChampSelectLcdsGameDto {
            banned_champions: None,
            game_mutators: None,
            game_state: None,
            id: None,
            name: None,
            optimistic_lock: None,
            pick_turn: None,
            player_champion_selections: None,
            queue_type_name: None,
            room_name: None,
            room_password: None,
            spectator_delay: None,
            status_of_participants: None,
            team_one: None,
            team_two: None,
        }
    }
}


