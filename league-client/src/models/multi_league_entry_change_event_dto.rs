/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MultiLeagueEntryChangeEventDto {
    #[serde(rename = "gameId", skip_serializing_if = "Option::is_none")]
    pub game_id: Option<i64>,
    #[serde(rename = "mainChangeEventDTO", skip_serializing_if = "Option::is_none")]
    pub main_change_event_dto: Option<crate::models::LeagueEntryChangeEventDtov2>,
    #[serde(rename = "participantId", skip_serializing_if = "Option::is_none")]
    pub participant_id: Option<String>,
    #[serde(rename = "previousSplitPointsRequired", skip_serializing_if = "Option::is_none")]
    pub previous_split_points_required: Option<i32>,
    #[serde(rename = "provisionalGameThreshold", skip_serializing_if = "Option::is_none")]
    pub provisional_game_threshold: Option<i32>,
    #[serde(rename = "shardId", skip_serializing_if = "Option::is_none")]
    pub shard_id: Option<String>,
    #[serde(rename = "splitPointBreakdown", skip_serializing_if = "Option::is_none")]
    pub split_point_breakdown: Option<::std::collections::HashMap<String, i32>>,
    #[serde(rename = "splitPointsBeforeGame", skip_serializing_if = "Option::is_none")]
    pub split_points_before_game: Option<i32>,
    #[serde(rename = "splitPointsGained", skip_serializing_if = "Option::is_none")]
    pub split_points_gained: Option<i32>,
    #[serde(rename = "splitPointsRequired", skip_serializing_if = "Option::is_none")]
    pub split_points_required: Option<i32>,
    #[serde(rename = "splitRewardGrants", skip_serializing_if = "Option::is_none")]
    pub split_reward_grants: Option<Vec<crate::models::SplitRewardGrantDto>>,
    #[serde(rename = "upcomingSplitPointsRequired", skip_serializing_if = "Option::is_none")]
    pub upcoming_split_points_required: Option<i32>,
    #[serde(rename = "upcomingSplitRewards", skip_serializing_if = "Option::is_none")]
    pub upcoming_split_rewards: Option<Vec<crate::models::SplitRewardGrantDto>>,
}

impl MultiLeagueEntryChangeEventDto {
    pub fn new() -> MultiLeagueEntryChangeEventDto {
        MultiLeagueEntryChangeEventDto {
            game_id: None,
            main_change_event_dto: None,
            participant_id: None,
            previous_split_points_required: None,
            provisional_game_threshold: None,
            shard_id: None,
            split_point_breakdown: None,
            split_points_before_game: None,
            split_points_gained: None,
            split_points_required: None,
            split_reward_grants: None,
            upcoming_split_points_required: None,
            upcoming_split_rewards: None,
        }
    }
}


