/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolChampSelectLegacyChampSelectSession {
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<serde_json::Value>>,
    #[serde(rename = "allowBattleBoost", skip_serializing_if = "Option::is_none")]
    pub allow_battle_boost: Option<bool>,
    #[serde(rename = "allowRerolling", skip_serializing_if = "Option::is_none")]
    pub allow_rerolling: Option<bool>,
    #[serde(rename = "allowSkinSelection", skip_serializing_if = "Option::is_none")]
    pub allow_skin_selection: Option<bool>,
    #[serde(rename = "bans", skip_serializing_if = "Option::is_none")]
    pub bans: Option<crate::models::LolChampSelectLegacyChampSelectBannedChampions>,
    #[serde(rename = "chatDetails", skip_serializing_if = "Option::is_none")]
    pub chat_details: Option<crate::models::LolChampSelectLegacyChampSelectChatRoomDetails>,
    #[serde(rename = "hasSimultaneousBans", skip_serializing_if = "Option::is_none")]
    pub has_simultaneous_bans: Option<bool>,
    #[serde(rename = "hasSimultaneousPicks", skip_serializing_if = "Option::is_none")]
    pub has_simultaneous_picks: Option<bool>,
    #[serde(rename = "isCustomGame", skip_serializing_if = "Option::is_none")]
    pub is_custom_game: Option<bool>,
    #[serde(rename = "isSpectating", skip_serializing_if = "Option::is_none")]
    pub is_spectating: Option<bool>,
    #[serde(rename = "localPlayerCellId", skip_serializing_if = "Option::is_none")]
    pub local_player_cell_id: Option<i64>,
    #[serde(rename = "myTeam", skip_serializing_if = "Option::is_none")]
    pub my_team: Option<Vec<crate::models::LolChampSelectLegacyChampSelectPlayerSelection>>,
    #[serde(rename = "rerollsRemaining", skip_serializing_if = "Option::is_none")]
    pub rerolls_remaining: Option<i32>,
    #[serde(rename = "theirTeam", skip_serializing_if = "Option::is_none")]
    pub their_team: Option<Vec<crate::models::LolChampSelectLegacyChampSelectPlayerSelection>>,
    #[serde(rename = "timer", skip_serializing_if = "Option::is_none")]
    pub timer: Option<crate::models::LolChampSelectLegacyChampSelectTimer>,
    #[serde(rename = "trades", skip_serializing_if = "Option::is_none")]
    pub trades: Option<Vec<crate::models::LolChampSelectLegacyChampSelectTradeContract>>,
}

impl LolChampSelectLegacyChampSelectSession {
    pub fn new() -> LolChampSelectLegacyChampSelectSession {
        LolChampSelectLegacyChampSelectSession {
            actions: None,
            allow_battle_boost: None,
            allow_rerolling: None,
            allow_skin_selection: None,
            bans: None,
            chat_details: None,
            has_simultaneous_bans: None,
            has_simultaneous_picks: None,
            is_custom_game: None,
            is_spectating: None,
            local_player_cell_id: None,
            my_team: None,
            rerolls_remaining: None,
            their_team: None,
            timer: None,
            trades: None,
        }
    }
}


