/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolRankedRankedQueueStats {
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<crate::models::LolRankedLeagueDivision>,
    #[serde(rename = "isProvisional", skip_serializing_if = "Option::is_none")]
    pub is_provisional: Option<bool>,
    #[serde(rename = "leaguePoints", skip_serializing_if = "Option::is_none")]
    pub league_points: Option<i32>,
    #[serde(rename = "losses", skip_serializing_if = "Option::is_none")]
    pub losses: Option<i32>,
    #[serde(rename = "miniSeriesProgress", skip_serializing_if = "Option::is_none")]
    pub mini_series_progress: Option<String>,
    #[serde(rename = "previousSeasonAchievedDivision", skip_serializing_if = "Option::is_none")]
    pub previous_season_achieved_division: Option<crate::models::LolRankedLeagueDivision>,
    #[serde(rename = "previousSeasonAchievedTier", skip_serializing_if = "Option::is_none")]
    pub previous_season_achieved_tier: Option<crate::models::LolRankedLeagueTier>,
    #[serde(rename = "previousSeasonEndDivision", skip_serializing_if = "Option::is_none")]
    pub previous_season_end_division: Option<crate::models::LolRankedLeagueDivision>,
    #[serde(rename = "previousSeasonEndTier", skip_serializing_if = "Option::is_none")]
    pub previous_season_end_tier: Option<crate::models::LolRankedLeagueTier>,
    #[serde(rename = "provisionalGameThreshold", skip_serializing_if = "Option::is_none")]
    pub provisional_game_threshold: Option<i32>,
    #[serde(rename = "provisionalGamesRemaining", skip_serializing_if = "Option::is_none")]
    pub provisional_games_remaining: Option<i32>,
    #[serde(rename = "queueType", skip_serializing_if = "Option::is_none")]
    pub queue_type: Option<crate::models::LolRankedLeagueQueueType>,
    #[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
    pub tier: Option<crate::models::LolRankedLeagueTier>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<crate::models::LolRankedRankedQueueWarnings>,
    #[serde(rename = "wins", skip_serializing_if = "Option::is_none")]
    pub wins: Option<i32>,
}

impl LolRankedRankedQueueStats {
    pub fn new() -> LolRankedRankedQueueStats {
        LolRankedRankedQueueStats {
            division: None,
            is_provisional: None,
            league_points: None,
            losses: None,
            mini_series_progress: None,
            previous_season_achieved_division: None,
            previous_season_achieved_tier: None,
            previous_season_end_division: None,
            previous_season_end_tier: None,
            provisional_game_threshold: None,
            provisional_games_remaining: None,
            queue_type: None,
            tier: None,
            warnings: None,
            wins: None,
        }
    }
}


