/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolLootPlayerLoot {
    #[serde(rename = "asset", skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "disenchantLootName", skip_serializing_if = "Option::is_none")]
    pub disenchant_loot_name: Option<String>,
    #[serde(rename = "disenchantValue", skip_serializing_if = "Option::is_none")]
    pub disenchant_value: Option<i32>,
    #[serde(rename = "displayCategories", skip_serializing_if = "Option::is_none")]
    pub display_categories: Option<String>,
    #[serde(rename = "expiryTime", skip_serializing_if = "Option::is_none")]
    pub expiry_time: Option<i64>,
    #[serde(rename = "isNew", skip_serializing_if = "Option::is_none")]
    pub is_new: Option<bool>,
    #[serde(rename = "isRental", skip_serializing_if = "Option::is_none")]
    pub is_rental: Option<bool>,
    #[serde(rename = "itemDesc", skip_serializing_if = "Option::is_none")]
    pub item_desc: Option<String>,
    #[serde(rename = "itemStatus", skip_serializing_if = "Option::is_none")]
    pub item_status: Option<crate::models::LolLootItemOwnershipStatus>,
    #[serde(rename = "localizedDescription", skip_serializing_if = "Option::is_none")]
    pub localized_description: Option<String>,
    #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
    pub localized_name: Option<String>,
    #[serde(rename = "localizedRecipeSubtitle", skip_serializing_if = "Option::is_none")]
    pub localized_recipe_subtitle: Option<String>,
    #[serde(rename = "localizedRecipeTitle", skip_serializing_if = "Option::is_none")]
    pub localized_recipe_title: Option<String>,
    #[serde(rename = "lootId", skip_serializing_if = "Option::is_none")]
    pub loot_id: Option<String>,
    #[serde(rename = "lootName", skip_serializing_if = "Option::is_none")]
    pub loot_name: Option<String>,
    #[serde(rename = "parentItemStatus", skip_serializing_if = "Option::is_none")]
    pub parent_item_status: Option<crate::models::LolLootItemOwnershipStatus>,
    #[serde(rename = "parentStoreItemId", skip_serializing_if = "Option::is_none")]
    pub parent_store_item_id: Option<i32>,
    #[serde(rename = "rarity", skip_serializing_if = "Option::is_none")]
    pub rarity: Option<String>,
    #[serde(rename = "redeemableStatus", skip_serializing_if = "Option::is_none")]
    pub redeemable_status: Option<crate::models::LolLootRedeemableStatus>,
    #[serde(rename = "refId", skip_serializing_if = "Option::is_none")]
    pub ref_id: Option<String>,
    #[serde(rename = "rentalGames", skip_serializing_if = "Option::is_none")]
    pub rental_games: Option<i32>,
    #[serde(rename = "rentalSeconds", skip_serializing_if = "Option::is_none")]
    pub rental_seconds: Option<i64>,
    #[serde(rename = "shadowPath", skip_serializing_if = "Option::is_none")]
    pub shadow_path: Option<String>,
    #[serde(rename = "splashPath", skip_serializing_if = "Option::is_none")]
    pub splash_path: Option<String>,
    #[serde(rename = "storeItemId", skip_serializing_if = "Option::is_none")]
    pub store_item_id: Option<i32>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(rename = "tilePath", skip_serializing_if = "Option::is_none")]
    pub tile_path: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "upgradeEssenceName", skip_serializing_if = "Option::is_none")]
    pub upgrade_essence_name: Option<String>,
    #[serde(rename = "upgradeEssenceValue", skip_serializing_if = "Option::is_none")]
    pub upgrade_essence_value: Option<i32>,
    #[serde(rename = "upgradeLootName", skip_serializing_if = "Option::is_none")]
    pub upgrade_loot_name: Option<String>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<i32>,
}

impl LolLootPlayerLoot {
    pub fn new() -> LolLootPlayerLoot {
        LolLootPlayerLoot {
            asset: None,
            count: None,
            disenchant_loot_name: None,
            disenchant_value: None,
            display_categories: None,
            expiry_time: None,
            is_new: None,
            is_rental: None,
            item_desc: None,
            item_status: None,
            localized_description: None,
            localized_name: None,
            localized_recipe_subtitle: None,
            localized_recipe_title: None,
            loot_id: None,
            loot_name: None,
            parent_item_status: None,
            parent_store_item_id: None,
            rarity: None,
            redeemable_status: None,
            ref_id: None,
            rental_games: None,
            rental_seconds: None,
            shadow_path: None,
            splash_path: None,
            store_item_id: None,
            tags: None,
            tile_path: None,
            _type: None,
            upgrade_essence_name: None,
            upgrade_essence_value: None,
            upgrade_loot_name: None,
            value: None,
        }
    }
}


