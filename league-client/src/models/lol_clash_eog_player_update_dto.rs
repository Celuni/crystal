/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LolClashEogPlayerUpdateDto {
    #[serde(rename = "bid", skip_serializing_if = "Option::is_none")]
    pub bid: Option<i32>,
    #[serde(rename = "bracketSize", skip_serializing_if = "Option::is_none")]
    pub bracket_size: Option<i32>,
    #[serde(rename = "earnedRewards", skip_serializing_if = "Option::is_none")]
    pub earned_rewards: Option<Vec<crate::models::ClashRewardDefinition>>,
    #[serde(rename = "gameId", skip_serializing_if = "Option::is_none")]
    pub game_id: Option<i64>,
    #[serde(rename = "lowestPosition", skip_serializing_if = "Option::is_none")]
    pub lowest_position: Option<i32>,
    #[serde(rename = "rewardProgress", skip_serializing_if = "Option::is_none")]
    pub reward_progress: Option<Vec<crate::models::ClashRewardDefinition>>,
    #[serde(rename = "seasonVp", skip_serializing_if = "Option::is_none")]
    pub season_vp: Option<i32>,
    #[serde(rename = "themeVp", skip_serializing_if = "Option::is_none")]
    pub theme_vp: Option<i32>,
    #[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
    pub tier: Option<i32>,
    #[serde(rename = "tournamentId", skip_serializing_if = "Option::is_none")]
    pub tournament_id: Option<i64>,
    #[serde(rename = "winner", skip_serializing_if = "Option::is_none")]
    pub winner: Option<bool>,
}

impl LolClashEogPlayerUpdateDto {
    pub fn new() -> LolClashEogPlayerUpdateDto {
        LolClashEogPlayerUpdateDto {
            bid: None,
            bracket_size: None,
            earned_rewards: None,
            game_id: None,
            lowest_position: None,
            reward_progress: None,
            season_vp: None,
            theme_vp: None,
            tier: None,
            tournament_id: None,
            winner: None,
        }
    }
}


