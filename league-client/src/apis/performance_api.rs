/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PerformanceApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PerformanceApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PerformanceApiClient<C> {
        PerformanceApiClient {
            configuration,
        }
    }
}

pub trait PerformanceApi {
    fn get_performance_v1_memory(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_performance_v1_report(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_performance_v1_system_info(&self, full: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_performance_v1_process_by_process_id(&self, process_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_performance_v1_report_restart(&self, sample_length: Option<i32>, sample_count: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PerformanceApi for PerformanceApiClient<C> {
    fn get_performance_v1_memory(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/performance/v1/memory".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_performance_v1_report(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/performance/v1/report".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_performance_v1_system_info(&self, full: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/performance/v1/system-info".to_string())
        ;
        if let Some(ref s) = full {
            req = req.with_query_param("full".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn post_performance_v1_process_by_process_id(&self, process_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/performance/v1/process/{processId}".to_string())
        ;
        req = req.with_path_param("processId".to_string(), process_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_performance_v1_report_restart(&self, sample_length: Option<i32>, sample_count: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/performance/v1/report/restart".to_string())
        ;
        if let Some(ref s) = sample_length {
            req = req.with_query_param("sampleLength".to_string(), s.to_string());
        }
        if let Some(ref s) = sample_count {
            req = req.with_query_param("sampleCount".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
