/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolCosmeticsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolCosmeticsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolCosmeticsApiClient<C> {
        PluginLolCosmeticsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolCosmeticsApi {
    fn delete_lol_cosmetics_v1_selection_companion(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_cosmetics_v1_selection_tft_damage_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_cosmetics_v1_selection_tft_map_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_cosmetics_v1_inventories_by_set_name_companions(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsCompanionsGroupedViewModel, Error = Error<serde_json::Value>>>;
    fn get_lol_cosmetics_v1_inventories_by_set_name_damage_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftDamageSkinGroupedViewModel, Error = Error<serde_json::Value>>>;
    fn get_lol_cosmetics_v1_inventories_by_set_name_map_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftMapSkinGroupedViewModel, Error = Error<serde_json::Value>>>;
    fn put_lol_cosmetics_v1_selection_companion(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_cosmetics_v1_selection_tft_damage_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_cosmetics_v1_selection_tft_map_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolCosmeticsApi for PluginLolCosmeticsApiClient<C> {
    fn delete_lol_cosmetics_v1_selection_companion(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-cosmetics/v1/selection/companion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_cosmetics_v1_selection_tft_damage_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-cosmetics/v1/selection/tft-damage-skin".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_cosmetics_v1_selection_tft_map_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-cosmetics/v1/selection/tft-map-skin".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_cosmetics_v1_inventories_by_set_name_companions(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsCompanionsGroupedViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-cosmetics/v1/inventories/{setName}/companions".to_string())
        ;
        req = req.with_path_param("setName".to_string(), set_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_cosmetics_v1_inventories_by_set_name_damage_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftDamageSkinGroupedViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-cosmetics/v1/inventories/{setName}/damage-skins".to_string())
        ;
        req = req.with_path_param("setName".to_string(), set_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_cosmetics_v1_inventories_by_set_name_map_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftMapSkinGroupedViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-cosmetics/v1/inventories/{setName}/map-skins".to_string())
        ;
        req = req.with_path_param("setName".to_string(), set_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_lol_cosmetics_v1_selection_companion(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-cosmetics/v1/selection/companion".to_string())
        ;
        req = req.with_body_param(item_id);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_cosmetics_v1_selection_tft_damage_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-cosmetics/v1/selection/tft-damage-skin".to_string())
        ;
        req = req.with_body_param(item_id);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_cosmetics_v1_selection_tft_map_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-cosmetics/v1/selection/tft-map-skin".to_string())
        ;
        req = req.with_body_param(item_id);

        req.execute(self.configuration.borrow())
    }

}
