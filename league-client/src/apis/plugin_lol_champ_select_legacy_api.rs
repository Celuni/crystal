/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolChampSelectLegacyApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolChampSelectLegacyApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolChampSelectLegacyApiClient<C> {
        PluginLolChampSelectLegacyApiClient {
            configuration,
        }
    }
}

pub trait PluginLolChampSelectLegacyApi {
    fn get_lol_champ_select_legacy_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectSession, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectLegacyChampSelectTradeContract>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyTeamBoost, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_legacy_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectLegacyChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_legacy_v1_session_my_selection(&self, selection: crate::models::LolChampSelectLegacyChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolChampSelectLegacyApi for PluginLolChampSelectLegacyApiClient<C> {
    fn get_lol_champ_select_legacy_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/bannable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/current-champion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/disabled-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/implementation-active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/pickable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session/timer".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectLegacyChampSelectTradeContract>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session/trades".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session/trades/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyTeamBoost, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/team-boost".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_legacy_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectLegacyChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select-legacy/v1/session/actions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_legacy_v1_session_my_selection(&self, selection: crate::models::LolChampSelectLegacyChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select-legacy/v1/session/my-selection".to_string())
        ;
        req = req.with_body_param(selection);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/battle-training/launch".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/actions/{id}/complete".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/my-selection/reroll".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/cancel".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/request".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/team-boost/purchase".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

}
