/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct TelemetryApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> TelemetryApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TelemetryApiClient<C> {
        TelemetryApiClient {
            configuration,
        }
    }
}

pub trait TelemetryApi {
    fn get_telemetry_v1_application_start_time(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_telemetry_v1_common_data_by_key(&self, key: &str, value: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_telemetry_v1_events_by_event_type(&self, event_type: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_telemetry_v1_events_once_by_event_type(&self, event_type: &str, once_tag: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_telemetry_v1_events_with_perf_info_by_event_type(&self, event_type: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_telemetry_v3_events_by_event_type(&self, event_type: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_telemetry_v3_events_once_by_event_type(&self, event_type: &str, once_tag: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>TelemetryApi for TelemetryApiClient<C> {
    fn get_telemetry_v1_application_start_time(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/telemetry/v1/application-start-time".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_telemetry_v1_common_data_by_key(&self, key: &str, value: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/telemetry/v1/common-data/{key}".to_string())
        ;
        req = req.with_path_param("key".to_string(), key.to_string());
        req = req.with_body_param(value);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_telemetry_v1_events_by_event_type(&self, event_type: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/telemetry/v1/events/{eventType}".to_string())
        ;
        req = req.with_path_param("eventType".to_string(), event_type.to_string());
        req = req.with_body_param(event_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_telemetry_v1_events_once_by_event_type(&self, event_type: &str, once_tag: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/telemetry/v1/events-once/{eventType}".to_string())
        ;
        req = req.with_query_param("onceTag".to_string(), once_tag.to_string());
        req = req.with_path_param("eventType".to_string(), event_type.to_string());
        req = req.with_body_param(event_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_telemetry_v1_events_with_perf_info_by_event_type(&self, event_type: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/telemetry/v1/events-with-perf-info/{eventType}".to_string())
        ;
        req = req.with_path_param("eventType".to_string(), event_type.to_string());
        req = req.with_body_param(event_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_telemetry_v3_events_by_event_type(&self, event_type: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/telemetry/v3/events/{eventType}".to_string())
        ;
        req = req.with_path_param("eventType".to_string(), event_type.to_string());
        req = req.with_body_param(event_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_telemetry_v3_events_once_by_event_type(&self, event_type: &str, once_tag: &str, event_data: ::std::collections::HashMap<String, serde_json::Value>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/telemetry/v3/events-once/{eventType}".to_string())
        ;
        req = req.with_query_param("onceTag".to_string(), once_tag.to_string());
        req = req.with_path_param("eventType".to_string(), event_type.to_string());
        req = req.with_body_param(event_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
