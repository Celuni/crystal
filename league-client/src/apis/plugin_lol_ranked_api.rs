use crate::helpers::JoinIterator;

/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use futures::Future;
use hyper;
use serde_json;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct PluginLolRankedApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolRankedApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolRankedApiClient<C> {
        PluginLolRankedApiClient { configuration }
    }
}

pub trait PluginLolRankedApi {
    fn get_lol_ranked_v1_apex_leagues_by_queue_type_by_tier(
        &self,
        queue_type: &str,
        tier: &str,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolRankedLeagueLadderInfo,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_ranked_v1_current_lp_change_notification(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolRankedLcuLeagueNotification,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_ranked_v1_current_ranked_stats(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_eos_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedEosNotificationResource>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_ranked_v1_eos_rewards(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolRankedEosRewardsConfig,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_ranked_v1_league_ladders_by_puuid(
        &self,
        puuid: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedLeagueLadderInfo>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_ranked_v1_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedLcuLeagueNotification>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_ranked_v1_ranked_stats(
        &self,
        puuids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, crate::models::LolRankedRankedStats>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_ranked_v1_ranked_stats_by_puuid(
        &self,
        puuid: &str,
    ) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_signed_ranked_stats(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SignedRankedStatsDto, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_splits_config(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolRankedRewardsInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v2_tiers(
        &self,
        summoner_ids: Vec<i64>,
        queue_types: Vec<crate::models::LolRankedLeagueQueueType>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedParticipantTiers>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_ranked_v1_eos_notifications_by_id_acknowledge(
        &self,
        id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_ranked_v1_notifications_by_id_acknowledge(
        &self,
        id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
}

impl<C: hyper::client::Connect> PluginLolRankedApi for PluginLolRankedApiClient<C> {
    fn get_lol_ranked_v1_apex_leagues_by_queue_type_by_tier(
        &self,
        queue_type: &str,
        tier: &str,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolRankedLeagueLadderInfo,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/apex-leagues/{queueType}/{tier}".to_string(),
        );
        req = req.with_path_param("queueType".to_string(), queue_type.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_current_lp_change_notification(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolRankedLcuLeagueNotification,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/current-lp-change-notification".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_current_ranked_stats(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/current-ranked-stats".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_eos_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedEosNotificationResource>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/eos-notifications".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_eos_rewards(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolRankedEosRewardsConfig,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/eos-rewards".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_league_ladders_by_puuid(
        &self,
        puuid: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedLeagueLadderInfo>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/league-ladders/{puuid}".to_string(),
        );
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedLcuLeagueNotification>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/notifications".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_ranked_stats(
        &self,
        puuids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, crate::models::LolRankedRankedStats>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/ranked-stats".to_string(),
        );
        req = req.with_query_param("puuids".to_string(), puuids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_ranked_stats_by_puuid(
        &self,
        puuid: &str,
    ) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/ranked-stats/{puuid}".to_string(),
        );
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_signed_ranked_stats(
        &self,
    ) -> Box<dyn Future<Item = crate::models::SignedRankedStatsDto, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/signed-ranked-stats".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_splits_config(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolRankedRewardsInfo, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v1/splits-config".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v2_tiers(
        &self,
        summoner_ids: Vec<i64>,
        queue_types: Vec<crate::models::LolRankedLeagueQueueType>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolRankedParticipantTiers>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-ranked/v2/tiers".to_string(),
        );
        req = req.with_query_param(
            "summonerIds".to_string(),
            summoner_ids.join(",").to_string(),
        );
        req = req.with_query_param("queueTypes".to_string(), queue_types.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_ranked_v1_eos_notifications_by_id_acknowledge(
        &self,
        id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-ranked/v1/eos-notifications/{id}/acknowledge".to_string(),
        );
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_ranked_v1_notifications_by_id_acknowledge(
        &self,
        id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-ranked/v1/notifications/{id}/acknowledge".to_string(),
        );
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }
}
