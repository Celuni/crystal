/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolEndOfGameApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolEndOfGameApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolEndOfGameApiClient<C> {
        PluginLolEndOfGameApiClient {
            configuration,
        }
    }
}

pub trait PluginLolEndOfGameApi {
    fn get_lol_end_of_game_v1_champion_mastery_updates(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameChampionMasteryUpdate, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGameStats, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_gameclient_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameGameClientEndOfGameStats, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_reported_players(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_tft_eog_stats(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameTftEndOfGameViewModel, Error = Error<serde_json::Value>>>;
    fn post_lol_end_of_game_v1_gameclient_eog_stats_block(&self, stats: crate::models::LolEndOfGameGameClientEndOfGameStats) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_end_of_game_v1_state_dismiss_stats(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_end_of_game_v2_player_complaints(&self, complaint: crate::models::LolEndOfGameEndOfGamePlayerComplaintV2) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGamePlayerComplaintV2, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolEndOfGameApi for PluginLolEndOfGameApiClient<C> {
    fn get_lol_end_of_game_v1_champion_mastery_updates(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameChampionMasteryUpdate, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/champion-mastery-updates".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGameStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/eog-stats-block".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_gameclient_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameGameClientEndOfGameStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/gameclient-eog-stats-block".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_reported_players(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/reported-players".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_tft_eog_stats(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameTftEndOfGameViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/tft-eog-stats".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_end_of_game_v1_gameclient_eog_stats_block(&self, stats: crate::models::LolEndOfGameGameClientEndOfGameStats) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-end-of-game/v1/gameclient-eog-stats-block".to_string())
        ;
        req = req.with_body_param(stats);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_end_of_game_v1_state_dismiss_stats(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-end-of-game/v1/state/dismiss-stats".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_end_of_game_v2_player_complaints(&self, complaint: crate::models::LolEndOfGameEndOfGamePlayerComplaintV2) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGamePlayerComplaintV2, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-end-of-game/v2/player-complaints".to_string())
        ;
        req = req.with_body_param(complaint);

        req.execute(self.configuration.borrow())
    }

}
