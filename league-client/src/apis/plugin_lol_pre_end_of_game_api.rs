/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolPreEndOfGameApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolPreEndOfGameApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolPreEndOfGameApiClient<C> {
        PluginLolPreEndOfGameApiClient {
            configuration,
        }
    }
}

pub trait PluginLolPreEndOfGameApi {
    fn delete_lol_pre_end_of_game_v1_registration_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_pre_end_of_game_v1_current_sequence_event(&self, ) -> Box<dyn Future<Item = crate::models::LolPreEndOfGameSequenceEvent, Error = Error<serde_json::Value>>>;
    fn post_lol_pre_end_of_game_v1_complete_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_pre_end_of_game_v1_registration_by_sequence_event_name_by_priority(&self, sequence_event_name: &str, priority: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolPreEndOfGameApi for PluginLolPreEndOfGameApiClient<C> {
    fn delete_lol_pre_end_of_game_v1_registration_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-pre-end-of-game/v1/registration/{sequenceEventName}".to_string())
        ;
        req = req.with_path_param("sequenceEventName".to_string(), sequence_event_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_pre_end_of_game_v1_current_sequence_event(&self, ) -> Box<dyn Future<Item = crate::models::LolPreEndOfGameSequenceEvent, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-pre-end-of-game/v1/currentSequenceEvent".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pre_end_of_game_v1_complete_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pre-end-of-game/v1/complete/{sequenceEventName}".to_string())
        ;
        req = req.with_path_param("sequenceEventName".to_string(), sequence_event_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pre_end_of_game_v1_registration_by_sequence_event_name_by_priority(&self, sequence_event_name: &str, priority: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pre-end-of-game/v1/registration/{sequenceEventName}/{priority}".to_string())
        ;
        req = req.with_path_param("sequenceEventName".to_string(), sequence_event_name.to_string());
        req = req.with_path_param("priority".to_string(), priority.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
