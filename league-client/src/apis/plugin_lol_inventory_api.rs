use crate::helpers::JoinIterator;

/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use futures::Future;
use hyper;
use serde_json;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct PluginLolInventoryApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolInventoryApiClient<C> {
    pub fn new(
        configuration: Rc<configuration::Configuration<C>>,
    ) -> PluginLolInventoryApiClient<C> {
        PluginLolInventoryApiClient { configuration }
    }
}

pub trait PluginLolInventoryApi {
    fn get_lol_inventory_v1_champ_select_inventory(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_initial_configuration_complete(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_inventory(
        &self,
        inventory_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_inventory_emotes(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_notifications_by_inventory_type(
        &self,
        inventory_type: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryNotification>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_players_by_puuid_inventory(
        &self,
        puuid: &str,
        inventory_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_signed_inventory(
        &self,
        inventory_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_signed_inventory_cache(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<
                String,
                crate::models::LolInventoryInventoryCacheEntry,
            >,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_signed_inventory_simple(
        &self,
        inventory_types: Vec<String>,
        timeout_in_seconds: Option<i32>,
        query_params: Option<serde_json::Value>,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_signed_inventory_tournamentlogos(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_signed_wallet(
        &self,
        currency_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_signed_wallet_by_currency_type(
        &self,
        currency_type: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_wallet(
        &self,
        currency_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, i32>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v1_wallet_by_currency_type(
        &self,
        currency_type: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, i32>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_inventory_v2_inventory_by_inventory_type(
        &self,
        inventory_type: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_inventory_v1_notification_acknowledge(
        &self,
        id: i64,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect> PluginLolInventoryApi for PluginLolInventoryApiClient<C> {
    fn get_lol_inventory_v1_champ_select_inventory(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/champSelectInventory".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_initial_configuration_complete(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/initial-configuration-complete".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_inventory(
        &self,
        inventory_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/inventory".to_string(),
        );
        req = req.with_query_param(
            "inventoryTypes".to_string(),
            inventory_types.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_inventory_emotes(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/inventory/emotes".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_notifications_by_inventory_type(
        &self,
        inventory_type: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryNotification>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/notifications/{inventoryType}".to_string(),
        );
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_players_by_puuid_inventory(
        &self,
        puuid: &str,
        inventory_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/players/{puuid}/inventory".to_string(),
        );
        req = req.with_query_param(
            "inventoryTypes".to_string(),
            inventory_types.join(",").to_string(),
        );
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory(
        &self,
        inventory_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/signedInventory".to_string(),
        );
        req = req.with_query_param(
            "inventoryTypes".to_string(),
            inventory_types.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory_cache(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<
                String,
                crate::models::LolInventoryInventoryCacheEntry,
            >,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/signedInventoryCache".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory_simple(
        &self,
        inventory_types: Vec<String>,
        timeout_in_seconds: Option<i32>,
        query_params: Option<serde_json::Value>,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/signedInventory/simple".to_string(),
        );
        req = req.with_query_param(
            "inventoryTypes".to_string(),
            inventory_types.join(",").to_string(),
        );
        if let Some(ref s) = timeout_in_seconds {
            req = req.with_query_param("timeoutInSeconds".to_string(), s.to_string());
        }
        if let Some(ref s) = query_params {
            req = req.with_query_param("queryParams".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory_tournamentlogos(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/signedInventory/tournamentlogos".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_wallet(
        &self,
        currency_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/signedWallet".to_string(),
        );
        req = req.with_query_param(
            "currencyTypes".to_string(),
            currency_types.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_wallet_by_currency_type(
        &self,
        currency_type: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, String>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/signedWallet/{currencyType}".to_string(),
        );
        req = req.with_path_param("currencyType".to_string(), currency_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_wallet(
        &self,
        currency_types: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, i32>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/wallet".to_string(),
        );
        req = req.with_query_param(
            "currencyTypes".to_string(),
            currency_types.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_wallet_by_currency_type(
        &self,
        currency_type: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, i32>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v1/wallet/{currencyType}".to_string(),
        );
        req = req.with_path_param("currencyType".to_string(), currency_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v2_inventory_by_inventory_type(
        &self,
        inventory_type: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-inventory/v2/inventory/{inventoryType}".to_string(),
        );
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_inventory_v1_notification_acknowledge(
        &self,
        id: i64,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-inventory/v1/notification/acknowledge".to_string(),
        );
        req = req.with_body_param(id);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }
}
