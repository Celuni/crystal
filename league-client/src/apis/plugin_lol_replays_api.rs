/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolReplaysApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolReplaysApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolReplaysApiClient<C> {
        PluginLolReplaysApiClient {
            configuration,
        }
    }
}

pub trait PluginLolReplaysApi {
    fn get_lol_replays_v1_configuration(&self, ) -> Box<dyn Future<Item = crate::models::LolReplaysReplaysConfiguration, Error = Error<serde_json::Value>>>;
    fn get_lol_replays_v1_metadata_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolReplaysReplayMetadata, Error = Error<serde_json::Value>>>;
    fn get_lol_replays_v1_rofls_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_replays_v1_rofls_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_metadata_by_game_id_create_game_version_by_game_version_game_type_by_game_type_queue_id_by_queue_id(&self, game_id: i64, game_version: &str, game_type: &str, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_by_game_id_download(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_by_game_id_download_graceful(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_by_game_id_watch(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_scan(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v2_metadata_by_game_id_create(&self, game_id: i64, request: crate::models::LolReplaysReplayCreateMetadata) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolReplaysApi for PluginLolReplaysApiClient<C> {
    fn get_lol_replays_v1_configuration(&self, ) -> Box<dyn Future<Item = crate::models::LolReplaysReplaysConfiguration, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/configuration".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_replays_v1_metadata_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolReplaysReplayMetadata, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/metadata/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_replays_v1_rofls_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/rofls/path".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_replays_v1_rofls_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/rofls/path/default".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_metadata_by_game_id_create_game_version_by_game_version_game_type_by_game_type_queue_id_by_queue_id(&self, game_id: i64, game_version: &str, game_type: &str, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/metadata/{gameId}/create/gameVersion/{gameVersion}/gameType/{gameType}/queueId/{queueId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_path_param("gameVersion".to_string(), game_version.to_string());
        req = req.with_path_param("gameType".to_string(), game_type.to_string());
        req = req.with_path_param("queueId".to_string(), queue_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_by_game_id_download(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/{gameId}/download".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(context_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_by_game_id_download_graceful(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/{gameId}/download/graceful".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(context_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_by_game_id_watch(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/{gameId}/watch".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(context_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_scan(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/scan".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v2_metadata_by_game_id_create(&self, game_id: i64, request: crate::models::LolReplaysReplayCreateMetadata) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v2/metadata/{gameId}/create".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
