/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolLicenseAgreementApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolLicenseAgreementApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolLicenseAgreementApiClient<C> {
        PluginLolLicenseAgreementApiClient {
            configuration,
        }
    }
}

pub trait PluginLolLicenseAgreementApi {
    fn get_lol_license_agreement_v1_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>>;
    fn get_lol_license_agreement_v1_all_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>>;
    fn get_lol_license_agreement_v1_serve_location(&self, ) -> Box<dyn Future<Item = crate::models::LolLicenseAgreementLicenseServeLocation, Error = Error<serde_json::Value>>>;
    fn post_lol_license_agreement_v1_agreements_by_id_accept(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_license_agreement_v1_agreements_by_id_decline(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolLicenseAgreementApi for PluginLolLicenseAgreementApiClient<C> {
    fn get_lol_license_agreement_v1_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-license-agreement/v1/agreements".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_license_agreement_v1_all_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-license-agreement/v1/all-agreements".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_license_agreement_v1_serve_location(&self, ) -> Box<dyn Future<Item = crate::models::LolLicenseAgreementLicenseServeLocation, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-license-agreement/v1/serve-location".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_license_agreement_v1_agreements_by_id_accept(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-license-agreement/v1/agreements/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_license_agreement_v1_agreements_by_id_decline(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-license-agreement/v1/agreements/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

}
