use crate::helpers::JoinIterator;

/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use futures::Future;
use hyper;
use serde_json;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct RiotclientApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> RiotclientApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> RiotclientApiClient<C> {
        RiotclientApiClient { configuration }
    }
}

pub trait RiotclientApi {
    fn delete_riotclient_affinity(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_riotclient_splash(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_riotclient_v1_auth_tokens_by_auth_token(
        &self,
        auth_token: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_riotclient_affinity(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_riotclient_app_name(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_riotclient_app_port(
        &self,
    ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_riotclient_auth_token(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_riotclient_command_line_args(
        &self,
    ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_riotclient_get_region_locale(
        &self,
    ) -> Box<dyn Future<Item = crate::models::RegionLocale, Error = Error<serde_json::Value>>>;
    fn get_riotclient_machine_id(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_riotclient_region_locale(
        &self,
    ) -> Box<dyn Future<Item = crate::models::RegionLocale, Error = Error<serde_json::Value>>>;
    fn get_riotclient_system_info_v1_basic_info(
        &self,
    ) -> Box<dyn Future<Item = crate::models::BasicSystemInfo, Error = Error<serde_json::Value>>>;
    fn get_riotclient_trace(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_riotclient_ux_crash_count(
        &self,
    ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_riotclient_ux_state(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_riotclient_v1_crash_reporting_environment(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::CrashReportingEnvironment,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_riotclient_zoom_scale(
        &self,
    ) -> Box<dyn Future<Item = f64, Error = Error<serde_json::Value>>>;
    fn post_riotclient_affinity(
        &self,
        new_affinity: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_kill_and_restart_ux(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_kill_ux(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_launch_ux(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_new_args(
        &self,
        UNKNOWN_BASE_TYPE: crate::models::UNKNOWN_BASE_TYPE,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_set_region_locale(
        &self,
        region: &str,
        locale: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_show_swagger(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_unload(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_ux_allow_foreground(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_ux_flash(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_ux_minimize(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_ux_show(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_v1_crash_reporting_logs(
        &self,
        log_file_path: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_v1_elevation_requests(
        &self,
        request: crate::models::ElevationRequest,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riotclient_zoom_scale(
        &self,
        new_zoom_scale: f64,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_riotclient_region_locale(
        &self,
        data: crate::models::RegionLocale,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_riotclient_region_locale_ack(
        &self,
        request_id: i32,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_riotclient_splash(&self)
        -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_riotclient_ux_load_complete(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_riotclient_ux_state_ack(
        &self,
        request_id: i32,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_riotclient_v1_auth_tokens_by_auth_token(
        &self,
        auth_token: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn put_riotclient_v1_crash_reporting_environment(
        &self,
        environment: crate::models::CrashReportingEnvironment,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_riotclient_v1_self_update_info(
        &self,
        url: &str,
        uuid: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect> RiotclientApi for RiotclientApiClient<C> {
    fn delete_riotclient_affinity(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Delete,
            "/riotclient/affinity".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_riotclient_splash(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Delete,
            "/riotclient/splash".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_riotclient_v1_auth_tokens_by_auth_token(
        &self,
        auth_token: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Delete,
            "/riotclient/v1/auth-tokens/{authToken}".to_string(),
        );
        req = req.with_path_param("authToken".to_string(), auth_token.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_affinity(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/affinity".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_app_name(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/app-name".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_app_port(
        &self,
    ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/app-port".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_auth_token(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/auth-token".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_command_line_args(
        &self,
    ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/command-line-args".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_get_region_locale(
        &self,
    ) -> Box<dyn Future<Item = crate::models::RegionLocale, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/get_region_locale".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_machine_id(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/machine-id".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_region_locale(
        &self,
    ) -> Box<dyn Future<Item = crate::models::RegionLocale, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/region-locale".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_system_info_v1_basic_info(
        &self,
    ) -> Box<dyn Future<Item = crate::models::BasicSystemInfo, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/system-info/v1/basic-info".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_trace(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req =
            __internal_request::Request::new(hyper::Method::Get, "/riotclient/trace".to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_ux_crash_count(
        &self,
    ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/ux-crash-count".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_ux_state(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/ux-state".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_v1_crash_reporting_environment(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::CrashReportingEnvironment,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/v1/crash-reporting/environment".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_riotclient_zoom_scale(
        &self,
    ) -> Box<dyn Future<Item = f64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/riotclient/zoom-scale".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_affinity(
        &self,
        new_affinity: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/affinity".to_string(),
        );
        req = req.with_query_param("newAffinity".to_string(), new_affinity.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_kill_and_restart_ux(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/kill-and-restart-ux".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_kill_ux(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/kill-ux".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_launch_ux(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/launch-ux".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_new_args(
        &self,
        UNKNOWN_BASE_TYPE: crate::models::UNKNOWN_BASE_TYPE,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/new-args".to_string(),
        );
        req = req.with_body_param(UNKNOWN_BASE_TYPE);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_set_region_locale(
        &self,
        region: &str,
        locale: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/set_region_locale".to_string(),
        );
        req = req.with_query_param("region".to_string(), region.to_string());
        req = req.with_query_param("locale".to_string(), locale.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_show_swagger(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/show-swagger".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_unload(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::Post, "/riotclient/unload".to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_ux_allow_foreground(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/ux-allow-foreground".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_ux_flash(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/ux-flash".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_ux_minimize(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/ux-minimize".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_ux_show(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/ux-show".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_v1_crash_reporting_logs(
        &self,
        log_file_path: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/v1/crash-reporting/logs".to_string(),
        );
        req = req.with_body_param(log_file_path);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_v1_elevation_requests(
        &self,
        request: crate::models::ElevationRequest,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/v1/elevation-requests".to_string(),
        );
        req = req.with_body_param(request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riotclient_zoom_scale(
        &self,
        new_zoom_scale: f64,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/riotclient/zoom-scale".to_string(),
        );
        req = req.with_query_param("newZoomScale".to_string(), new_zoom_scale.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_region_locale(
        &self,
        data: crate::models::RegionLocale,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Put,
            "/riotclient/region-locale".to_string(),
        );
        req = req.with_body_param(data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_region_locale_ack(
        &self,
        request_id: i32,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Put,
            "/riotclient/region-locale/ack".to_string(),
        );
        req = req.with_body_param(request_id);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_splash(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::Put, "/riotclient/splash".to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_ux_load_complete(
        &self,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Put,
            "/riotclient/ux-load-complete".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_ux_state_ack(
        &self,
        request_id: i32,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Put,
            "/riotclient/ux-state/ack".to_string(),
        );
        req = req.with_body_param(request_id);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_v1_auth_tokens_by_auth_token(
        &self,
        auth_token: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Put,
            "/riotclient/v1/auth-tokens/{authToken}".to_string(),
        );
        req = req.with_path_param("authToken".to_string(), auth_token.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_v1_crash_reporting_environment(
        &self,
        environment: crate::models::CrashReportingEnvironment,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Put,
            "/riotclient/v1/crash-reporting/environment".to_string(),
        );
        req = req.with_body_param(environment);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_riotclient_v1_self_update_info(
        &self,
        url: &str,
        uuid: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Put,
            "/riotclient/v1/self-update-info".to_string(),
        );
        req = req.with_query_param("url".to_string(), url.to_string());
        req = req.with_query_param("uuid".to_string(), uuid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }
}
