/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolPlayerLevelUpApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolPlayerLevelUpApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolPlayerLevelUpApiClient<C> {
        PluginLolPlayerLevelUpApiClient {
            configuration,
        }
    }
}

pub trait PluginLolPlayerLevelUpApi {
    fn get_lol_player_level_up_v1_level_up(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEvent, Error = Error<serde_json::Value>>>;
    fn get_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEventAck, Error = Error<serde_json::Value>>>;
    fn post_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str, level_up_event_ack: crate::models::LolPlayerLevelUpPlayerLevelUpEventAck) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolPlayerLevelUpApi for PluginLolPlayerLevelUpApiClient<C> {
    fn get_lol_player_level_up_v1_level_up(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEvent, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-level-up/v1/level-up".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEventAck, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-level-up/v1/level-up-notifications/{pluginName}".to_string())
        ;
        req = req.with_path_param("pluginName".to_string(), plugin_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str, level_up_event_ack: crate::models::LolPlayerLevelUpPlayerLevelUpEventAck) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-player-level-up/v1/level-up-notifications/{pluginName}".to_string())
        ;
        req = req.with_path_param("pluginName".to_string(), plugin_name.to_string());
        req = req.with_body_param(level_up_event_ack);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
