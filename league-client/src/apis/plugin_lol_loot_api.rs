/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolLootApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolLootApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolLootApiClient<C> {
        PluginLolLootApiClient {
            configuration,
        }
    }
}

pub trait PluginLolLootApi {
    fn delete_lol_loot_v1_loot_grants_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_loot_v1_player_loot_by_loot_id_new_notification(&self, loot_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_currency_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_loot_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootGrantNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_loot_items(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootItem>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_new_player_check_done(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_display_categories(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLoot, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_map(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLootNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_recipes_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v2_player_loot_map(&self, ) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootMap, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_new_player_check_done_by_new_value(&self, new_value: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_player_loot_by_loot_name_redeem(&self, loot_name: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_player_loot_notifications_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_recipes_by_recipe_name_craft(&self, recipe_name: &str, player_loot_list: Vec<String>, repeat: Option<i32>) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_refresh(&self, force: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolLootApi for PluginLolLootApiClient<C> {
    fn delete_lol_loot_v1_loot_grants_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-loot/v1/loot-grants/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_loot_v1_player_loot_by_loot_id_new_notification(&self, loot_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-loot/v1/player-loot/{lootId}/new-notification".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_currency_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/currency-configuration".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_loot_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootGrantNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/loot-grants".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_loot_items(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootItem>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/loot-items".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_new_player_check_done(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/new-player-check-done".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_display_categories(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-display-categories".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLoot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot/{lootId}".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot/{lootId}/context-menu".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_map(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot-map".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLootNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_recipes_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/recipes/configuration".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/recipes/initial-item/{lootId}".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v2_player_loot_map(&self, ) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootMap, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v2/player-loot-map".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_new_player_check_done_by_new_value(&self, new_value: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/new-player-check-done/{newValue}".to_string())
        ;
        req = req.with_path_param("newValue".to_string(), new_value.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/player-loot/{lootId}/context-menu".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_player_loot_by_loot_name_redeem(&self, loot_name: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/player-loot/{lootName}/redeem".to_string())
        ;
        req = req.with_path_param("lootName".to_string(), loot_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_player_loot_notifications_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/player-loot-notifications/{id}/acknowledge".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_recipes_by_recipe_name_craft(&self, recipe_name: &str, player_loot_list: Vec<String>, repeat: Option<i32>) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/recipes/{recipeName}/craft".to_string())
        ;
        if let Some(ref s) = repeat {
            req = req.with_query_param("repeat".to_string(), s.to_string());
        }
        req = req.with_path_param("recipeName".to_string(), recipe_name.to_string());
        req = req.with_body_param(player_loot_list);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/recipes/initial-item/{lootId}".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_refresh(&self, force: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/refresh".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());

        req.execute(self.configuration.borrow())
    }

}
