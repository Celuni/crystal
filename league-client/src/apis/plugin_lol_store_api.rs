use crate::helpers::JoinIterator;

/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use futures::Future;
use hyper;
use serde_json;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct PluginLolStoreApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolStoreApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolStoreApiClient<C> {
        PluginLolStoreApiClient { configuration }
    }
}

pub trait PluginLolStoreApi {
    fn get_lol_store_v1_by_page_type(
        &self,
        page_type: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_catalog(
        &self,
        inventory_type: Option<Vec<String>>,
        item_id: Option<Vec<i32>>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreCatalogItem>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_catalog_by_instance_ids(
        &self,
        instance_ids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreCatalogItem>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_catalog_by_inventory_type(
        &self,
        inventory_type: &str,
        item_ids: Vec<i32>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreCatalogItem>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_catalog_sales(
        &self,
    ) -> Box<
        dyn Future<Item = Vec<crate::models::LolStoreItemSale>, Error = Error<serde_json::Value>>,
    >;
    fn get_lol_store_v1_get_store_url(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_giftablefriends(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreGiftingFriend>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_item_keys_from_instance_ids(
        &self,
        instance_ids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, crate::models::LolStoreItemKey>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_last_page(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_offers(
        &self,
        inventory_type_uui_ds: Option<Vec<String>>,
    ) -> Box<
        dyn Future<Item = Vec<crate::models::LolStoreCapOffer>, Error = Error<serde_json::Value>>,
    >;
    fn get_lol_store_v1_order_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreOrderNotificationResource>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_order_notifications_by_id(
        &self,
        id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolStoreOrderNotificationResource,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_payment_details(
        &self,
        action: &str,
        gift_recipient_account_id: Option<i64>,
        gift_message: Option<&str>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_store_v1_skins_by_skin_id(
        &self,
        skin_id: i32,
    ) -> Box<dyn Future<Item = crate::models::LolStoreCatalogItem, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_status(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolStoreStoreStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_store_ready(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_wallet(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolStoreWallet, Error = Error<serde_json::Value>>>;
    fn post_lol_store_v1_last_page(
        &self,
        page_type: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_store_v1_notifications_acknowledge(
        &self,
        id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_store_v1_skins_by_skin_id_purchase(
        &self,
        skin_id: i32,
        cost: crate::models::LolStoreItemCost,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
}

impl<C: hyper::client::Connect> PluginLolStoreApi for PluginLolStoreApiClient<C> {
    fn get_lol_store_v1_by_page_type(
        &self,
        page_type: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/{pageType}".to_string(),
        );
        req = req.with_path_param("pageType".to_string(), page_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog(
        &self,
        inventory_type: Option<Vec<String>>,
        item_id: Option<Vec<i32>>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreCatalogItem>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/catalog".to_string(),
        );
        if let Some(ref s) = inventory_type {
            req = req.with_query_param("inventoryType".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = item_id {
            req = req.with_query_param("itemId".to_string(), s.join(",").to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog_by_instance_ids(
        &self,
        instance_ids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreCatalogItem>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/catalogByInstanceIds".to_string(),
        );
        req = req.with_query_param(
            "instanceIds".to_string(),
            instance_ids.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog_by_inventory_type(
        &self,
        inventory_type: &str,
        item_ids: Vec<i32>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreCatalogItem>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/catalog/{inventoryType}".to_string(),
        );
        req = req.with_query_param("itemIds".to_string(), item_ids.join(",").to_string());
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog_sales(
        &self,
    ) -> Box<
        dyn Future<Item = Vec<crate::models::LolStoreItemSale>, Error = Error<serde_json::Value>>,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/catalog/sales".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_get_store_url(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/getStoreUrl".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_giftablefriends(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreGiftingFriend>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/giftablefriends".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_item_keys_from_instance_ids(
        &self,
        instance_ids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, crate::models::LolStoreItemKey>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/itemKeysFromInstanceIds".to_string(),
        );
        req = req.with_query_param(
            "instanceIds".to_string(),
            instance_ids.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_last_page(
        &self,
    ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/lastPage".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_offers(
        &self,
        inventory_type_uui_ds: Option<Vec<String>>,
    ) -> Box<
        dyn Future<Item = Vec<crate::models::LolStoreCapOffer>, Error = Error<serde_json::Value>>,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/offers".to_string(),
        );
        if let Some(ref s) = inventory_type_uui_ds {
            req = req.with_query_param("inventoryTypeUUIDs".to_string(), s.join(",").to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_order_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolStoreOrderNotificationResource>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/order-notifications".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_order_notifications_by_id(
        &self,
        id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolStoreOrderNotificationResource,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/order-notifications/{id}".to_string(),
        );
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_payment_details(
        &self,
        action: &str,
        gift_recipient_account_id: Option<i64>,
        gift_message: Option<&str>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/paymentDetails".to_string(),
        );
        req = req.with_query_param("action".to_string(), action.to_string());
        if let Some(ref s) = gift_recipient_account_id {
            req = req.with_query_param("giftRecipientAccountId".to_string(), s.to_string());
        }
        if let Some(ref s) = gift_message {
            req = req.with_query_param("giftMessage".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_skins_by_skin_id(
        &self,
        skin_id: i32,
    ) -> Box<dyn Future<Item = crate::models::LolStoreCatalogItem, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/skins/{skinId}".to_string(),
        );
        req = req.with_path_param("skinId".to_string(), skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_status(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolStoreStoreStatus, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/status".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_store_ready(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/store-ready".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_wallet(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolStoreWallet, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-store/v1/wallet".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_store_v1_last_page(
        &self,
        page_type: &str,
    ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-store/v1/lastPage".to_string(),
        );
        req = req.with_body_param(page_type);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_store_v1_notifications_acknowledge(
        &self,
        id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-store/v1/notifications/acknowledge".to_string(),
        );
        req = req.with_body_param(id);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_store_v1_skins_by_skin_id_purchase(
        &self,
        skin_id: i32,
        cost: crate::models::LolStoreItemCost,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-store/v1/skins/{skinId}/purchase".to_string(),
        );
        req = req.with_path_param("skinId".to_string(), skin_id.to_string());
        req = req.with_body_param(cost);

        req.execute(self.configuration.borrow())
    }
}
