/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolNpeRewardsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolNpeRewardsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolNpeRewardsApiClient<C> {
        PluginLolNpeRewardsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolNpeRewardsApi {
    fn get_lol_npe_rewards_v1_challenges_progress(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsChallengesProgress, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_level_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_level_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_login_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_login_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>>;
    fn post_lol_npe_rewards_v1_challenges_opt(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolNpeRewardsApi for PluginLolNpeRewardsApiClient<C> {
    fn get_lol_npe_rewards_v1_challenges_progress(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsChallengesProgress, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/challenges/progress".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_level_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/level-rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_level_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/level-rewards/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_login_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/login-rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_login_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/login-rewards/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_npe_rewards_v1_challenges_opt(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-npe-rewards/v1/challenges/opt".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
