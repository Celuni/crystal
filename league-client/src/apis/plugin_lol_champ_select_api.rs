/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolChampSelectApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolChampSelectApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolChampSelectApiClient<C> {
        PluginLolChampSelectApiClient {
            configuration,
        }
    }
}

pub trait PluginLolChampSelectApi {
    fn get_lol_champ_select_v1_all_grid_champions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampGridChampion>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_grid_champions_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampGridChampion, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_muted_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectMutedPlayerInfo>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPickableSkins, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_pin_drop_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPinDropNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSession, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampSelectTradeContract>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_sfx_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectSfxNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_summoners_by_slot_id(&self, slot_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSummoner, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectTeamBoost, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_v1_session_my_selection(&self, selection: crate::models::LolChampSelectChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_simple_inventory(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_toggle_favorite_by_champion_id_by_position(&self, champion_id: i64, position: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_toggle_player_muted(&self, player: crate::models::LolChampSelectMutedPlayerInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolChampSelectApi for PluginLolChampSelectApiClient<C> {
    fn get_lol_champ_select_v1_all_grid_champions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampGridChampion>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/all-grid-champions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/bannable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/current-champion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/disabled-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_grid_champions_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampGridChampion, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/grid-champions/{championId}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_muted_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectMutedPlayerInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/muted-players".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/pickable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPickableSkins, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/pickable-skins".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_pin_drop_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPinDropNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/pin-drop-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session/timer".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampSelectTradeContract>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session/trades".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session/trades/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_sfx_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectSfxNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/sfx-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_summoners_by_slot_id(&self, slot_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/summoners/{slotId}".to_string())
        ;
        req = req.with_path_param("slotId".to_string(), slot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectTeamBoost, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/team-boost".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select/v1/session/actions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_v1_session_my_selection(&self, selection: crate::models::LolChampSelectChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select/v1/session/my-selection".to_string())
        ;
        req = req.with_body_param(selection);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/battle-training/launch".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/retrieve-latest-game-dto".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/actions/{id}/complete".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/bench/swap/{championId}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/my-selection/reroll".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/report-player/{id}/{category}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_simple_inventory(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/simple-inventory".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/cancel".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/request".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/team-boost/purchase".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_toggle_favorite_by_champion_id_by_position(&self, champion_id: i64, position: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/toggle-favorite/{championId}/{position}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_toggle_player_muted(&self, player: crate::models::LolChampSelectMutedPlayerInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/toggle-player-muted".to_string())
        ;
        req = req.with_body_param(player);

        req.execute(self.configuration.borrow())
    }

}
