/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolMatchHistoryApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolMatchHistoryApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolMatchHistoryApiClient<C> {
        PluginLolMatchHistoryApiClient {
            configuration,
        }
    }
}

pub trait PluginLolMatchHistoryApi {
    fn get_lol_match_history_v1_delta(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryPlayerDelta, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_friend_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_game_timelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryTimelineFrames, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryGame, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_matchlist(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_recently_played_summoners(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMatchHistoryRecentlyPlayedSummoner>, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_web_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v2_matchlist(&self, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolMatchHistoryApi for PluginLolMatchHistoryApiClient<C> {
    fn get_lol_match_history_v1_delta(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryPlayerDelta, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/delta".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_friend_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/friend-matchlists/{accountId}".to_string())
        ;
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_game_timelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryTimelineFrames, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/game-timelines/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/games/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_matchlist(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/matchlist".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_recently_played_summoners(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMatchHistoryRecentlyPlayedSummoner>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/recently-played-summoners".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_web_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/web-url".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v2_matchlist(&self, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v2/matchlist".to_string())
        ;
        req = req.with_query_param("begIndex".to_string(), beg_index.to_string());
        req = req.with_query_param("endIndex".to_string(), end_index.to_string());

        req.execute(self.configuration.borrow())
    }

}
