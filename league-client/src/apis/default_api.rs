/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration,
        }
    }
}

pub trait DefaultApi {
    fn logging_get_entries(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LogEvent>, Error = Error<serde_json::Value>>>;
    fn logging_metrics(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn logging_metrics_metadata(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn logging_start(&self, buffered: Option<bool>, severity: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn logging_stop(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn memory_pools(&self, context_name: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn logging_get_entries(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LogEvent>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/LoggingGetEntries".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn logging_metrics(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/LoggingMetrics".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn logging_metrics_metadata(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/LoggingMetricsMetadata".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn logging_start(&self, buffered: Option<bool>, severity: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/LoggingStart".to_string())
        ;
        if let Some(ref s) = buffered {
            req = req.with_query_param("buffered".to_string(), s.to_string());
        }
        if let Some(ref s) = severity {
            req = req.with_query_param("severity".to_string(), s.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn logging_stop(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/LoggingStop".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn memory_pools(&self, context_name: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/MemoryPools".to_string())
        ;
        if let Some(ref s) = context_name {
            req = req.with_query_param("contextName".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
