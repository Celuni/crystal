/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolAccountVerificationApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolAccountVerificationApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolAccountVerificationApiClient<C> {
        PluginLolAccountVerificationApiClient {
            configuration,
        }
    }
}

pub trait PluginLolAccountVerificationApi {
    fn get_lol_account_verification_v1_device(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationDeviceResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_account_verification_v1_is_verified(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationIsVerifiedResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_authenticate(&self, authenticate_request: crate::models::LolAccountVerificationAuthenticateRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationAuthenticateResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_invalidate(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationInvalidateResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_send_token(&self, send_token_request: crate::models::LolAccountVerificationSendTokenRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationSendTokenResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_verify(&self, verify_request: crate::models::LolAccountVerificationVerifyRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationVerifyResponse, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolAccountVerificationApi for PluginLolAccountVerificationApiClient<C> {
    fn get_lol_account_verification_v1_device(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationDeviceResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-account-verification/v1/device".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_account_verification_v1_is_verified(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationIsVerifiedResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-account-verification/v1/is-verified".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_authenticate(&self, authenticate_request: crate::models::LolAccountVerificationAuthenticateRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationAuthenticateResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/authenticate".to_string())
        ;
        req = req.with_body_param(authenticate_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_invalidate(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationInvalidateResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/invalidate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_send_token(&self, send_token_request: crate::models::LolAccountVerificationSendTokenRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationSendTokenResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/send-token".to_string())
        ;
        req = req.with_body_param(send_token_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_verify(&self, verify_request: crate::models::LolAccountVerificationVerifyRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationVerifyResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/verify".to_string())
        ;
        req = req.with_body_param(verify_request);

        req.execute(self.configuration.borrow())
    }

}
