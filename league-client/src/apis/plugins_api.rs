use crate::helpers::JoinIterator;

/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginsApiClient<C> {
        PluginsApiClient {
            configuration,
        }
    }
}

pub trait PluginsApi {
    fn delete_gcloud_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_gcloud_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_blocked_players_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_conversations_active(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_conversations_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_conversations_by_id_messages(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_errors_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_friend_groups_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_friend_requests_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_friends_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_session(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_chat_v1_settings_by_key(&self, key: &str, do_async: Option<bool>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_clash_v1_voice(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_clash_v1_voice_delay_by_delay_seconds(&self, delay_seconds: f64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn delete_lol_cosmetics_v1_selection_companion(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_cosmetics_v1_selection_tft_damage_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_cosmetics_v1_selection_tft_map_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_gameflow_v1_early_exit_notifications_eog(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_gameflow_v1_early_exit_notifications_eog_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_gameflow_v1_early_exit_notifications_missions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_gameflow_v1_early_exit_notifications_missions_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>>;
    fn delete_lol_leaver_buster_v1_notifications_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_loadouts_v4_loadouts_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v1_clash(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v2_notifications_by_notification_id(&self, notification_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_login_v1_service_proxy_async_requests_by_service_name_by_method_name(&self, service_name: &str, method_name: &str, plugin_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_login_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_login_v1_shutdown_locks_by_lock_name(&self, lock_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_loot_v1_loot_grants_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_loot_v1_player_loot_by_loot_id_new_notification(&self, loot_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_matchmaking_v1_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_patch_v1_notifications_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_perks_v1_pages_by_id_auto_modified_selections(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>>;
    fn delete_lol_player_messaging_v1_celebration_notification_by_id_acknowledge(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_player_messaging_v1_notification_by_id_acknowledge(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_pre_end_of_game_v1_registration_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_rms_v1_champion_mastery_leaveup_update_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_rso_auth_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_rso_auth_v2_config(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_simple_dialog_messages_v1_messages_by_message_id(&self, message_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_statstones_v1_eog_notifications(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_statstones_v1_eog_notifications_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_statstones_v1_vignette_notifications(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_statstones_v1_vignette_notifications_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_suggested_players_v1_suggested_players_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_patcher_v1_notifications_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_patcher_v1_products_by_product_id(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_player_notifications_v1_notifications_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_recofriender_v1_registrations_by_network(&self, network: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_recofriender_v2_contacts(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_recofriender_v2_dismissed(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_riot_messaging_service_v1_connect(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_riot_messaging_service_v1_entitlements(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_anti_addiction_v1_policies_by_policy_type_anti_addiction_state(&self, policy_type: &str) -> Box<dyn Future<Item = crate::models::LolTencentAntiaddictionAntiAddictionState, Error = Error<serde_json::Value>>>;
    fn get_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v1_config(&self, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>, namespace: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v1_config_by_name(&self, name: &str, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v1_status_by_type(&self, _type: &str) -> Box<dyn Future<Item = crate::models::ClientConfigConfigStatus, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_config_by_name(&self, name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_namespace_by_namespace(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_namespace_by_namespace_player(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_namespace_by_namespace_public(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_entitlements_v1_token(&self, ) -> Box<dyn Future<Item = crate::models::EntitlementsToken, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v1_audio_properties(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatAudioPropertiesResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v1_call_stats_aggregate(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatCallStatsResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v1_call_stats_by_id(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatCallStatsResource>, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v1_codec_settings(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatCodecSettingsResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatConfigResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatVoiceErrorCounterResource>, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v1_push_to_talk(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatPushToTalkResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_devices_capture(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_devices_capture_permission(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_devices_render(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatSessionResource>, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatParticipantResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_settings(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSettingsResource, Error = Error<serde_json::Value>>>;
    fn get_gcloud_voice_chat_v2_state(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatStateResource, Error = Error<serde_json::Value>>>;
    fn get_lol_account_verification_v1_device(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationDeviceResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_account_verification_v1_is_verified(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationIsVerifiedResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_delta(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_gametimelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_matchlists(&self, account_id: i64, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_recently_played_champions_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_request_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_request_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_active_boosts_v1_active_boosts(&self, ) -> Box<dyn Future<Item = crate::models::LolActiveBoostsActiveBoosts, Error = Error<serde_json::Value>>>;
    fn get_lol_banners_v1_current_summoner_flags(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolBannersBannerFlag>, Error = Error<serde_json::Value>>>;
    fn get_lol_banners_v1_current_summoner_flags_equipped(&self, ) -> Box<dyn Future<Item = crate::models::LolBannersBannerFlag, Error = Error<serde_json::Value>>>;
    fn get_lol_banners_v1_current_summoner_frames_equipped(&self, ) -> Box<dyn Future<Item = crate::models::LolBannersBannerFrame, Error = Error<serde_json::Value>>>;
    fn get_lol_banners_v1_players_by_puuid_flags_equipped(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolBannersBannerFlag, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_champion_averages_by_champion_id_by_position_by_tier_by_queue(&self, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_champion_averages_season_by_season_by_champion_id_by_position_by_tier_by_queue(&self, season: i32, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_champion_experts_by_champion_id_by_position(&self, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_champion_experts_season_by_season_by_champion_id_by_position(&self, season: i32, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_averages_by_position_by_tier_by_queue(&self, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_averages_season_by_season_by_position_by_tier_by_queue(&self, season: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_experts_by_position(&self, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_experts_season_by_season_by_position(&self, season: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_summoner_games_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_summoner_games_by_puuid_season_by_season(&self, puuid: &str, season: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_summoner_stats_by_puuid_by_season_by_queue_by_position(&self, puuid: &str, season: i32, queue: &str, position: &str, champion_id: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_catalog_v1_item_details(&self, inventory_type: &str, item_id: i64) -> Box<dyn Future<Item = crate::models::LolCatalogCatalogPluginItemWithDetails, Error = Error<serde_json::Value>>>;
    fn get_lol_catalog_v1_items(&self, inventory_type: &str, item_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolCatalogItemChoiceDetails>, Error = Error<serde_json::Value>>>;
    fn get_lol_catalog_v1_items_by_inventory_type(&self, inventory_type: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCatalogCatalogPluginItem>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectSession, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectLegacyChampSelectTradeContract>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_legacy_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyTeamBoost, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_all_grid_champions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampGridChampion>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_grid_champions_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampGridChampion, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_muted_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectMutedPlayerInfo>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPickableSkins, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_pin_drop_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPinDropNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSession, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampSelectTradeContract>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_sfx_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectSfxNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_summoners_by_slot_id(&self, slot_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSummoner, Error = Error<serde_json::Value>>>;
    fn get_lol_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectTeamBoost, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampion>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampion, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkin>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_champion_skin_id(&self, summoner_id: i64, champion_id: i32, champion_skin_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionSkin, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_skin_id_chromas(&self, summoner_id: i64, champion_id: i32, skin_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionChroma>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_playable_count(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionPlayableCounts, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_skins_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkinMinimal>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_owned_champions_minimal(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_blocked_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatBlockedPlayerResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_blocked_players_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolChatBlockedPlayerResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolChatChatServiceDynamicClientConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_conversations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatConversationResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_conversations_active(&self, ) -> Box<dyn Future<Item = crate::models::LolChatActiveConversationResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_conversations_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolChatConversationResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_conversations_by_id_messages(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolChatConversationMessageResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_conversations_by_id_participants(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolChatUserResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_conversations_by_id_participants_by_pid(&self, id: &str, pid: &str) -> Box<dyn Future<Item = crate::models::LolChatUserResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_conversations_notify(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatErrorResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friend_counts(&self, ) -> Box<dyn Future<Item = crate::models::LolChatFriendCountsResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friend_exists_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friend_groups(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatGroupResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friend_groups_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolChatGroupResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friend_groups_by_id_friends(&self, id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChatFriendResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friend_requests(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatFriendRequestResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friends(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatFriendResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_friends_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolChatFriendResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_me(&self, ) -> Box<dyn Future<Item = crate::models::LolChatUserResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_resources(&self, ) -> Box<dyn Future<Item = crate::models::LolChatProductMetadataMap, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChatSessionResource, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_settings(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_chat_v1_settings_by_key(&self, key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_all_tournaments(&self, ) -> Box<dyn Future<Item = Vec<crate::models::TournamentDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_bracket_by_bracket_id(&self, bracket_id: i64) -> Box<dyn Future<Item = crate::models::LolClashBracket, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_checkin_allowed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_current_tournament_ids(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_disabled_config(&self, ) -> Box<dyn Future<Item = crate::models::LolClashClashDisabledConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_eog_player_update(&self, ) -> Box<dyn Future<Item = crate::models::LolClashEogPlayerUpdateDto, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_event_by_uuid(&self, uuid: &str) -> Box<dyn Future<Item = crate::models::ClashEventData, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_game_end(&self, ) -> Box<dyn Future<Item = crate::models::LolClashTournamentGameEnd, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_historyandwinners(&self, ) -> Box<dyn Future<Item = crate::models::LolClashTournamentHistoryAndWinners, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_iconconfig(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_invited_roster_ids(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_notifications(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlayerNotificationData, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_ping(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_player(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlayerData, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_player_chat_rosters(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashPlayerChatRoster>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_player_history(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashRosterStats>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_playmode_restricted(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlayerRewards, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_roster_by_roster_id(&self, roster_id: &str) -> Box<dyn Future<Item = crate::models::LolClashRoster, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_roster_by_roster_id_stats(&self, roster_id: i64) -> Box<dyn Future<Item = crate::models::LolClashRosterStats, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_scouting_champions(&self, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolClashScoutingChampions>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_scouting_matchhistory(&self, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_simple_state_flags(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashSimpleStateFlag>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_thirdparty_team_data(&self, ) -> Box<dyn Future<Item = crate::models::LolClashThirdPartyApiRoster, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_time(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashTournament, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_get_player_tiers(&self, tournament_id: i64, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_player(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashPlayerTournamentData, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_player_honor_restricted(&self, tournament_id: i64) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_state_info(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashTournamentStateInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_winners(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashTournamentWinnerHistory, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_cancelled(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_get_all_player_tiers(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_state_info(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashTournamentStateInfo>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_summary(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashTournamentSummary>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_visible(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_voice_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v2_playmode_restricted(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlaymodeRestrictedInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_public_v1_clubs_public(&self, summoner_names: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsPublicClubsPublicData>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_public_v1_clubs_public_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPublicClubsPublicData, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_public_v1_clubs_public_by_summoner_id_tag(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPublicClubTag, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsPlayerClub>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_invitations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_members(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_nominations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubInvite>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_membership(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_membership_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_backdrop(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerBackdrop, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsChampionMastery>, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery_top(&self, summoner_id: i64, limit: i64, sort_rule: Option<&str>) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsTopChampionMasteries, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_spells(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerSpells, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsWardSkin>, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins_by_ward_skin_id(&self, summoner_id: i64, ward_skin_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsWardSkin, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_chest_eligibility(&self, ) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsChestEligibility, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons_by_summoner_icon_id(&self, summoner_id: i64, summoner_icon_id: i32) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcon, Error = Error<serde_json::Value>>>;
    fn get_lol_content_targeting_v1_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_content_targeting_v1_locale(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingLocaleResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_content_targeting_v1_protected_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_cosmetics_v1_inventories_by_set_name_companions(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsCompanionsGroupedViewModel, Error = Error<serde_json::Value>>>;
    fn get_lol_cosmetics_v1_inventories_by_set_name_damage_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftDamageSkinGroupedViewModel, Error = Error<serde_json::Value>>>;
    fn get_lol_cosmetics_v1_inventories_by_set_name_map_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftMapSkinGroupedViewModel, Error = Error<serde_json::Value>>>;
    fn get_lol_email_verification_v1_email(&self, ) -> Box<dyn Future<Item = crate::models::LolEmailVerificationEmailVerificationSession, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_champion_mastery_updates(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameChampionMasteryUpdate, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGameStats, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_gameclient_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameGameClientEndOfGameStats, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_reported_players(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_end_of_game_v1_tft_eog_stats(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameTftEndOfGameViewModel, Error = Error<serde_json::Value>>>;
    fn get_lol_esport_stream_notifications_v1_live_streams(&self, ) -> Box<dyn Future<Item = crate::models::LolEsportStreamNotificationsESportsLiveStreams, Error = Error<serde_json::Value>>>;
    fn get_lol_esport_stream_notifications_v1_stream_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_game_client_chat_v1_buddies(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_client_chat_v1_ignored_summoners(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_client_chat_v1_muted_summoners(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_custom(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_custom_non_default(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id(&self, game_type_config_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id_map_by_map_id(&self, game_type_config_id: i32, map_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_queues(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolGameQueuesQueue>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_queues_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_queues_type_by_queue_type(&self, queue_type: &str) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>>;
    fn get_lol_game_settings_v1_didreset(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_game_settings_v1_game_settings(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_settings_v1_game_settings_schema(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_settings_v1_input_settings(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_settings_v1_input_settings_schema(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_settings_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_active_patcher_lock(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowAvailability, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_basic_tutorial(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_battle_training(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_early_exit_notifications_eog(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_early_exit_notifications_missions(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_extra_game_client_args(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_gameflow_metadata_player_status(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowPlayerStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_gameflow_metadata_registration_status(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowRegistrationStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_gameflow_phase(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowPhase, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowSession, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_spectate(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_spectate_delayed_launch(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_gameflow_v1_watch(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowWatchPhase, Error = Error<serde_json::Value>>>;
    fn get_lol_gamhs_v1_products_by_product_id_by_puuid_matches(&self, product_id: &str, puuid: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_gamhs_v1_products_by_product_id_current_summoner_matches(&self, product_id: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_details(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>>;
    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_summary(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>>;
    fn get_lol_geoinfo_v1_getlocation(&self, ip_address: &str) -> Box<dyn Future<Item = crate::models::LolGeoinfoGeoInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_geoinfo_v1_whereami(&self, ) -> Box<dyn Future<Item = crate::models::LolGeoinfoGeoInfoResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlightsConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights_folder_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights_folder_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_ballot(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2Ballot, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2HonorConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_late_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_latest_eligible_game(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_level_change(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedHonorChange, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_mutual_honor(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2MutualHonor, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_profile(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2ProfileInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_reward_granted(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedReward, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_team_choices(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_vote_completion(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VoteCompletion, Error = Error<serde_json::Value>>>;
    fn get_lol_hovercard_v1_friend_info_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolHovercardHovercardUserInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_hovercard_v1_friend_info_by_summoner_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolHovercardHovercardUserInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_champ_select_inventory(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_inventory(&self, inventory_types: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_inventory_emotes(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_notifications_by_inventory_type(&self, inventory_type: &str) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_players_by_puuid_inventory(&self, puuid: &str, inventory_types: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_signed_inventory(&self, inventory_types: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_signed_inventory_cache(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolInventoryInventoryCacheEntry>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_signed_inventory_simple(&self, inventory_types: Vec<String>, timeout_in_seconds: Option<i32>, query_params: Option<serde_json::Value>) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_signed_inventory_tournamentlogos(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_signed_wallet(&self, currency_types: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_signed_wallet_by_currency_type(&self, currency_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_wallet(&self, currency_types: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v1_wallet_by_currency_type(&self, currency_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_inventory_v2_inventory_by_inventory_type(&self, inventory_type: &str) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>>;
    fn get_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolItemSetsItemSets, Error = Error<serde_json::Value>>>;
    fn get_lol_kickout_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolKickoutKickoutMessage, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_playtime_reminder_v1_message(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_playtime_reminder_v1_playtime(&self, ) -> Box<dyn Future<Item = crate::models::LolKrPlaytimeReminderPlaytimeReminder, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_shutdown_law_v1_custom_status(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawQueueShutdownStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_shutdown_law_v1_disabled_queues(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_shutdown_law_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawShutdownLawNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_shutdown_law_v1_queue_status_by_queue_id(&self, queue_id: i32) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawQueueShutdownStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_shutdown_law_v1_rating_screen(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawRatingScreenInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_kr_shutdown_law_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawAllQueueShutdownStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_league_session_v1_league_session_token(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_leaver_buster_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLeaverBusterLeaverBusterNotificationResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_leaver_buster_v1_notifications_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLeaverBusterLeaverBusterNotificationResource, Error = Error<serde_json::Value>>>;
    fn get_lol_license_agreement_v1_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>>;
    fn get_lol_license_agreement_v1_all_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>>;
    fn get_lol_license_agreement_v1_serve_location(&self, ) -> Box<dyn Future<Item = crate::models::LolLicenseAgreementLicenseServeLocation, Error = Error<serde_json::Value>>>;
    fn get_lol_loadouts_v1_loadouts_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_loadouts_v4_loadouts_by_loadout_id(&self, loadout_id: &str) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>>;
    fn get_lol_loadouts_v4_loadouts_scope_account(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLoadoutsScopedLoadout>, Error = Error<serde_json::Value>>>;
    fn get_lol_loadouts_v4_loadouts_scope_by_scope_by_scope_item_id(&self, scope: &str, scope_item_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolLoadoutsScopedLoadout>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_has_auto_assigned_smite(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectPickableSkins, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampionSelectPreferences, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_sending_loadouts_gcos_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectSession, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyTeamBuilderChampSelectTradeContract>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderTeamBoost, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobbyCountdownTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_v1_matchmaking(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_custom_games(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyCustomGame>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_custom_games_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomGame, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyQueueAvailability, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitation>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_invitations_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_parties_gamemode(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyGameModeDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_parties_player(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPlayerDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_party_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyPartyRewards, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_comms_members(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPremadePartyDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_comms_token(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_eligibility_game_select_eligibility_hash(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_eligibility_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_custom_available_bots(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyBotChampion>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_custom_bots_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_matchmaking_search_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyMatchmakingSearchResource, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_members(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyParticipantDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_party_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_party_eog_status(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPartyStatusDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_received_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyReceivedInvitationDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_registration_status(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_account_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginAccountStateResource, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_login_connection_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginConnectionState, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_login_data_packet(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_login_in_game_creds(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_login_platform_credentials(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginPlatformGeneratedCredentials, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_login_queue_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginQueue, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginSession, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v1_wallet(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginSessionWallet, Error = Error<serde_json::Value>>>;
    fn get_lol_login_v2_league_session_init_token(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLeagueSessionTokenEnvelope, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_currency_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_loot_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootGrantNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_loot_items(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootItem>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_new_player_check_done(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_display_categories(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLoot, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_map(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_player_loot_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLootNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_recipes_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>>;
    fn get_lol_loot_v2_player_loot_map(&self, ) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootMap, Error = Error<serde_json::Value>>>;
    fn get_lol_loyalty_v1_status_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolLoyaltyLoyaltyStatusNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v1_map_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v1_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v2_map_by_id_by_game_mode(&self, id: i64, game_mode: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v2_map_by_id_by_game_mode_by_game_mutator(&self, id: i64, game_mode: &str, game_mutator: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v2_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_delta(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryPlayerDelta, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_friend_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_game_timelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryTimelineFrames, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryGame, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_matchlist(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_recently_played_summoners(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMatchHistoryRecentlyPlayedSummoner>, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v1_web_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_match_history_v2_matchlist(&self, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_matchmaking_v1_ready_check(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchmakingMatchmakingReadyCheckResource, Error = Error<serde_json::Value>>>;
    fn get_lol_matchmaking_v1_search(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchmakingMatchmakingSearchResource, Error = Error<serde_json::Value>>>;
    fn get_lol_matchmaking_v1_search_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMatchmakingMatchmakingSearchErrorResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_matchmaking_v1_search_errors_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolMatchmakingMatchmakingSearchErrorResource, Error = Error<serde_json::Value>>>;
    fn get_lol_missions_v1_data(&self, ) -> Box<dyn Future<Item = crate::models::PlayerMissionEligibilityData, Error = Error<serde_json::Value>>>;
    fn get_lol_missions_v1_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMissionsRewardGrant>, Error = Error<serde_json::Value>>>;
    fn get_lol_missions_v1_missions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerMissionDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_missions_v1_series(&self, ) -> Box<dyn Future<Item = Vec<crate::models::SeriesDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_challenges_progress(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsChallengesProgress, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_level_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_level_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_login_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_rewards_v1_login_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_tutorial_path_v1_rewards_champ(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeTutorialPathCollectionsChampion, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_tutorial_path_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeTutorialPathAccountSettingsTutorial, Error = Error<serde_json::Value>>>;
    fn get_lol_npe_tutorial_path_v1_tutorials(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolNpeTutorialPathTutorial>, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_checking_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_environment(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchChunkingPatcherEnvironment, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_game_version(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPatchNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_products_league_of_legends_install_location(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchInstallPaths, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_products_league_of_legends_state(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchProductState, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_products_league_of_legends_supported_game_releases(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchSupportedGameReleases, Error = Error<serde_json::Value>>>;
    fn get_lol_patch_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_currentpage(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_customizationlimits(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksCustomizationLimits, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_inventory(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPlayerInventory, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkPageResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_perks(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiPerk>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_perks_disabled(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_perks_gameplay_updated(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_schema_version(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_servicesettings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksServiceSettings, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksUiSettings, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_styles(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiStyle>, Error = Error<serde_json::Value>>>;
    fn get_lol_personalized_offers_v1_offers(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPersonalizedOffersUiOffer>, Error = Error<serde_json::Value>>>;
    fn get_lol_personalized_offers_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolPersonalizedOffersUiStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_personalized_offers_v1_themed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_pft_v2_survey(&self, ) -> Box<dyn Future<Item = crate::models::LolPftPftSurvey, Error = Error<serde_json::Value>>>;
    fn get_lol_platform_config_v1_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_platform_config_v1_namespaces(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_platform_config_v1_namespaces_by_ns(&self, ns: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_platform_config_v1_namespaces_by_ns_by_key(&self, ns: &str, key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_ban(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorBanNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_chat_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorPlayerBehaviorConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_ranked_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCard, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_reporter_feedback(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPlayerBehaviorReporterFeedback>, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v2_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCardV2, Error = Error<serde_json::Value>>>;
    fn get_lol_player_level_up_v1_level_up(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEvent, Error = Error<serde_json::Value>>>;
    fn get_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEventAck, Error = Error<serde_json::Value>>>;
    fn get_lol_player_messaging_v1_celebration_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerMessagingDynamicCelebrationMessagingNotificationResource, Error = Error<serde_json::Value>>>;
    fn get_lol_player_messaging_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerMessagingPlayerMessagingNotificationResource, Error = Error<serde_json::Value>>>;
    fn get_lol_player_preferences_v1_player_preferences_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_player_preferences_v1_preference_by_type(&self, _type: &str, hash: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_pre_end_of_game_v1_current_sequence_event(&self, ) -> Box<dyn Future<Item = crate::models::LolPreEndOfGameSequenceEvent, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceVoiceAvailability, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_capturedevices(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoiceDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_first_experience(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceFirstExperience, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceAudioPropertiesResource, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_participant_records(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_participants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceSettingsResource, Error = Error<serde_json::Value>>>;
    fn get_lol_purchase_widget_v1_configuration(&self, ) -> Box<dyn Future<Item = crate::models::LolPurchaseWidgetPurchaseWidgetConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_purchase_widget_v1_order_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPurchaseWidgetOrderNotificationResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_purchase_widget_v1_purchasable_item(&self, inventory_type: &str, item_id: i64) -> Box<dyn Future<Item = crate::models::LolPurchaseWidgetPurchasableItem, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_apex_leagues_by_queue_type_by_tier(&self, queue_type: &str, tier: &str) -> Box<dyn Future<Item = crate::models::LolRankedLeagueLadderInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_current_lp_change_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedLcuLeagueNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_current_ranked_stats(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_eos_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolRankedEosNotificationResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_eos_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedEosRewardsConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_league_ladders_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = Vec<crate::models::LolRankedLeagueLadderInfo>, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolRankedLcuLeagueNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_ranked_stats(&self, puuids: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolRankedRankedStats>, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_ranked_stats_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_signed_ranked_stats(&self, ) -> Box<dyn Future<Item = crate::models::SignedRankedStatsDto, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v1_splits_config(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedRewardsInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_ranked_v2_tiers(&self, summoner_ids: Vec<i64>, queue_types: Vec<crate::models::LolRankedLeagueQueueType>) -> Box<dyn Future<Item = Vec<crate::models::LolRankedParticipantTiers>, Error = Error<serde_json::Value>>>;
    fn get_lol_recommendations_v1_recommendations(&self, number_of_recommendations: Option<i32>) -> Box<dyn Future<Item = crate::models::LolRecommendationsRecommendationsCollection, Error = Error<serde_json::Value>>>;
    fn get_lol_regalia_v2_config(&self, ) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaFrontendConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_regalia_v2_current_summoner_regalia(&self, ) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaWithPreferences, Error = Error<serde_json::Value>>>;
    fn get_lol_regalia_v2_summoners_by_summoner_id_queues_by_queue_positions_by_position_regalia(&self, summoner_id: i64, queue: &str, position: &str) -> Box<dyn Future<Item = crate::models::LolRegaliaRegalia, Error = Error<serde_json::Value>>>;
    fn get_lol_regalia_v2_summoners_by_summoner_id_queues_by_queue_regalia(&self, summoner_id: i64, queue: &str) -> Box<dyn Future<Item = crate::models::LolRegaliaRegalia, Error = Error<serde_json::Value>>>;
    fn get_lol_regalia_v2_summoners_by_summoner_id_regalia(&self, summoner_id: i64, hovercard: bool) -> Box<dyn Future<Item = crate::models::LolRegaliaRegalia, Error = Error<serde_json::Value>>>;
    fn get_lol_regalia_v2_summoners_by_summoner_id_regalia_async(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaAsync, Error = Error<serde_json::Value>>>;
    fn get_lol_replays_v1_configuration(&self, ) -> Box<dyn Future<Item = crate::models::LolReplaysReplaysConfiguration, Error = Error<serde_json::Value>>>;
    fn get_lol_replays_v1_metadata_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolReplaysReplayMetadata, Error = Error<serde_json::Value>>>;
    fn get_lol_replays_v1_rofls_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_replays_v1_rofls_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_rms_v1_champion_mastery_leaveup_update(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolRiotMessagingServiceChampionMasteryLevelUp>, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthHint, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_access_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAccessToken, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_error(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthError, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_id_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthIdToken, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_status_by_platform_id(&self, platform_id: &str) -> Box<dyn Future<Item = crate::models::LolRsoAuthRegionStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_service_status_v1_lcu_status(&self, ) -> Box<dyn Future<Item = crate::models::LolServiceStatusServiceStatusResource, Error = Error<serde_json::Value>>>;
    fn get_lol_service_status_v1_ticker_messages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolServiceStatusTickerMessage>, Error = Error<serde_json::Value>>>;
    fn get_lol_settings_v1_account_by_category(&self, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_settings_v1_account_didreset(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_settings_v1_local_by_category(&self, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_settings_v2_account_by_pp_type_by_category(&self, pp_type: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_settings_v2_didreset_by_pp_type(&self, pp_type: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_settings_v2_local_by_category(&self, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_settings_v2_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_shutdown_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolShutdownShutdownNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_simple_dialog_messages_v1_messages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSimpleDialogMessagesMessage>, Error = Error<serde_json::Value>>>;
    fn get_lol_spectator_v1_spectate(&self, ) -> Box<dyn Future<Item = crate::models::LolSpectatorSpectateGameInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v1_eog_notifications(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v1_featured_champion_statstones_by_champion_item_id(&self, champion_item_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesStatstone>, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v1_profile_summary_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesProfileStatstoneSummary>, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v1_statstone_by_content_id_owned(&self, content_id: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v1_statstones_enabled_queue_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v1_vignette_notifications(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v2_player_statstones_self_by_champion_item_id(&self, champion_item_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesStatstoneSet>, Error = Error<serde_json::Value>>>;
    fn get_lol_statstones_v2_player_summary_self(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesChampionStatstoneSummary>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_by_page_type(&self, page_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_catalog(&self, inventory_type: Option<Vec<String>>, item_id: Option<Vec<i32>>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCatalogItem>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_catalog_by_instance_ids(&self, instance_ids: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCatalogItem>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_catalog_by_inventory_type(&self, inventory_type: &str, item_ids: Vec<i32>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCatalogItem>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_catalog_sales(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStoreItemSale>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_get_store_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_giftablefriends(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStoreGiftingFriend>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_item_keys_from_instance_ids(&self, instance_ids: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolStoreItemKey>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_last_page(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_offers(&self, inventory_type_uui_ds: Option<Vec<String>>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCapOffer>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_order_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStoreOrderNotificationResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_order_notifications_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolStoreOrderNotificationResource, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_payment_details(&self, action: &str, gift_recipient_account_id: Option<i64>, gift_message: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_skins_by_skin_id(&self, skin_id: i32) -> Box<dyn Future<Item = crate::models::LolStoreCatalogItem, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolStoreStoreStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_store_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_store_v1_wallet(&self, ) -> Box<dyn Future<Item = crate::models::LolStoreWallet, Error = Error<serde_json::Value>>>;
    fn get_lol_suggested_players_v1_suggested_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSuggestedPlayersSuggestedPlayersSuggestedPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_check_name_availability_by_name(&self, name: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_check_name_availability_new_summoners_by_name(&self, name: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_current_summoner(&self, ) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_current_summoner_autofill(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerAutoFillQueueDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_current_summoner_jwt(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_current_summoner_reroll_points(&self, ) -> Box<dyn Future<Item = crate::models::LolSummonerSummonerRerollPoints, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_current_summoner_summoner_profile(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolSummonerStatus, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_summoner_profile(&self, puuid: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_summoner_requests_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_summoners(&self, name: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_summoners_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v1_summoners_by_puuid_cached_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v2_summoner_icons(&self, ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummonerIdAndIcon>, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v2_summoner_names(&self, ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummonerIdAndName>, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v2_summoners(&self, ids: Option<Vec<i64>>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummoner>, Error = Error<serde_json::Value>>>;
    fn get_lol_summoner_v2_summoners_puuid_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>>;
    fn get_lol_tastes_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_tastes_v1_skins_model(&self, ) -> Box<dyn Future<Item = crate::models::LolTastesDataModelResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_tft_v2_tft_battlepass(&self, ) -> Box<dyn Future<Item = crate::models::LolMissionsTftPaidBattlepass, Error = Error<serde_json::Value>>>;
    fn get_lol_token_upsell_v1_all(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolWorldsTokenCardTokenUpsell>, Error = Error<serde_json::Value>>>;
    fn get_lol_trophies_v1_current_summoner_trophies_profile(&self, ) -> Box<dyn Future<Item = crate::models::LolTrophiesTrophyProfileData, Error = Error<serde_json::Value>>>;
    fn get_lol_trophies_v1_players_by_puuid_trophies_profile(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolTrophiesTrophyProfileData, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PatcherNotification>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_p2p_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherP2PStatus, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products_by_product_id_paths(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products_by_product_id_state(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products_by_product_id_tags(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherStatus, Error = Error<serde_json::Value>>>;
    fn get_player_notifications_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationConfigResource, Error = Error<serde_json::Value>>>;
    fn get_player_notifications_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerNotificationsPlayerNotificationResource>, Error = Error<serde_json::Value>>>;
    fn get_player_notifications_v1_notifications_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationResource, Error = Error<serde_json::Value>>>;
    fn get_plugin_manager_v1_external_plugins_availability(&self, ) -> Box<dyn Future<Item = crate::models::ExternalPluginsResource, Error = Error<serde_json::Value>>>;
    fn get_plugin_manager_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::PluginManagerResource, Error = Error<serde_json::Value>>>;
    fn get_plugin_manager_v2_descriptions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PluginDescriptionResource>, Error = Error<serde_json::Value>>>;
    fn get_plugin_manager_v2_descriptions_by_plugin(&self, plugin: &str) -> Box<dyn Future<Item = crate::models::PluginDescriptionResource, Error = Error<serde_json::Value>>>;
    fn get_plugin_manager_v2_plugins(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PluginResource>, Error = Error<serde_json::Value>>>;
    fn get_plugin_manager_v2_plugins_by_plugin(&self, plugin: &str) -> Box<dyn Future<Item = crate::models::PluginResource, Error = Error<serde_json::Value>>>;
    fn get_plugin_manager_v3_plugins_manifest(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::RecofrienderConfig, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v1_config_by_network(&self, network: &str) -> Box<dyn Future<Item = crate::models::RecofrienderNetworkConfig, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v1_contacts(&self, account_id: Option<i64>, source: Option<&str>, friend_state: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderContactResource>, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v1_debug(&self, ) -> Box<dyn Future<Item = crate::models::RecofrienderDebugConfig, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v1_faq_url(&self, ) -> Box<dyn Future<Item = crate::models::RecofrienderUrlResource, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v1_registrations(&self, cb: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderLinkResource>, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v1_registrations_by_network(&self, network: &str) -> Box<dyn Future<Item = crate::models::RecofrienderLinkResource, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v2_contacts(&self, ) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderContactResource>, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v2_contacts_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::RecofrienderContactResource, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v2_contacts_page(&self, start: i64, limit: i64) -> Box<dyn Future<Item = crate::models::RecofrienderContactPaginationResource, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v2_dismissed(&self, ) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderContactResource>, Error = Error<serde_json::Value>>>;
    fn get_recofriender_v2_dismissed_page(&self, start: i64, limit: i64) -> Box<dyn Future<Item = crate::models::RecofrienderContactPaginationResource, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a(&self, a: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b(&self, a: &str, b: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c(&self, a: &str, b: &str, c: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d(&self, a: &str, b: &str, c: &str, d: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e(&self, a: &str, b: &str, c: &str, d: &str, e: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e_by_f(&self, a: &str, b: &str, c: &str, d: &str, e: &str, f: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceSession, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_state(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceState, Error = Error<serde_json::Value>>>;
    fn get_sanitizer_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::SanitizerSanitizerStatus, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_audio_properties(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatAudioPropertiesResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_call_stats_aggregate(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCallStatsResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_call_stats_by_id(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatCallStatsResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_codec_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCodecSettingsResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatConfigResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatVoiceErrorCounterResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_push_to_talk(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatPushToTalkResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_devices_capture(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_devices_capture_permission(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCaptureDevicePermissionStatus, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_devices_render(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatSessionResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatParticipantResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatSettingsResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_state(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatStateResource, Error = Error<serde_json::Value>>>;
    fn head_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_legacy_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectLegacyChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_legacy_v1_session_my_selection(&self, selection: crate::models::LolChampSelectLegacyChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_champ_select_v1_session_my_selection(&self, selection: crate::models::LolChampSelectChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str, tag: crate::models::LolClubsClubTag) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str, motd: crate::models::LolClubsClubMotd) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_invitations(&self, invitation: crate::models::LolClubsClubInvite) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_membership_preferences(&self, preferences: crate::models::LolClubsClubPreferences) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>>;
    fn patch_lol_game_settings_v1_game_settings(&self, settings_resource: serde_json::Value) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_game_settings_v1_input_settings(&self, settings_resource: serde_json::Value) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_loadouts_v4_loadouts_by_id(&self, id: &str, loadout: crate::models::LolLoadoutsUpdateLoadoutDto) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>>;
    fn patch_lol_lobby_team_builder_champ_select_v1_session_actions_by_id(&self, id: i32, data: crate::models::LolLobbyTeamBuilderChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_lobby_team_builder_champ_select_v1_session_my_selection(&self, selection: crate::models::LolLobbyTeamBuilderChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_missions_v1_grants_by_grant_id_viewed(&self, grant_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn patch_lol_npe_tutorial_path_v1_tutorials_init(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn patch_lol_settings_v1_account_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_settings_v1_local_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_settings_v2_account_by_pp_type_by_category(&self, pp_type: &str, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_settings_v2_local_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_patcher_v1_p2p_status(&self, data: crate::models::PatcherP2PStatusUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_gcloud_voice_chat_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_gcloud_voice_chat_v1_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_gcloud_voice_chat_v2_sessions(&self, JWT: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_gcloud_voice_chat_v2_sessions_by_id(&self, id: &str, JWT: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_authenticate(&self, authenticate_request: crate::models::LolAccountVerificationAuthenticateRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationAuthenticateResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_invalidate(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationInvalidateResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_send_token(&self, send_token_request: crate::models::LolAccountVerificationSendTokenRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationSendTokenResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_account_verification_v1_verify(&self, verify_request: crate::models::LolAccountVerificationVerifyRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationVerifyResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_acs_v1_acs_endpoint_override(&self, data: crate::models::LolAcsAcsEndPoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_career_stats_v1_champion_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>>;
    fn post_lol_career_stats_v1_position_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsPositionStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_legacy_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_simple_inventory(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_toggle_favorite_by_champion_id_by_position(&self, champion_id: i64, position: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_champ_select_v1_toggle_player_muted(&self, player: crate::models::LolChampSelectMutedPlayerInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_blocked_players(&self, blocked: crate::models::LolChatBlockedPlayerResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_conversations(&self, conversation: crate::models::LolChatConversationResource) -> Box<dyn Future<Item = crate::models::LolChatConversationResource, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_conversations_by_id_closed(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_conversations_by_id_messages(&self, id: &str, body: crate::models::LolChatConversationMessageResource) -> Box<dyn Future<Item = crate::models::LolChatConversationMessageResource, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_conversations_by_id_participants(&self, id: &str, invitee: crate::models::LolChatUserResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_friend_groups(&self, group: crate::models::LolChatGroupResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_friend_requests(&self, request: crate::models::LolChatFriendRequestResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_session_plain(&self, auth: crate::models::LolChatAuthResourcePlain) -> Box<dyn Future<Item = crate::models::LolChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_lol_chat_v1_session_rso(&self, auth: crate::models::LolChatAuthResourceRsoAccessToken) -> Box<dyn Future<Item = crate::models::LolChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_eog_player_update_acknowledge(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_events(&self, uuids: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::ClashEventData>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_game_end_acknowledge(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_notifications_acknowledge(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_refresh(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_accept(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_cancel_withdraw(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_change_all_details(&self, roster_id: &str, roster_details: crate::models::LolClashRosterDetails) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_change_icon(&self, roster_id: &str, change_icon_request: crate::models::LolClashChangeIconRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_change_name(&self, roster_id: &str, change_name_request: crate::models::LolClashChangeNameRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_change_short_name(&self, roster_id: &str, change_name_request: crate::models::LolClashChangeNameRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_decline(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_disband(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_invite(&self, roster_id: &str, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolClashClientFailedInvite>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_kick(&self, roster_id: &str, kick_request: crate::models::LolClashKickRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_leave(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_lockin(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_set_position(&self, roster_id: &str, set_position_request: crate::models::LolClashSetPositionRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_set_ticket(&self, roster_id: &str, set_ticket_request: crate::models::LolClashSetTicketRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_accept(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_by_summoner_id_revoke(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_decline(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_invite(&self, roster_id: &str, invite_sub_request: crate::models::LolClashInviteSubRequest) -> Box<dyn Future<Item = Vec<crate::models::LolClashClientFailedInvite>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_reclaim(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_accept(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_decline(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_offer(&self, roster_id: &str, summoner_id: i64, offer_ticket_request: crate::models::LolClashOfferTicketRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_revoke(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_transfer_captain(&self, roster_id: &str, new_captain_summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_unlockin(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_unwithdraw(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_update_logos(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_roster_by_roster_id_withdraw(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_simple_state_flags_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_tournament_by_tournament_id_create_roster(&self, tournament_id: i64, roster_details: crate::models::LolClashRosterDetails) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_update_logos(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_voice(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clash_v1_voice_delay_by_delay_seconds(&self, delay_seconds: f64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_view(&self, club_key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_membership(&self, name: crate::models::LolClubsClubName) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn post_lol_email_verification_v1_confirm_email(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_end_of_game_v1_gameclient_eog_stats_block(&self, stats: crate::models::LolEndOfGameGameClientEndOfGameStats) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_end_of_game_v1_state_dismiss_stats(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_end_of_game_v2_player_complaints(&self, complaint: crate::models::LolEndOfGameEndOfGamePlayerComplaintV2) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGamePlayerComplaintV2, Error = Error<serde_json::Value>>>;
    fn post_lol_esport_stream_notifications_v1_send_stats(&self, event_type: &str, match_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_game_client_chat_v1_instant_messages(&self, summoner_name: &str, message: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_game_client_chat_v1_party_messages(&self, message: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_game_settings_v1_reload_post_game(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_game_settings_v1_save(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_ack_failed_to_launch(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_basic_tutorial_start(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_battle_training_start(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_battle_training_stop(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_client_received_message(&self, messsage: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_early_exit(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_extra_game_client_args(&self, extra_game_client_args: Vec<String>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_gameflow_metadata_player_status(&self, player_status: crate::models::LolGameflowPlayerStatus) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_gameflow_metadata_registration_status(&self, registration_status: crate::models::LolGameflowRegistrationStatus) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_pre_end_game_transition(&self, enabled: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_reconnect(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_session_dodge(&self, dodge_data: crate::models::LolGameflowGameflowGameDodge) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_session_event(&self, session: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_session_game_configuration(&self, queue: crate::models::LolGameflowQueue) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_session_request_enter_gameflow(&self, event_type: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_session_request_lobby(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_session_request_tournament_checkin(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_session_tournament_ended(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_spectate_launch(&self, target_summoner_name: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_spectate_quit(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_tick(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v1_watch_launch(&self, args: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_gameflow_v2_spectate_launch(&self, args: crate::models::LolGameflowSpectateGameInfoResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_highlights_v1_file_browser_by_highlight_id(&self, highlight_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_honor_player(&self, honor_player_request: crate::models::LolHonorV2ApiHonorPlayerServerRequest) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_late_recognition_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_level_change_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_mutual_honor_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_reward_granted_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_inventory_v1_notification_acknowledge(&self, id: i64) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_set: crate::models::LolItemSetsItemSet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_item_sets_v1_item_sets_by_summoner_id_validate(&self, summoner_id: i64, input: crate::models::LolItemSetsValidateItemSetNameInput) -> Box<dyn Future<Item = crate::models::LolItemSetsValidateItemSetNameResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_kr_shutdown_law_v1_rating_screen_acknowledge(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_license_agreement_v1_agreements_by_id_accept(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_license_agreement_v1_agreements_by_id_decline(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_loadouts_v4_loadouts(&self, loadout: crate::models::LolLoadoutsCreateLoadoutDto) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_actions_by_id_complete(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_accept(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_cancel(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_decline(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_request(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_simple_inventory(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_invitations_accept(&self, invitation: crate::models::LolLobbyTeamBuilderLobbyInvitation) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_lobby(&self, lobby: crate::models::LolLobbyTeamBuilderLobby) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_kick(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_promote(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_matchmaking_low_priority_queue_abandon(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_matchmaking_search(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_ready_check_accept(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_ready_check_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v2_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferencesV2) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_clash(&self, token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_custom_games_by_id_join(&self, id: i64, parameters: crate::models::LolLobbyLobbyCustomJoinParameters) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_custom_games_refresh(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_bots(&self, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_cancel_champ_select(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_start_champ_select(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomChampSelectStartResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_switch_teams(&self, team: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_invitations(&self, invitation: crate::models::LolLobbyLobbyInvitation) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_tournaments_by_id_join(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_eligibility_party(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_eligibility_self(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_eog_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_grant_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_kick(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_promote(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_revoke_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_matchmaking_quick_search(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_notifications(&self, notification: crate::models::LolLobbyLobbyNotification) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_parties_overrides_enabled(&self, enabled: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_parties_overrides_enabled_for_team_builder_queues(&self, enabled_for_teambuilder_queues: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_party_by_party_id_join(&self, party_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_play_again(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_play_again_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_received_invitations_by_invitation_id_accept(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_received_invitations_by_invitation_id_decline(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_account_state(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_change_summoner_name(&self, name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_delete_rso_on_close(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_league_session_status(&self, league_session: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_new_player_flow_completed(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_service_proxy_async_requests_by_service_name_by_method_name(&self, service_name: &str, method_name: &str, plugin_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_service_proxy_uuid_requests(&self, service_name: &str, method_name: &str, plugin_id: i32, timeout_millis: i64, payload: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_session(&self, username_and_password: crate::models::LolLoginUsernameAndPassword) -> Box<dyn Future<Item = crate::models::LolLoginLoginSession, Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_session_invoke(&self, destination: &str, method: &str, UNKNOWN_BASE_TYPE: crate::models::UNKNOWN_BASE_TYPE) -> Box<dyn Future<Item = crate::models::LolLoginLcdsResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_login_v1_summoner_created(&self, summoner_id: crate::models::LolLoginSummonerCreatedResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_new_player_check_done_by_new_value(&self, new_value: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_player_loot_by_loot_name_redeem(&self, loot_name: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_player_loot_notifications_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_recipes_by_recipe_name_craft(&self, recipe_name: &str, player_loot_list: Vec<String>, repeat: Option<i32>) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>>;
    fn post_lol_loot_v1_refresh(&self, force: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_maps_v1_map(&self, map: crate::models::LolMapsMaps) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_matchmaking_v1_ready_check_accept(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_matchmaking_v1_ready_check_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_matchmaking_v1_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_missions_v1_force(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_npe_rewards_v1_challenges_opt(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_patch_v1_products_league_of_legends_detect_corruption_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_patch_v1_products_league_of_legends_partial_repair_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_patch_v1_products_league_of_legends_start_checking_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_patch_v1_products_league_of_legends_start_patching_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_patch_v1_products_league_of_legends_stop_checking_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_patch_v1_products_league_of_legends_stop_patching_request(&self, restart: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_perks_v1_pages(&self, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>>;
    fn post_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_perks_v1_update_page_order(&self, request: crate::models::LolPerksUpdatePageOrderRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_personalized_offers_v1_offers_by_id_purchase(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPersonalizedOffersPurchaseResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_personalized_offers_v1_offers_by_id_reveal(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolPersonalizedOffersUiOffer>, Error = Error<serde_json::Value>>>;
    fn post_lol_personalized_offers_v1_offers_purchase(&self, offer_requests: crate::models::LolPersonalizedOffersOfferRequests) -> Box<dyn Future<Item = crate::models::LolPersonalizedOffersPurchaseResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_personalized_offers_v1_offers_reveal(&self, offer_ids: crate::models::LolPersonalizedOffersOfferIds) -> Box<dyn Future<Item = Vec<crate::models::LolPersonalizedOffersUiOffer>, Error = Error<serde_json::Value>>>;
    fn post_lol_pft_v2_events(&self, pft_event: crate::models::LolPftPftEvent) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_pft_v2_survey(&self, survey: crate::models::LolPftPftSurvey) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str, level_up_event_ack: crate::models::LolPlayerLevelUpPlayerLevelUpEventAck) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_player_preferences_v1_hash(&self, preferences: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_player_preferences_v1_player_preferences_endpoint_override(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferencesEndpoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_pre_end_of_game_v1_complete_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_pre_end_of_game_v1_registration_by_sequence_event_name_by_priority(&self, sequence_event_name: &str, priority: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_first_experience_game(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_first_experience_lcu(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_first_experience_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_game_client_updated_ptt_key(&self, new_key: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_settings_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_purchase_widget_v1_purchasable_items_by_inventory_type(&self, inventory_type: &str, item_ids: Vec<i64>) -> Box<dyn Future<Item = crate::models::LolPurchaseWidgetItemChoices, Error = Error<serde_json::Value>>>;
    fn post_lol_purchase_widget_v1_purchase_items(&self, purchase_request: crate::models::LolPurchaseWidgetPurchaseRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_purchase_widget_v1_validate_items(&self, validation_request: crate::models::LolPurchaseWidgetValidationRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_purchase_widget_v2_purchase_items(&self, purchase_request: crate::models::LolPurchaseWidgetPurchaseRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_ranked_v1_eos_notifications_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_ranked_v1_notifications_by_id_acknowledge(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_metadata_by_game_id_create_game_version_by_game_version_game_type_by_game_type_queue_id_by_queue_id(&self, game_id: i64, game_version: &str, game_type: &str, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_by_game_id_download(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_by_game_id_download_graceful(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_by_game_id_watch(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v1_rofls_scan(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_replays_v2_metadata_by_game_id_create(&self, game_id: i64, request: crate::models::LolReplaysReplayCreateMetadata) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_authorization_gas(&self, creds: crate::models::LolRsoAuthRsoPlayerCredentials) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_authorization_refresh(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_device_id(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthDeviceId, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v2_config(&self, config: crate::models::LolRsoAuthPublicClientConfig) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_settings_v1_account_save(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_simple_dialog_messages_v1_messages(&self, message_request: crate::models::LolSimpleDialogMessagesLocalMessageRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_spectator_v1_buddy_spectate(&self, summoner_or_team_names: Vec<String>) -> Box<dyn Future<Item = crate::models::LolSpectatorSummonerOrTeamAvailabilty, Error = Error<serde_json::Value>>>;
    fn post_lol_spectator_v1_spectate_launch(&self, spectate_game_info: crate::models::LolSpectatorSpectateGameInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_statstones_v1_featured_champion_statstones_by_champion_item_id_by_statstone_id(&self, champion_item_id: i32, statstone_id: &str, featured_info: crate::models::LolStatstonesStatstoneFeaturedRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_store_v1_last_page(&self, page_type: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_store_v1_notifications_acknowledge(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_store_v1_skins_by_skin_id_purchase(&self, skin_id: i32, cost: crate::models::LolStoreItemCost) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_suggested_players_v1_reported_player(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersReportedPlayer) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_suggested_players_v1_victorious_comrade(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersVictoriousComrade) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_summoner_v1_current_summoner_name(&self, name: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>>;
    fn post_lol_summoner_v1_current_summoner_summoner_profile(&self, body: crate::models::LolSummonerSummonerProfileUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_summoner_v1_summoners(&self, name: crate::models::LolSummonerSummonerRequestedName) -> Box<dyn Future<Item = crate::models::LolSummonerInternalSummoner, Error = Error<serde_json::Value>>>;
    fn post_lol_summoner_v2_summoners_names(&self, summoner_names: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummoner>, Error = Error<serde_json::Value>>>;
    fn post_lol_summoner_v2_summoners_puuid(&self, puuids: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummoner>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_notifications(&self, notification_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_detect_corruption_request(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_partial_repair_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_signal_start_patching_delayed(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_start_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_start_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_stop_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_stop_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_league_of_legends_full_repair_request(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_payments_v1_pmc_start_url(&self, options: crate::models::PaymentsFrontEndRequest) -> Box<dyn Future<Item = crate::models::PaymentsFrontEndResult, Error = Error<serde_json::Value>>>;
    fn post_player_notifications_v1_notifications(&self, notification: crate::models::PlayerNotificationsPlayerNotificationResource) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationResource, Error = Error<serde_json::Value>>>;
    fn post_recofriender_v1_contacts_by_account_id_available(&self, account_id: i64, retain_in_cache: Option<bool>) -> Box<dyn Future<Item = crate::models::RecofrienderContactStateResource, Error = Error<serde_json::Value>>>;
    fn post_recofriender_v1_contacts_by_account_id_dismissed(&self, account_id: i64, retain_in_cache: Option<bool>) -> Box<dyn Future<Item = crate::models::RecofrienderContactStateResource, Error = Error<serde_json::Value>>>;
    fn post_recofriender_v1_contacts_by_account_id_invited(&self, account_id: i64, retain_in_cache: Option<bool>) -> Box<dyn Future<Item = crate::models::RecofrienderContactStateResource, Error = Error<serde_json::Value>>>;
    fn post_recofriender_v1_registrations_by_network(&self, network: &str) -> Box<dyn Future<Item = crate::models::RecofrienderUrlResource, Error = Error<serde_json::Value>>>;
    fn post_riot_messaging_service_v1_connect(&self, id_token: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riot_messaging_service_v1_entitlements(&self, token: crate::models::RiotMessagingServiceEntitlementsToken) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_sanitizer_v1_contains_sanitized(&self, request: crate::models::SanitizerContainsSanitizedRequest) -> Box<dyn Future<Item = crate::models::SanitizerContainsSanitizedResponse, Error = Error<serde_json::Value>>>;
    fn post_sanitizer_v1_sanitize(&self, request: crate::models::SanitizerSanitizeRequest) -> Box<dyn Future<Item = crate::models::SanitizerSanitizeResponse, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v1_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v2_sessions(&self, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v2_sessions_by_id(&self, id: &str, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn put_client_config_v1_entitlements_token(&self, update: crate::models::ClientConfigEntitlementsUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_client_config_v1_refresh_config_status(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_client_config_v2_namespace_changes(&self, namespaces: crate::models::ClientConfigConfigNamespaceUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_gcloud_voice_chat_v1_codec_settings(&self, settings: crate::models::GcloudVoiceChatUpdateCodecSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_gcloud_voice_chat_v1_push_to_talk(&self, push_to_talk: crate::models::GcloudVoiceChatPushToTalkResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_gcloud_voice_chat_v2_devices_capture_prompt_for_permission(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_gcloud_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str, participant: crate::models::GcloudVoiceChatUpdateParticipantResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_gcloud_voice_chat_v2_settings(&self, settings: crate::models::GcloudVoiceChatUpdateSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_banners_v1_current_summoner_flags_equipped(&self, flag: crate::models::LolBannersBannerFlag) -> Box<dyn Future<Item = crate::models::LolBannersBannerFlag, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_conversations_active(&self, active_conversation: crate::models::LolChatActiveConversationResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_conversations_by_id(&self, id: &str, updated_conversation: crate::models::LolChatConversationResource) -> Box<dyn Future<Item = crate::models::LolChatConversationResource, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_conversations_by_id_closed(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_friend_groups_by_id(&self, id: i32, group: crate::models::LolChatGroupResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_friend_groups_order(&self, order: crate::models::LolChatFriendGroupOrder) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_friend_requests_by_id(&self, id: &str, request: crate::models::LolChatFriendRequestResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_friends_by_id(&self, id: &str, contact: crate::models::LolChatFriendResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_me(&self, me: crate::models::LolChatUserResource) -> Box<dyn Future<Item = crate::models::LolChatUserResource, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_settings(&self, data: serde_json::Value, do_async: Option<bool>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_chat_v1_settings_by_key(&self, key: &str, value: serde_json::Value, do_async: Option<bool>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_collections_v1_inventories_by_summoner_id_verification(&self, summoner_id: i64, verification_code: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn put_lol_cosmetics_v1_selection_companion(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_cosmetics_v1_selection_tft_damage_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_cosmetics_v1_selection_tft_map_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_email_verification_v1_email(&self, email_update: crate::models::LolEmailVerificationEmailUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_highlights_v1_highlights_by_id(&self, id: i64, highlight: crate::models::LolHighlightsHighlight) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>>;
    fn put_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_sets: crate::models::LolItemSetsItemSets) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_loadouts_v4_loadouts_by_id(&self, id: &str, loadout: crate::models::LolLoadoutsUpdateLoadoutDto) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_active(&self, active: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_by_party_id_members_by_puuid_role(&self, party_id: &str, puuid: &str, role: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_metadata(&self, metadata: crate::models::LolLobbyPartyMemberMetadataDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_queue(&self, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_ready(&self, ready: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v2_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v2_lobby_party_type(&self, party_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_login_v1_shutdown_locks_by_lock_name(&self, lock_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_matchmaking_v1_search(&self, search: crate::models::LolMatchmakingMatchmakingSearchResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_missions_v1_player(&self, ids: crate::models::IdsDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_missions_v1_player_by_mission_id(&self, mission_id: &str, reward_groups: crate::models::LolMissionsRewardGroupsSelection) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_missions_v2_player_opt(&self, series_opt: crate::models::LolMissionsSeriesOpt) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_npe_tutorial_path_v1_settings(&self, settings: crate::models::LolNpeTutorialPathAccountSettingsTutorial) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_npe_tutorial_path_v1_tutorials_by_tutorial_id_view(&self, tutorial_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_patch_v1_game_patch_url(&self, url: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_patch_v1_self_update_restart(&self, force_restart_on_self_update: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_patch_v1_ux(&self, ux: crate::models::LolPatchUxResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_currentpage(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_pages_by_id(&self, id: i32, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_pages_validate(&self, page_data: crate::models::LolPerksValidatePageNameData) -> Box<dyn Future<Item = crate::models::LolPerksValidatePageNameResponse, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_perks_ack_gameplay_updated(&self, ids: Vec<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_settings(&self, show_long_descriptions: crate::models::LolPerksUiSettings) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_player_preferences_v1_preference(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_capturedevices(&self, handle: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_participants_by_puuid_mute(&self, puuid: &str, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_participants_by_puuid_volume(&self, puuid: &str, volume: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_activation_sensitivity(&self, sensitivity: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_input_mode(&self, input_mode: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_mic_level(&self, mic_level: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_mute(&self, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_regalia_v2_current_summoner_regalia(&self, regalia: crate::models::LolRegaliaRegaliaPreferences) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaWithPreferences, Error = Error<serde_json::Value>>>;
    fn put_lol_settings_v1_account_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_settings_v2_account_by_pp_type_by_category(&self, pp_type: &str, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_summoner_v1_current_summoner_icon(&self, body: crate::models::LolSummonerSummonerIcon) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>>;
    fn put_patcher_v1_self_update_restart(&self, force_restart_on_self_update: bool) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_patcher_v1_ux(&self, ux: crate::models::PatcherUxResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_player_notifications_v1_config(&self, config: crate::models::PlayerNotificationsPlayerNotificationConfigResource) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationConfigResource, Error = Error<serde_json::Value>>>;
    fn put_player_notifications_v1_notifications_by_id(&self, id: i64, notification: serde_json::Value) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationResource, Error = Error<serde_json::Value>>>;
    fn put_recofriender_v1_debug(&self, debug_configuration: crate::models::RecofrienderDebugConfig) -> Box<dyn Future<Item = crate::models::RecofrienderDebugConfig, Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v1_codec_settings(&self, settings: crate::models::VoiceChatUpdateCodecSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v1_push_to_talk(&self, push_to_talk: crate::models::VoiceChatPushToTalkResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v2_devices_capture_prompt_for_permission(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str, participant: crate::models::VoiceChatUpdateParticipantResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v2_settings(&self, settings: crate::models::VoiceChatUpdateSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginsApi for PluginsApiClient<C> {
    fn delete_gcloud_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/gcloud-voice-chat/v2/sessions".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_gcloud_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/gcloud-voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_blocked_players_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/blocked-players/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_conversations_active(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/conversations/active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_conversations_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/conversations/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_conversations_by_id_messages(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/conversations/{id}/messages".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_errors_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/errors/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_friend_groups_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/friend-groups/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_friend_requests_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/friend-requests/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_friends_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/friends/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_session(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_chat_v1_settings_by_key(&self, key: &str, do_async: Option<bool>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-chat/v1/settings/{key}".to_string())
        ;
        if let Some(ref s) = do_async {
            req = req.with_query_param("doAsync".to_string(), s.to_string());
        }
        req = req.with_path_param("key".to_string(), key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clash_v1_voice(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clash/v1/voice".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clash_v1_voice_delay_by_delay_seconds(&self, delay_seconds: f64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clash/v1/voice-delay/{delaySeconds}".to_string())
        ;
        req = req.with_path_param("delaySeconds".to_string(), delay_seconds.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/invitations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/members/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/nominations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/promotions/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_cosmetics_v1_selection_companion(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-cosmetics/v1/selection/companion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_cosmetics_v1_selection_tft_damage_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-cosmetics/v1/selection/tft-damage-skin".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_cosmetics_v1_selection_tft_map_skin(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-cosmetics/v1/selection/tft-map-skin".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_gameflow_v1_early_exit_notifications_eog(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-gameflow/v1/early-exit-notifications/eog".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_gameflow_v1_early_exit_notifications_eog_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-gameflow/v1/early-exit-notifications/eog/{key}".to_string())
        ;
        req = req.with_path_param("key".to_string(), key.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_gameflow_v1_early_exit_notifications_missions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-gameflow/v1/early-exit-notifications/missions".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_gameflow_v1_early_exit_notifications_missions_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-gameflow/v1/early-exit-notifications/missions/{key}".to_string())
        ;
        req = req.with_path_param("key".to_string(), key.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-highlights/v1/highlights/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_leaver_buster_v1_notifications_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-leaver-buster/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_loadouts_v4_loadouts_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-loadouts/v4/loadouts/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby-team-builder/v1/lobby".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v1_clash(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v1/clash".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}".to_string())
        ;
        req = req.with_path_param("summonerInternalName".to_string(), summoner_internal_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v2/lobby".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v2/lobby/matchmaking/search".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v2_notifications_by_notification_id(&self, notification_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v2/notifications/{notificationId}".to_string())
        ;
        req = req.with_path_param("notificationId".to_string(), notification_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_login_v1_service_proxy_async_requests_by_service_name_by_method_name(&self, service_name: &str, method_name: &str, plugin_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-login/v1/service-proxy-async-requests/{serviceName}/{methodName}".to_string())
        ;
        req = req.with_query_param("pluginId".to_string(), plugin_id.to_string());
        req = req.with_path_param("serviceName".to_string(), service_name.to_string());
        req = req.with_path_param("methodName".to_string(), method_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_login_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-login/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_login_v1_shutdown_locks_by_lock_name(&self, lock_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-login/v1/shutdown-locks/{lockName}".to_string())
        ;
        req = req.with_path_param("lockName".to_string(), lock_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_loot_v1_loot_grants_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-loot/v1/loot-grants/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_loot_v1_player_loot_by_loot_id_new_notification(&self, loot_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-loot/v1/player-loot/{lootId}/new-notification".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_matchmaking_v1_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-matchmaking/v1/search".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_patch_v1_notifications_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-patch/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-perks/v1/pages".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-perks/v1/pages/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_perks_v1_pages_by_id_auto_modified_selections(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-perks/v1/pages/{id}/auto-modified-selections".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-player-behavior/v1/reporter-feedback/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_player_messaging_v1_celebration_notification_by_id_acknowledge(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-player-messaging/v1/celebration/notification/{id}/acknowledge".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_player_messaging_v1_notification_by_id_acknowledge(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-player-messaging/v1/notification/{id}/acknowledge".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_pre_end_of_game_v1_registration_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-pre-end-of-game/v1/registration/{sequenceEventName}".to_string())
        ;
        req = req.with_path_param("sequenceEventName".to_string(), sequence_event_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-premade-voice/v1/mic-test".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-premade-voice/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rms_v1_champion_mastery_leaveup_update_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rms/v1/champion-mastery-leaveup-update/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v1/auth-hints/hint".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v1/authorization".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rso_auth_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rso_auth_v2_config(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v2/config".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_simple_dialog_messages_v1_messages_by_message_id(&self, message_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-simple-dialog-messages/v1/messages/{messageId}".to_string())
        ;
        req = req.with_path_param("messageId".to_string(), message_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_statstones_v1_eog_notifications(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-statstones/v1/eog-notifications".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_statstones_v1_eog_notifications_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-statstones/v1/eog-notifications/{key}".to_string())
        ;
        req = req.with_path_param("key".to_string(), key.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_statstones_v1_vignette_notifications(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-statstones/v1/vignette-notifications".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_statstones_v1_vignette_notifications_by_key(&self, key: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-statstones/v1/vignette-notifications/{key}".to_string())
        ;
        req = req.with_path_param("key".to_string(), key.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_suggested_players_v1_suggested_players_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-suggested-players/v1/suggested-players/{summonerId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_patcher_v1_notifications_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/patcher/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_patcher_v1_products_by_product_id(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/patcher/v1/products/{product-id}".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_player_notifications_v1_notifications_by_id(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/player-notifications/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_recofriender_v1_registrations_by_network(&self, network: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/recofriender/v1/registrations/{network}".to_string())
        ;
        req = req.with_path_param("network".to_string(), network.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_recofriender_v2_contacts(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/recofriender/v2/contacts".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_recofriender_v2_dismissed(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/recofriender/v2/dismissed".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_riot_messaging_service_v1_connect(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/riot-messaging-service/v1/connect".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_riot_messaging_service_v1_entitlements(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/riot-messaging-service/v1/entitlements".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/riot-messaging-service/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/voice-chat/v2/sessions".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_anti_addiction_v1_policies_by_policy_type_anti_addiction_state(&self, policy_type: &str) -> Box<dyn Future<Item = crate::models::LolTencentAntiaddictionAntiAddictionState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/anti-addiction/v1/policies/{policyType}/anti-addiction-state".to_string())
        ;
        req = req.with_path_param("policyType".to_string(), policy_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/{plugin}/assets/{path}".to_string())
        ;
        req = req.with_path_param("plugin".to_string(), plugin.to_string());
        req = req.with_path_param("path".to_string(), path.to_string());
        if let Some(param_value) = if_none_match {
            req = req.with_header_param("if-none-match".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v1_config(&self, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>, namespace: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v1/config".to_string())
        ;
        req = req.with_query_param("type".to_string(), _type.to_string());
        if let Some(ref s) = app {
            req = req.with_query_param("app".to_string(), s.to_string());
        }
        if let Some(ref s) = version {
            req = req.with_query_param("version".to_string(), s.to_string());
        }
        if let Some(ref s) = patchline {
            req = req.with_query_param("patchline".to_string(), s.to_string());
        }
        if let Some(ref s) = region {
            req = req.with_query_param("region".to_string(), s.to_string());
        }
        if let Some(ref s) = namespace {
            req = req.with_query_param("namespace".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v1_config_by_name(&self, name: &str, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v1/config/{name}".to_string())
        ;
        req = req.with_query_param("type".to_string(), _type.to_string());
        if let Some(ref s) = app {
            req = req.with_query_param("app".to_string(), s.to_string());
        }
        if let Some(ref s) = version {
            req = req.with_query_param("version".to_string(), s.to_string());
        }
        if let Some(ref s) = patchline {
            req = req.with_query_param("patchline".to_string(), s.to_string());
        }
        if let Some(ref s) = region {
            req = req.with_query_param("region".to_string(), s.to_string());
        }
        req = req.with_path_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v1_status_by_type(&self, _type: &str) -> Box<dyn Future<Item = crate::models::ClientConfigConfigStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v1/status/{type}".to_string())
        ;
        req = req.with_path_param("type".to_string(), _type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_config_by_name(&self, name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/config/{name}".to_string())
        ;
        req = req.with_path_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_namespace_by_namespace(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/namespace/{namespace}".to_string())
        ;
        req = req.with_path_param("namespace".to_string(), namespace.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_namespace_by_namespace_player(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/namespace/{namespace}/player".to_string())
        ;
        req = req.with_path_param("namespace".to_string(), namespace.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_namespace_by_namespace_public(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/namespace/{namespace}/public".to_string())
        ;
        req = req.with_path_param("namespace".to_string(), namespace.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_entitlements_v1_token(&self, ) -> Box<dyn Future<Item = crate::models::EntitlementsToken, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/entitlements/v1/token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v1_audio_properties(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatAudioPropertiesResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v1/audio-properties".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v1_call_stats_aggregate(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatCallStatsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v1/call-stats/aggregate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v1_call_stats_by_id(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatCallStatsResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v1/call-stats/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v1_codec_settings(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatCodecSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v1/codec-settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatConfigResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatVoiceErrorCounterResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v1/errors".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v1_push_to_talk(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatPushToTalkResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v1/push-to-talk".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_devices_capture(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/devices/capture".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_devices_capture_permission(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/devices/capture/permission".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_devices_render(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/devices/render".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::GcloudVoiceChatSessionResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/sessions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatParticipantResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/sessions/{sessionId}/participants/{participantId}".to_string())
        ;
        req = req.with_path_param("sessionId".to_string(), session_id.to_string());
        req = req.with_path_param("participantId".to_string(), participant_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_settings(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_gcloud_voice_chat_v2_state(&self, ) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatStateResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/gcloud-voice-chat/v2/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_account_verification_v1_device(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationDeviceResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-account-verification/v1/device".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_account_verification_v1_is_verified(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationIsVerifiedResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-account-verification/v1/is-verified".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_delta(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/delta".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/games/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_gametimelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/gametimelines/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/matchlists/{accountId}".to_string())
        ;
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/recently-played-champions/{accountId}".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_matchlists(&self, account_id: i64, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/matchlists".to_string())
        ;
        req = req.with_query_param("accountId".to_string(), account_id.to_string());
        req = req.with_query_param("begIndex".to_string(), beg_index.to_string());
        req = req.with_query_param("endIndex".to_string(), end_index.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_recently_played_champions_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/recently-played-champions/{accountId}".to_string())
        ;
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/recently-played-champions/current-summoner".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_request_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/request-recently-played-champions/{accountId}".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());
        req = req.with_path_param("accountId".to_string(), account_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_request_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/request-recently-played-champions/current-summoner".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_active_boosts_v1_active_boosts(&self, ) -> Box<dyn Future<Item = crate::models::LolActiveBoostsActiveBoosts, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-active-boosts/v1/active-boosts".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_banners_v1_current_summoner_flags(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolBannersBannerFlag>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-banners/v1/current-summoner/flags".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_banners_v1_current_summoner_flags_equipped(&self, ) -> Box<dyn Future<Item = crate::models::LolBannersBannerFlag, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-banners/v1/current-summoner/flags/equipped".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_banners_v1_current_summoner_frames_equipped(&self, ) -> Box<dyn Future<Item = crate::models::LolBannersBannerFrame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-banners/v1/current-summoner/frames/equipped".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_banners_v1_players_by_puuid_flags_equipped(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolBannersBannerFlag, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-banners/v1/players/{puuid}/flags/equipped".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_champion_averages_by_champion_id_by_position_by_tier_by_queue(&self, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-averages/{championId}/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_champion_averages_season_by_season_by_champion_id_by_position_by_tier_by_queue(&self, season: i32, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-averages/season/{season}/{championId}/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_champion_experts_by_champion_id_by_position(&self, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-experts/{championId}/{position}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_champion_experts_season_by_season_by_champion_id_by_position(&self, season: i32, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-experts/season/{season}/{championId}/{position}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_averages_by_position_by_tier_by_queue(&self, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-averages/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_averages_season_by_season_by_position_by_tier_by_queue(&self, season: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-averages/season/{season}/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_experts_by_position(&self, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-experts/{position}".to_string())
        ;
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_experts_season_by_season_by_position(&self, season: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-experts/season/{season}/{position}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_summoner_games_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/summoner-games/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_summoner_games_by_puuid_season_by_season(&self, puuid: &str, season: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/summoner-games/{puuid}/season/{season}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_path_param("season".to_string(), season.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_summoner_stats_by_puuid_by_season_by_queue_by_position(&self, puuid: &str, season: i32, queue: &str, position: &str, champion_id: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/summoner-stats/{puuid}/{season}/{queue}/{position}".to_string())
        ;
        if let Some(ref s) = champion_id {
            req = req.with_query_param("championId".to_string(), s.to_string());
        }
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_catalog_v1_item_details(&self, inventory_type: &str, item_id: i64) -> Box<dyn Future<Item = crate::models::LolCatalogCatalogPluginItemWithDetails, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-catalog/v1/item-details".to_string())
        ;
        req = req.with_query_param("inventoryType".to_string(), inventory_type.to_string());
        req = req.with_query_param("itemId".to_string(), item_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_catalog_v1_items(&self, inventory_type: &str, item_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolCatalogItemChoiceDetails>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-catalog/v1/items".to_string())
        ;
        req = req.with_query_param("inventoryType".to_string(), inventory_type.to_string());
        req = req.with_query_param("itemIds".to_string(), item_ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_catalog_v1_items_by_inventory_type(&self, inventory_type: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCatalogCatalogPluginItem>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-catalog/v1/items/{inventoryType}".to_string())
        ;
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/bannable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/current-champion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/disabled-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/implementation-active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/pickable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session/timer".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectLegacyChampSelectTradeContract>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session/trades".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/session/trades/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_legacy_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyTeamBoost, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select-legacy/v1/team-boost".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_all_grid_champions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampGridChampion>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/all-grid-champions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/bannable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/current-champion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/disabled-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_grid_champions_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampGridChampion, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/grid-champions/{championId}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_muted_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectMutedPlayerInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/muted-players".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/pickable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPickableSkins, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/pickable-skins".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_pin_drop_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectPinDropNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/pin-drop-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session/timer".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectChampSelectTradeContract>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session/trades".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/session/trades/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_sfx_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampSelectSfxNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/sfx-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_summoners_by_slot_id(&self, slot_id: i32) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/summoners/{slotId}".to_string())
        ;
        req = req.with_path_param("slotId".to_string(), slot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolChampSelectTeamBoost, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champ-select/v1/team-boost".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampion>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampion, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkin>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_champion_skin_id(&self, summoner_id: i64, champion_id: i32, champion_skin_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionSkin, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{championSkinId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("championSkinId".to_string(), champion_skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_skin_id_chromas(&self, summoner_id: i64, champion_id: i32, skin_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionChroma>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{skinId}/chromas".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("skinId".to_string(), skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions-minimal".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_playable_count(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionPlayableCounts, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions-playable-count".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_skins_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkinMinimal>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/skins-minimal".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_owned_champions_minimal(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/owned-champions-minimal".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_blocked_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatBlockedPlayerResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/blocked-players".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_blocked_players_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolChatBlockedPlayerResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/blocked-players/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolChatChatServiceDynamicClientConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_conversations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatConversationResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/conversations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_conversations_active(&self, ) -> Box<dyn Future<Item = crate::models::LolChatActiveConversationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/conversations/active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_conversations_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolChatConversationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/conversations/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_conversations_by_id_messages(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolChatConversationMessageResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/conversations/{id}/messages".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_conversations_by_id_participants(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolChatUserResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/conversations/{id}/participants".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_conversations_by_id_participants_by_pid(&self, id: &str, pid: &str) -> Box<dyn Future<Item = crate::models::LolChatUserResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/conversations/{id}/participants/{pid}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("pid".to_string(), pid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_conversations_notify(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/conversations/notify".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatErrorResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/errors".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friend_counts(&self, ) -> Box<dyn Future<Item = crate::models::LolChatFriendCountsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friend-counts".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friend_exists_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friend-exists/{summonerId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friend_groups(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatGroupResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friend-groups".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friend_groups_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolChatGroupResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friend-groups/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friend_groups_by_id_friends(&self, id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChatFriendResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friend-groups/{id}/friends".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friend_requests(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatFriendRequestResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friend-requests".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friends(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChatFriendResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friends".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_friends_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolChatFriendResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/friends/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_me(&self, ) -> Box<dyn Future<Item = crate::models::LolChatUserResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/me".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_resources(&self, ) -> Box<dyn Future<Item = crate::models::LolChatProductMetadataMap, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/resources".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_settings(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_chat_v1_settings_by_key(&self, key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-chat/v1/settings/{key}".to_string())
        ;
        req = req.with_path_param("key".to_string(), key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_all_tournaments(&self, ) -> Box<dyn Future<Item = Vec<crate::models::TournamentDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/all-tournaments".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_bracket_by_bracket_id(&self, bracket_id: i64) -> Box<dyn Future<Item = crate::models::LolClashBracket, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/bracket/{bracketId}".to_string())
        ;
        req = req.with_path_param("bracketId".to_string(), bracket_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_checkin_allowed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/checkin-allowed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_current_tournament_ids(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/currentTournamentIds".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_disabled_config(&self, ) -> Box<dyn Future<Item = crate::models::LolClashClashDisabledConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/disabled-config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_eog_player_update(&self, ) -> Box<dyn Future<Item = crate::models::LolClashEogPlayerUpdateDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/eog-player-update".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_event_by_uuid(&self, uuid: &str) -> Box<dyn Future<Item = crate::models::ClashEventData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/event/{uuid}".to_string())
        ;
        req = req.with_path_param("uuid".to_string(), uuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_game_end(&self, ) -> Box<dyn Future<Item = crate::models::LolClashTournamentGameEnd, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/game-end".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_historyandwinners(&self, ) -> Box<dyn Future<Item = crate::models::LolClashTournamentHistoryAndWinners, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/historyandwinners".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_iconconfig(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/iconconfig".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_invited_roster_ids(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/invited-roster-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_notifications(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlayerNotificationData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_ping(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/ping".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_player(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlayerData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/player".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_player_chat_rosters(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashPlayerChatRoster>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/player/chat-rosters".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_player_history(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashRosterStats>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/player/history".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_playmode_restricted(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/playmode-restricted".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlayerRewards, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_roster_by_roster_id(&self, roster_id: &str) -> Box<dyn Future<Item = crate::models::LolClashRoster, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/roster/{rosterId}".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_roster_by_roster_id_stats(&self, roster_id: i64) -> Box<dyn Future<Item = crate::models::LolClashRosterStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/roster/{rosterId}/stats".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_scouting_champions(&self, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolClashScoutingChampions>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/scouting/champions".to_string())
        ;
        req = req.with_query_param("summonerIds".to_string(), summoner_ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_scouting_matchhistory(&self, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/scouting/matchhistory".to_string())
        ;
        req = req.with_query_param("summonerIds".to_string(), summoner_ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_simple_state_flags(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashSimpleStateFlag>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/simple-state-flags".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_thirdparty_team_data(&self, ) -> Box<dyn Future<Item = crate::models::LolClashThirdPartyApiRoster, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/thirdparty/team-data".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_time(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/time".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashTournament, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/{tournamentId}".to_string())
        ;
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_get_player_tiers(&self, tournament_id: i64, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/{tournamentId}/get-player-tiers".to_string())
        ;
        req = req.with_query_param("summonerIds".to_string(), summoner_ids.join(",").to_string());
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_player(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashPlayerTournamentData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/{tournamentId}/player".to_string())
        ;
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_player_honor_restricted(&self, tournament_id: i64) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/{tournamentId}/player-honor-restricted".to_string())
        ;
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_state_info(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashTournamentStateInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/{tournamentId}/stateInfo".to_string())
        ;
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_winners(&self, tournament_id: i64) -> Box<dyn Future<Item = crate::models::LolClashTournamentWinnerHistory, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/{tournamentId}/winners".to_string())
        ;
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_cancelled(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/cancelled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_get_all_player_tiers(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament/get-all-player-tiers".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_state_info(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashTournamentStateInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament-state-info".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_summary(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClashTournamentSummary>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/tournament-summary".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_visible(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/visible".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_voice_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/voice-enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v2_playmode_restricted(&self, ) -> Box<dyn Future<Item = crate::models::LolClashPlaymodeRestrictedInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v2/playmode-restricted".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_public_v1_clubs_public(&self, summoner_names: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsPublicClubsPublicData>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs-public/v1/clubs/public".to_string())
        ;
        req = req.with_query_param("summonerNames".to_string(), summoner_names.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_public_v1_clubs_public_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPublicClubsPublicData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs-public/v1/clubs/public/{summonerId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_public_v1_clubs_public_by_summoner_id_tag(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPublicClubTag, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs-public/v1/clubs/public/{summonerId}/tag".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsPlayerClub>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_invitations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/invitations".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_members(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/members".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/motd".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_nominations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/nominations".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubInvite>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_membership(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/membership".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_membership_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/membership/preferences".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_backdrop(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerBackdrop, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/backdrop".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsChampionMastery>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/champion-mastery".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery_top(&self, summoner_id: i64, limit: i64, sort_rule: Option<&str>) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsTopChampionMasteries, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/champion-mastery/top".to_string())
        ;
        req = req.with_query_param("limit".to_string(), limit.to_string());
        if let Some(ref s) = sort_rule {
            req = req.with_query_param("sortRule".to_string(), s.to_string());
        }
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_spells(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerSpells, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/spells".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/summoner-icons".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsWardSkin>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/ward-skins".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins_by_ward_skin_id(&self, summoner_id: i64, ward_skin_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsWardSkin, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/ward-skins/{wardSkinId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("wardSkinId".to_string(), ward_skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_chest_eligibility(&self, ) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsChestEligibility, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/chest-eligibility".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v2/inventories/{summonerId}/summoner-icons".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons_by_summoner_icon_id(&self, summoner_id: i64, summoner_icon_id: i32) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcon, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v2/inventories/{summonerId}/summoner-icons/{summonerIconId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("summonerIconId".to_string(), summoner_icon_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_content_targeting_v1_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-content-targeting/v1/filters".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_content_targeting_v1_locale(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingLocaleResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-content-targeting/v1/locale".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_content_targeting_v1_protected_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-content-targeting/v1/protected_filters".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_cosmetics_v1_inventories_by_set_name_companions(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsCompanionsGroupedViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-cosmetics/v1/inventories/{setName}/companions".to_string())
        ;
        req = req.with_path_param("setName".to_string(), set_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_cosmetics_v1_inventories_by_set_name_damage_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftDamageSkinGroupedViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-cosmetics/v1/inventories/{setName}/damage-skins".to_string())
        ;
        req = req.with_path_param("setName".to_string(), set_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_cosmetics_v1_inventories_by_set_name_map_skins(&self, set_name: &str) -> Box<dyn Future<Item = crate::models::LolCosmeticsTftMapSkinGroupedViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-cosmetics/v1/inventories/{setName}/map-skins".to_string())
        ;
        req = req.with_path_param("setName".to_string(), set_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_email_verification_v1_email(&self, ) -> Box<dyn Future<Item = crate::models::LolEmailVerificationEmailVerificationSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-email-verification/v1/email".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_champion_mastery_updates(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameChampionMasteryUpdate, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/champion-mastery-updates".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGameStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/eog-stats-block".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_gameclient_eog_stats_block(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameGameClientEndOfGameStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/gameclient-eog-stats-block".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_reported_players(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/reported-players".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_end_of_game_v1_tft_eog_stats(&self, ) -> Box<dyn Future<Item = crate::models::LolEndOfGameTftEndOfGameViewModel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-end-of-game/v1/tft-eog-stats".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_esport_stream_notifications_v1_live_streams(&self, ) -> Box<dyn Future<Item = crate::models::LolEsportStreamNotificationsESportsLiveStreams, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-esport-stream-notifications/v1/live-streams".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_esport_stream_notifications_v1_stream_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-esport-stream-notifications/v1/stream-url".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_client_chat_v1_buddies(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-client-chat/v1/buddies".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_client_chat_v1_ignored_summoners(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-client-chat/v1/ignored-summoners".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_client_chat_v1_muted_summoners(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-client-chat/v1/muted-summoners".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_custom(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/custom".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_custom_non_default(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/custom-non-default".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id(&self, game_type_config_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/game-type-config/{gameTypeConfigId}".to_string())
        ;
        req = req.with_path_param("gameTypeConfigId".to_string(), game_type_config_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id_map_by_map_id(&self, game_type_config_id: i32, map_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/game-type-config/{gameTypeConfigId}/map/{mapId}".to_string())
        ;
        req = req.with_path_param("gameTypeConfigId".to_string(), game_type_config_id.to_string());
        req = req.with_path_param("mapId".to_string(), map_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_queues(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolGameQueuesQueue>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/queues".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_queues_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/queues/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_queues_type_by_queue_type(&self, queue_type: &str) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/queues/type/{queueType}".to_string())
        ;
        req = req.with_path_param("queueType".to_string(), queue_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_settings_v1_didreset(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-settings/v1/didreset".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_settings_v1_game_settings(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-settings/v1/game-settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_settings_v1_game_settings_schema(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-settings/v1/game-settings-schema".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_settings_v1_input_settings(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-settings/v1/input-settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_settings_v1_input_settings_schema(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-settings/v1/input-settings-schema".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_settings_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-settings/v1/ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_active_patcher_lock(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/active-patcher-lock".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowAvailability, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/availability".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_basic_tutorial(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/basic-tutorial".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_battle_training(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/battle-training".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_early_exit_notifications_eog(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/early-exit-notifications/eog".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_early_exit_notifications_missions(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/early-exit-notifications/missions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_extra_game_client_args(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/extra-game-client-args".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_gameflow_metadata_player_status(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowPlayerStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/gameflow-metadata/player-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_gameflow_metadata_registration_status(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowRegistrationStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/gameflow-metadata/registration-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_gameflow_phase(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowPhase, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/gameflow-phase".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_spectate(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/spectate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_spectate_delayed_launch(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/spectate/delayed-launch".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gameflow_v1_watch(&self, ) -> Box<dyn Future<Item = crate::models::LolGameflowGameflowWatchPhase, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gameflow/v1/watch".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gamhs_v1_products_by_product_id_by_puuid_matches(&self, product_id: &str, puuid: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/{puuid}/matches".to_string())
        ;
        req = req.with_query_param("begin".to_string(), begin.to_string());
        req = req.with_query_param("count".to_string(), count.to_string());
        req = req.with_path_param("productId".to_string(), product_id.to_string());
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gamhs_v1_products_by_product_id_current_summoner_matches(&self, product_id: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/current-summoner/matches".to_string())
        ;
        req = req.with_query_param("begin".to_string(), begin.to_string());
        req = req.with_query_param("count".to_string(), count.to_string());
        req = req.with_path_param("productId".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_details(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/matches/{matchId}/details".to_string())
        ;
        req = req.with_path_param("productId".to_string(), product_id.to_string());
        req = req.with_path_param("matchId".to_string(), match_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_summary(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/matches/{matchId}/summary".to_string())
        ;
        req = req.with_path_param("productId".to_string(), product_id.to_string());
        req = req.with_path_param("matchId".to_string(), match_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_geoinfo_v1_getlocation(&self, ip_address: &str) -> Box<dyn Future<Item = crate::models::LolGeoinfoGeoInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-geoinfo/v1/getlocation".to_string())
        ;
        req = req.with_query_param("ip_address".to_string(), ip_address.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_geoinfo_v1_whereami(&self, ) -> Box<dyn Future<Item = crate::models::LolGeoinfoGeoInfoResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-geoinfo/v1/whereami".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlightsConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights_folder_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights-folder-path".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights_folder_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights-folder-path/default".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_ballot(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2Ballot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/ballot".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2HonorConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_late_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/late-recognition".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_latest_eligible_game(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/latest-eligible-game".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_level_change(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedHonorChange, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/level-change".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_mutual_honor(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2MutualHonor, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/mutual-honor".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_profile(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2ProfileInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/profile".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/recognition".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_reward_granted(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedReward, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/reward-granted".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_team_choices(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/team-choices".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_vote_completion(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VoteCompletion, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/vote-completion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_hovercard_v1_friend_info_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolHovercardHovercardUserInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-hovercard/v1/friend-info/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_hovercard_v1_friend_info_by_summoner_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolHovercardHovercardUserInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-hovercard/v1/friend-info-by-summoner/{summonerId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_champ_select_inventory(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/champSelectInventory".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/initial-configuration-complete".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_inventory(&self, inventory_types: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/inventory".to_string())
        ;
        req = req.with_query_param("inventoryTypes".to_string(), inventory_types.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_inventory_emotes(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/inventory/emotes".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_notifications_by_inventory_type(&self, inventory_type: &str) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/notifications/{inventoryType}".to_string())
        ;
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_players_by_puuid_inventory(&self, puuid: &str, inventory_types: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/players/{puuid}/inventory".to_string())
        ;
        req = req.with_query_param("inventoryTypes".to_string(), inventory_types.join(",").to_string());
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory(&self, inventory_types: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/signedInventory".to_string())
        ;
        req = req.with_query_param("inventoryTypes".to_string(), inventory_types.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory_cache(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolInventoryInventoryCacheEntry>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/signedInventoryCache".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory_simple(&self, inventory_types: Vec<String>, timeout_in_seconds: Option<i32>, query_params: Option<serde_json::Value>) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/signedInventory/simple".to_string())
        ;
        req = req.with_query_param("inventoryTypes".to_string(), inventory_types.join(",").to_string());
        if let Some(ref s) = timeout_in_seconds {
            req = req.with_query_param("timeoutInSeconds".to_string(), s.to_string());
        }
        if let Some(ref s) = query_params {
            req = req.with_query_param("queryParams".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_inventory_tournamentlogos(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/signedInventory/tournamentlogos".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_wallet(&self, currency_types: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/signedWallet".to_string())
        ;
        req = req.with_query_param("currencyTypes".to_string(), currency_types.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_signed_wallet_by_currency_type(&self, currency_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/signedWallet/{currencyType}".to_string())
        ;
        req = req.with_path_param("currencyType".to_string(), currency_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_wallet(&self, currency_types: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/wallet".to_string())
        ;
        req = req.with_query_param("currencyTypes".to_string(), currency_types.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v1_wallet_by_currency_type(&self, currency_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v1/wallet/{currencyType}".to_string())
        ;
        req = req.with_path_param("currencyType".to_string(), currency_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_inventory_v2_inventory_by_inventory_type(&self, inventory_type: &str) -> Box<dyn Future<Item = Vec<crate::models::LolInventoryInventoryItemWithPayload>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-inventory/v2/inventory/{inventoryType}".to_string())
        ;
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolItemSetsItemSets, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-item-sets/v1/item-sets/{summonerId}/sets".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kickout_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolKickoutKickoutMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kickout/v1/notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_playtime_reminder_v1_message(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-playtime-reminder/v1/message".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_playtime_reminder_v1_playtime(&self, ) -> Box<dyn Future<Item = crate::models::LolKrPlaytimeReminderPlaytimeReminder, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-playtime-reminder/v1/playtime".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_shutdown_law_v1_custom_status(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawQueueShutdownStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-shutdown-law/v1/custom-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_shutdown_law_v1_disabled_queues(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-shutdown-law/v1/disabled-queues".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_shutdown_law_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawShutdownLawNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-shutdown-law/v1/notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_shutdown_law_v1_queue_status_by_queue_id(&self, queue_id: i32) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawQueueShutdownStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-shutdown-law/v1/queue-status/{queue_id}".to_string())
        ;
        req = req.with_path_param("queue_id".to_string(), queue_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_shutdown_law_v1_rating_screen(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawRatingScreenInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-shutdown-law/v1/rating-screen".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_kr_shutdown_law_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolKrShutdownLawAllQueueShutdownStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-kr-shutdown-law/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_league_session_v1_league_session_token(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-league-session/v1/league-session-token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_leaver_buster_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLeaverBusterLeaverBusterNotificationResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-leaver-buster/v1/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_leaver_buster_v1_notifications_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLeaverBusterLeaverBusterNotificationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-leaver-buster/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_license_agreement_v1_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-license-agreement/v1/agreements".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_license_agreement_v1_all_agreements(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLicenseAgreementLicenseAgreement>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-license-agreement/v1/all-agreements".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_license_agreement_v1_serve_location(&self, ) -> Box<dyn Future<Item = crate::models::LolLicenseAgreementLicenseServeLocation, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-license-agreement/v1/serve-location".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loadouts_v1_loadouts_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loadouts/v1/loadouts-ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loadouts_v4_loadouts_by_loadout_id(&self, loadout_id: &str) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loadouts/v4/loadouts/{loadoutId}".to_string())
        ;
        req = req.with_path_param("loadoutId".to_string(), loadout_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loadouts_v4_loadouts_scope_account(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLoadoutsScopedLoadout>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loadouts/v4/loadouts/scope/account".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loadouts_v4_loadouts_scope_by_scope_by_scope_item_id(&self, scope: &str, scope_item_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolLoadoutsScopedLoadout>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loadouts/v4/loadouts/scope/{scope}/{scopeItemId}".to_string())
        ;
        req = req.with_path_param("scope".to_string(), scope.to_string());
        req = req.with_path_param("scopeItemId".to_string(), scope_item_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/bannable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/current-champion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/disabled-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_has_auto_assigned_smite(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/has-auto-assigned-smite".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/implementation-active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/pickable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectPickableSkins, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/pickable-skins".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampionSelectPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/preferences".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_sending_loadouts_gcos_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/sending-loadouts-gcos-enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session/timer".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyTeamBuilderChampSelectTradeContract>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session/trades".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderTeamBoost, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/team-boost".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/v1/lobby".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobbyCountdownTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/v1/lobby/countdown".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_v1_matchmaking(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/v1/matchmaking".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/autofill-displayed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_custom_games(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyCustomGame>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/custom-games".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_custom_games_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/custom-games/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyQueueAvailability, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/availability".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/countdown".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitation>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_invitations_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/invitations/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_parties_gamemode(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyGameModeDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/parties/gamemode".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_parties_player(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPlayerDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/parties/player".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_party_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyPartyRewards, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/party-rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_comms_members(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPremadePartyDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/comms/members".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_comms_token(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/comms/token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_eligibility_game_select_eligibility_hash(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/eligibility/game-select-eligibility-hash".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_eligibility_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/eligibility/initial-configuration-complete".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_custom_available_bots(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyBotChampion>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/custom/available-bots".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_custom_bots_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/custom/bots-enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_matchmaking_search_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyMatchmakingSearchResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/matchmaking/search-state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_members(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyParticipantDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/members".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_party_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/party-active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_party_eog_status(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPartyStatusDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/party/eog-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_received_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyReceivedInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/received-invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_registration_status(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/registration-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_account_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginAccountStateResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/account-state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_login_connection_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginConnectionState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/login-connection-state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_login_data_packet(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/login-data-packet".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_login_in_game_creds(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/login-in-game-creds".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_login_platform_credentials(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginPlatformGeneratedCredentials, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/login-platform-credentials".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_login_queue_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginQueue, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/login-queue-state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v1_wallet(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLoginSessionWallet, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v1/wallet".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_login_v2_league_session_init_token(&self, ) -> Box<dyn Future<Item = crate::models::LolLoginLeagueSessionTokenEnvelope, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-login/v2/league-session-init-token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_currency_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/currency-configuration".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_loot_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootGrantNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/loot-grants".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_loot_items(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootLootItem>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/loot-items".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_new_player_check_done(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/new-player-check-done".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_display_categories(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-display-categories".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLoot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot/{lootId}".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot/{lootId}/context-menu".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_map(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolLootPlayerLoot>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot-map".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_player_loot_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLootPlayerLootNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/player-loot-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_recipes_configuration(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/recipes/configuration".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v1/recipes/initial-item/{lootId}".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loot_v2_player_loot_map(&self, ) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootMap, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loot/v2/player-loot-map".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_loyalty_v1_status_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolLoyaltyLoyaltyStatusNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-loyalty/v1/status-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v1_map_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v1/map/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v1_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v1/maps".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v2_map_by_id_by_game_mode(&self, id: i64, game_mode: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v2/map/{id}/{gameMode}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("gameMode".to_string(), game_mode.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v2_map_by_id_by_game_mode_by_game_mutator(&self, id: i64, game_mode: &str, game_mutator: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v2/map/{id}/{gameMode}/{gameMutator}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("gameMode".to_string(), game_mode.to_string());
        req = req.with_path_param("gameMutator".to_string(), game_mutator.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v2_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v2/maps".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_delta(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryPlayerDelta, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/delta".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_friend_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/friend-matchlists/{accountId}".to_string())
        ;
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_game_timelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryTimelineFrames, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/game-timelines/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/games/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_matchlist(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/matchlist".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_recently_played_summoners(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMatchHistoryRecentlyPlayedSummoner>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/recently-played-summoners".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v1_web_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v1/web-url".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_match_history_v2_matchlist(&self, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = crate::models::LolMatchHistoryMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-match-history/v2/matchlist".to_string())
        ;
        req = req.with_query_param("begIndex".to_string(), beg_index.to_string());
        req = req.with_query_param("endIndex".to_string(), end_index.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_matchmaking_v1_ready_check(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchmakingMatchmakingReadyCheckResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-matchmaking/v1/ready-check".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_matchmaking_v1_search(&self, ) -> Box<dyn Future<Item = crate::models::LolMatchmakingMatchmakingSearchResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-matchmaking/v1/search".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_matchmaking_v1_search_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMatchmakingMatchmakingSearchErrorResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-matchmaking/v1/search/errors".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_matchmaking_v1_search_errors_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolMatchmakingMatchmakingSearchErrorResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-matchmaking/v1/search/errors/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_missions_v1_data(&self, ) -> Box<dyn Future<Item = crate::models::PlayerMissionEligibilityData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/data".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_missions_v1_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMissionsRewardGrant>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/grants".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_missions_v1_missions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerMissionDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/missions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_missions_v1_series(&self, ) -> Box<dyn Future<Item = Vec<crate::models::SeriesDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/series".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_challenges_progress(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsChallengesProgress, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/challenges/progress".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_level_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/level-rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_level_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/level-rewards/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_login_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeries, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/login-rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_rewards_v1_login_rewards_state(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeRewardsRewardSeriesState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-rewards/v1/login-rewards/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_tutorial_path_v1_rewards_champ(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeTutorialPathCollectionsChampion, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-tutorial-path/v1/rewards/champ".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_tutorial_path_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolNpeTutorialPathAccountSettingsTutorial, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-tutorial-path/v1/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_npe_tutorial_path_v1_tutorials(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolNpeTutorialPathTutorial>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-npe-tutorial-path/v1/tutorials".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_checking_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/checking-enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_environment(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchChunkingPatcherEnvironment, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/environment".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_game_version(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/game-version".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPatchNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_products_league_of_legends_install_location(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchInstallPaths, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/products/league_of_legends/install-location".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_products_league_of_legends_state(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchProductState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/products/league_of_legends/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_products_league_of_legends_supported_game_releases(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchSupportedGameReleases, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/products/league_of_legends/supported-game-releases".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_patch_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolPatchStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-patch/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_currentpage(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/currentpage".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_customizationlimits(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksCustomizationLimits, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/customizationlimits".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_inventory(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPlayerInventory, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/inventory".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkPageResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/pages".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/pages/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_perks(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiPerk>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/perks".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_perks_disabled(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/perks/disabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_perks_gameplay_updated(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/perks/gameplay-updated".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_schema_version(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/schema-version".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_servicesettings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksServiceSettings, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/servicesettings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksUiSettings, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/show-auto-modified-pages-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_styles(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiStyle>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/styles".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_personalized_offers_v1_offers(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPersonalizedOffersUiOffer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-personalized-offers/v1/offers".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_personalized_offers_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolPersonalizedOffersUiStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-personalized-offers/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_personalized_offers_v1_themed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-personalized-offers/v1/themed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_pft_v2_survey(&self, ) -> Box<dyn Future<Item = crate::models::LolPftPftSurvey, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-pft/v2/survey".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_platform_config_v1_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-platform-config/v1/initial-configuration-complete".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_platform_config_v1_namespaces(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-platform-config/v1/namespaces".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_platform_config_v1_namespaces_by_ns(&self, ns: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-platform-config/v1/namespaces/{ns}".to_string())
        ;
        req = req.with_path_param("ns".to_string(), ns.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_platform_config_v1_namespaces_by_ns_by_key(&self, ns: &str, key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-platform-config/v1/namespaces/{ns}/{key}".to_string())
        ;
        req = req.with_path_param("ns".to_string(), ns.to_string());
        req = req.with_path_param("key".to_string(), key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_ban(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorBanNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/ban".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_chat_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/chat-restriction".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorPlayerBehaviorConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_ranked_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/ranked-restriction".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCard, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/reform-card".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_reporter_feedback(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPlayerBehaviorReporterFeedback>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/reporter-feedback".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/reporter-feedback/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v2_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCardV2, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v2/reform-card".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_level_up_v1_level_up(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEvent, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-level-up/v1/level-up".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str) -> Box<dyn Future<Item = crate::models::LolPlayerLevelUpPlayerLevelUpEventAck, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-level-up/v1/level-up-notifications/{pluginName}".to_string())
        ;
        req = req.with_path_param("pluginName".to_string(), plugin_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_messaging_v1_celebration_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerMessagingDynamicCelebrationMessagingNotificationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-messaging/v1/celebration/notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_messaging_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerMessagingPlayerMessagingNotificationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-messaging/v1/notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_preferences_v1_player_preferences_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-preferences/v1/player-preferences-ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_preferences_v1_preference_by_type(&self, _type: &str, hash: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-preferences/v1/preference/{type}".to_string())
        ;
        if let Some(ref s) = hash {
            req = req.with_query_param("hash".to_string(), s.to_string());
        }
        req = req.with_path_param("type".to_string(), _type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_pre_end_of_game_v1_current_sequence_event(&self, ) -> Box<dyn Future<Item = crate::models::LolPreEndOfGameSequenceEvent, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-pre-end-of-game/v1/currentSequenceEvent".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceVoiceAvailability, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/availability".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_capturedevices(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoiceDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/capturedevices".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_first_experience(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceFirstExperience, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/first-experience".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceAudioPropertiesResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/mic-test".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_participant_records(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/participant-records".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_participants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/participants".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_purchase_widget_v1_configuration(&self, ) -> Box<dyn Future<Item = crate::models::LolPurchaseWidgetPurchaseWidgetConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-purchase-widget/v1/configuration".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_purchase_widget_v1_order_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPurchaseWidgetOrderNotificationResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-purchase-widget/v1/order-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_purchase_widget_v1_purchasable_item(&self, inventory_type: &str, item_id: i64) -> Box<dyn Future<Item = crate::models::LolPurchaseWidgetPurchasableItem, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-purchase-widget/v1/purchasable-item".to_string())
        ;
        req = req.with_query_param("inventoryType".to_string(), inventory_type.to_string());
        req = req.with_query_param("itemId".to_string(), item_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_apex_leagues_by_queue_type_by_tier(&self, queue_type: &str, tier: &str) -> Box<dyn Future<Item = crate::models::LolRankedLeagueLadderInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/apex-leagues/{queueType}/{tier}".to_string())
        ;
        req = req.with_path_param("queueType".to_string(), queue_type.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_current_lp_change_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedLcuLeagueNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/current-lp-change-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_current_ranked_stats(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/current-ranked-stats".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_eos_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolRankedEosNotificationResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/eos-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_eos_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedEosRewardsConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/eos-rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_league_ladders_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = Vec<crate::models::LolRankedLeagueLadderInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/league-ladders/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolRankedLcuLeagueNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_ranked_stats(&self, puuids: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolRankedRankedStats>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/ranked-stats".to_string())
        ;
        req = req.with_query_param("puuids".to_string(), puuids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_ranked_stats_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolRankedRankedStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/ranked-stats/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_signed_ranked_stats(&self, ) -> Box<dyn Future<Item = crate::models::SignedRankedStatsDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/signed-ranked-stats".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v1_splits_config(&self, ) -> Box<dyn Future<Item = crate::models::LolRankedRewardsInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v1/splits-config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_ranked_v2_tiers(&self, summoner_ids: Vec<i64>, queue_types: Vec<crate::models::LolRankedLeagueQueueType>) -> Box<dyn Future<Item = Vec<crate::models::LolRankedParticipantTiers>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-ranked/v2/tiers".to_string())
        ;
        req = req.with_query_param("summonerIds".to_string(), summoner_ids.join(",").to_string());
        req = req.with_query_param("queueTypes".to_string(), queue_types.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_recommendations_v1_recommendations(&self, number_of_recommendations: Option<i32>) -> Box<dyn Future<Item = crate::models::LolRecommendationsRecommendationsCollection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-recommendations/v1/recommendations".to_string())
        ;
        if let Some(ref s) = number_of_recommendations {
            req = req.with_query_param("numberOfRecommendations".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_regalia_v2_config(&self, ) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaFrontendConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-regalia/v2/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_regalia_v2_current_summoner_regalia(&self, ) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaWithPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-regalia/v2/current-summoner/regalia".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_regalia_v2_summoners_by_summoner_id_queues_by_queue_positions_by_position_regalia(&self, summoner_id: i64, queue: &str, position: &str) -> Box<dyn Future<Item = crate::models::LolRegaliaRegalia, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-regalia/v2/summoners/{summonerId}/queues/{queue}/positions/{position}/regalia".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_regalia_v2_summoners_by_summoner_id_queues_by_queue_regalia(&self, summoner_id: i64, queue: &str) -> Box<dyn Future<Item = crate::models::LolRegaliaRegalia, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-regalia/v2/summoners/{summonerId}/queues/{queue}/regalia".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_regalia_v2_summoners_by_summoner_id_regalia(&self, summoner_id: i64, hovercard: bool) -> Box<dyn Future<Item = crate::models::LolRegaliaRegalia, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-regalia/v2/summoners/{summonerId}/regalia".to_string())
        ;
        req = req.with_query_param("hovercard".to_string(), hovercard.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_regalia_v2_summoners_by_summoner_id_regalia_async(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaAsync, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-regalia/v2/summoners/{summonerId}/regalia/async".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_replays_v1_configuration(&self, ) -> Box<dyn Future<Item = crate::models::LolReplaysReplaysConfiguration, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/configuration".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_replays_v1_metadata_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = crate::models::LolReplaysReplayMetadata, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/metadata/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_replays_v1_rofls_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/rofls/path".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_replays_v1_rofls_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-replays/v1/rofls/path/default".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rms_v1_champion_mastery_leaveup_update(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolRiotMessagingServiceChampionMasteryLevelUp>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rms/v1/champion-mastery-leaveup-update".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthHint, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/auth-hints/hint".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_access_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAccessToken, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/access-token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_error(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthError, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/error".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_id_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthIdToken, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/id-token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/userinfo".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_status_by_platform_id(&self, platform_id: &str) -> Box<dyn Future<Item = crate::models::LolRsoAuthRegionStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/status/{platformId}".to_string())
        ;
        req = req.with_path_param("platformId".to_string(), platform_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_service_status_v1_lcu_status(&self, ) -> Box<dyn Future<Item = crate::models::LolServiceStatusServiceStatusResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-service-status/v1/lcu-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_service_status_v1_ticker_messages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolServiceStatusTickerMessage>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-service-status/v1/ticker-messages".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_settings_v1_account_by_category(&self, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-settings/v1/account/{category}".to_string())
        ;
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_settings_v1_account_didreset(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-settings/v1/account/didreset".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_settings_v1_local_by_category(&self, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-settings/v1/local/{category}".to_string())
        ;
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_settings_v2_account_by_pp_type_by_category(&self, pp_type: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-settings/v2/account/{ppType}/{category}".to_string())
        ;
        req = req.with_path_param("ppType".to_string(), pp_type.to_string());
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_settings_v2_didreset_by_pp_type(&self, pp_type: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-settings/v2/didreset/{ppType}".to_string())
        ;
        req = req.with_path_param("ppType".to_string(), pp_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_settings_v2_local_by_category(&self, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-settings/v2/local/{category}".to_string())
        ;
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_settings_v2_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-settings/v2/ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_shutdown_v1_notification(&self, ) -> Box<dyn Future<Item = crate::models::LolShutdownShutdownNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-shutdown/v1/notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_simple_dialog_messages_v1_messages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSimpleDialogMessagesMessage>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-simple-dialog-messages/v1/messages".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_spectator_v1_spectate(&self, ) -> Box<dyn Future<Item = crate::models::LolSpectatorSpectateGameInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-spectator/v1/spectate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v1_eog_notifications(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v1/eog-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v1_featured_champion_statstones_by_champion_item_id(&self, champion_item_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesStatstone>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v1/featured-champion-statstones/{championItemId}".to_string())
        ;
        req = req.with_path_param("championItemId".to_string(), champion_item_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v1_profile_summary_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesProfileStatstoneSummary>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v1/profile-summary/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v1_statstone_by_content_id_owned(&self, content_id: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v1/statstone/{contentId}/owned".to_string())
        ;
        req = req.with_path_param("contentId".to_string(), content_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v1_statstones_enabled_queue_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v1/statstones-enabled-queue-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v1_vignette_notifications(&self, ) -> Box<dyn Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v1/vignette-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v2_player_statstones_self_by_champion_item_id(&self, champion_item_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesStatstoneSet>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v2/player-statstones-self/{championItemId}".to_string())
        ;
        req = req.with_path_param("championItemId".to_string(), champion_item_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_statstones_v2_player_summary_self(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStatstonesChampionStatstoneSummary>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-statstones/v2/player-summary-self".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_by_page_type(&self, page_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/{pageType}".to_string())
        ;
        req = req.with_path_param("pageType".to_string(), page_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog(&self, inventory_type: Option<Vec<String>>, item_id: Option<Vec<i32>>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCatalogItem>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/catalog".to_string())
        ;
        if let Some(ref s) = inventory_type {
            req = req.with_query_param("inventoryType".to_string(), s.join(",").to_string());
        }
        if let Some(ref s) = item_id {
            req = req.with_query_param("itemId".to_string(), s.join(",").to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog_by_instance_ids(&self, instance_ids: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCatalogItem>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/catalogByInstanceIds".to_string())
        ;
        req = req.with_query_param("instanceIds".to_string(), instance_ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog_by_inventory_type(&self, inventory_type: &str, item_ids: Vec<i32>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCatalogItem>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/catalog/{inventoryType}".to_string())
        ;
        req = req.with_query_param("itemIds".to_string(), item_ids.join(",").to_string());
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_catalog_sales(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStoreItemSale>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/catalog/sales".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_get_store_url(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/getStoreUrl".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_giftablefriends(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStoreGiftingFriend>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/giftablefriends".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_item_keys_from_instance_ids(&self, instance_ids: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::LolStoreItemKey>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/itemKeysFromInstanceIds".to_string())
        ;
        req = req.with_query_param("instanceIds".to_string(), instance_ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_last_page(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/lastPage".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_offers(&self, inventory_type_uui_ds: Option<Vec<String>>) -> Box<dyn Future<Item = Vec<crate::models::LolStoreCapOffer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/offers".to_string())
        ;
        if let Some(ref s) = inventory_type_uui_ds {
            req = req.with_query_param("inventoryTypeUUIDs".to_string(), s.join(",").to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_order_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolStoreOrderNotificationResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/order-notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_order_notifications_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolStoreOrderNotificationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/order-notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_payment_details(&self, action: &str, gift_recipient_account_id: Option<i64>, gift_message: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/paymentDetails".to_string())
        ;
        req = req.with_query_param("action".to_string(), action.to_string());
        if let Some(ref s) = gift_recipient_account_id {
            req = req.with_query_param("giftRecipientAccountId".to_string(), s.to_string());
        }
        if let Some(ref s) = gift_message {
            req = req.with_query_param("giftMessage".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_skins_by_skin_id(&self, skin_id: i32) -> Box<dyn Future<Item = crate::models::LolStoreCatalogItem, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/skins/{skinId}".to_string())
        ;
        req = req.with_path_param("skinId".to_string(), skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolStoreStoreStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_store_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/store-ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_store_v1_wallet(&self, ) -> Box<dyn Future<Item = crate::models::LolStoreWallet, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-store/v1/wallet".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_suggested_players_v1_suggested_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSuggestedPlayersSuggestedPlayersSuggestedPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-suggested-players/v1/suggested-players".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_check_name_availability_by_name(&self, name: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/check-name-availability/{name}".to_string())
        ;
        req = req.with_path_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_check_name_availability_new_summoners_by_name(&self, name: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/check-name-availability-new-summoners/{name}".to_string())
        ;
        req = req.with_path_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_current_summoner(&self, ) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/current-summoner".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_current_summoner_autofill(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerAutoFillQueueDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/current-summoner/autofill".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_current_summoner_jwt(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/current-summoner/jwt".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_current_summoner_reroll_points(&self, ) -> Box<dyn Future<Item = crate::models::LolSummonerSummonerRerollPoints, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/current-summoner/rerollPoints".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_current_summoner_summoner_profile(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/current-summoner/summoner-profile".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::LolSummonerStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_summoner_profile(&self, puuid: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/summoner-profile".to_string())
        ;
        req = req.with_query_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_summoner_requests_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/summoner-requests-ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_summoners(&self, name: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/summoners".to_string())
        ;
        req = req.with_query_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_summoners_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/summoners/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v1_summoners_by_puuid_cached_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v1/summoners-by-puuid-cached/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v2_summoner_icons(&self, ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummonerIdAndIcon>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v2/summoner-icons".to_string())
        ;
        req = req.with_query_param("ids".to_string(), ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v2_summoner_names(&self, ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummonerIdAndName>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v2/summoner-names".to_string())
        ;
        req = req.with_query_param("ids".to_string(), ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v2_summoners(&self, ids: Option<Vec<i64>>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummoner>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v2/summoners".to_string())
        ;
        if let Some(ref s) = ids {
            req = req.with_query_param("ids".to_string(), s.join(",").to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_lol_summoner_v2_summoners_puuid_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-summoner/v2/summoners/puuid/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_tastes_v1_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-tastes/v1/ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_tastes_v1_skins_model(&self, ) -> Box<dyn Future<Item = crate::models::LolTastesDataModelResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-tastes/v1/skins-model".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_tft_v2_tft_battlepass(&self, ) -> Box<dyn Future<Item = crate::models::LolMissionsTftPaidBattlepass, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-tft/v2/tft/battlepass".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_token_upsell_v1_all(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolWorldsTokenCardTokenUpsell>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-token-upsell/v1/all".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_trophies_v1_current_summoner_trophies_profile(&self, ) -> Box<dyn Future<Item = crate::models::LolTrophiesTrophyProfileData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-trophies/v1/current-summoner/trophies/profile".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_trophies_v1_players_by_puuid_trophies_profile(&self, puuid: &str) -> Box<dyn Future<Item = crate::models::LolTrophiesTrophyProfileData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-trophies/v1/players/{puuid}/trophies/profile".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PatcherNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_p2p_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherP2PStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/p2p/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products_by_product_id_paths(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products/{product-id}/paths".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products_by_product_id_state(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products/{product-id}/state".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products_by_product_id_tags(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products/{product-id}/tags".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_player_notifications_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationConfigResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/player-notifications/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_player_notifications_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerNotificationsPlayerNotificationResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/player-notifications/v1/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_player_notifications_v1_notifications_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/player-notifications/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_plugin_manager_v1_external_plugins_availability(&self, ) -> Box<dyn Future<Item = crate::models::ExternalPluginsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugin-manager/v1/external-plugins/availability".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_plugin_manager_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::PluginManagerResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugin-manager/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_plugin_manager_v2_descriptions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PluginDescriptionResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugin-manager/v2/descriptions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_plugin_manager_v2_descriptions_by_plugin(&self, plugin: &str) -> Box<dyn Future<Item = crate::models::PluginDescriptionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugin-manager/v2/descriptions/{plugin}".to_string())
        ;
        req = req.with_path_param("plugin".to_string(), plugin.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_plugin_manager_v2_plugins(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PluginResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugin-manager/v2/plugins".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_plugin_manager_v2_plugins_by_plugin(&self, plugin: &str) -> Box<dyn Future<Item = crate::models::PluginResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugin-manager/v2/plugins/{plugin}".to_string())
        ;
        req = req.with_path_param("plugin".to_string(), plugin.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_plugin_manager_v3_plugins_manifest(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugin-manager/v3/plugins-manifest".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::RecofrienderConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v1_config_by_network(&self, network: &str) -> Box<dyn Future<Item = crate::models::RecofrienderNetworkConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v1/config/{network}".to_string())
        ;
        req = req.with_path_param("network".to_string(), network.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v1_contacts(&self, account_id: Option<i64>, source: Option<&str>, friend_state: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderContactResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v1/contacts".to_string())
        ;
        if let Some(ref s) = account_id {
            req = req.with_query_param("accountId".to_string(), s.to_string());
        }
        if let Some(ref s) = source {
            req = req.with_query_param("source".to_string(), s.to_string());
        }
        if let Some(ref s) = friend_state {
            req = req.with_query_param("friendState".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v1_debug(&self, ) -> Box<dyn Future<Item = crate::models::RecofrienderDebugConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v1/debug".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v1_faq_url(&self, ) -> Box<dyn Future<Item = crate::models::RecofrienderUrlResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v1/faq-url".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v1_registrations(&self, cb: Option<&str>) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderLinkResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v1/registrations".to_string())
        ;
        if let Some(ref s) = cb {
            req = req.with_query_param("cb".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v1_registrations_by_network(&self, network: &str) -> Box<dyn Future<Item = crate::models::RecofrienderLinkResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v1/registrations/{network}".to_string())
        ;
        req = req.with_path_param("network".to_string(), network.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v2_contacts(&self, ) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderContactResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v2/contacts".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v2_contacts_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::RecofrienderContactResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v2/contacts/{accountId}".to_string())
        ;
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v2_contacts_page(&self, start: i64, limit: i64) -> Box<dyn Future<Item = crate::models::RecofrienderContactPaginationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v2/contacts/page".to_string())
        ;
        req = req.with_query_param("start".to_string(), start.to_string());
        req = req.with_query_param("limit".to_string(), limit.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v2_dismissed(&self, ) -> Box<dyn Future<Item = Vec<crate::models::RecofrienderContactResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v2/dismissed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_recofriender_v2_dismissed_page(&self, start: i64, limit: i64) -> Box<dyn Future<Item = crate::models::RecofrienderContactPaginationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/recofriender/v2/dismissed/page".to_string())
        ;
        req = req.with_query_param("start".to_string(), start.to_string());
        req = req.with_query_param("limit".to_string(), limit.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a(&self, a: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b(&self, a: &str, b: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c(&self, a: &str, b: &str, c: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d(&self, a: &str, b: &str, c: &str, d: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());
        req = req.with_path_param("d".to_string(), d.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e(&self, a: &str, b: &str, c: &str, d: &str, e: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());
        req = req.with_path_param("d".to_string(), d.to_string());
        req = req.with_path_param("e".to_string(), e.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e_by_f(&self, a: &str, b: &str, c: &str, d: &str, e: &str, f: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());
        req = req.with_path_param("d".to_string(), d.to_string());
        req = req.with_path_param("e".to_string(), e.to_string());
        req = req.with_path_param("f".to_string(), f.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_state(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_sanitizer_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::SanitizerSanitizerStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/sanitizer/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_audio_properties(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatAudioPropertiesResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/audio-properties".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_call_stats_aggregate(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCallStatsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/call-stats/aggregate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_call_stats_by_id(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatCallStatsResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/call-stats/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_codec_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCodecSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/codec-settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatConfigResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatVoiceErrorCounterResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/errors".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_push_to_talk(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatPushToTalkResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/push-to-talk".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_devices_capture(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/devices/capture".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_devices_capture_permission(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCaptureDevicePermissionStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/devices/capture/permission".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_devices_render(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/devices/render".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatSessionResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/sessions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatParticipantResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}".to_string())
        ;
        req = req.with_path_param("sessionId".to_string(), session_id.to_string());
        req = req.with_path_param("participantId".to_string(), participant_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_state(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatStateResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn head_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Head, "/{plugin}/assets/{path}".to_string())
        ;
        req = req.with_path_param("plugin".to_string(), plugin.to_string());
        req = req.with_path_param("path".to_string(), path.to_string());
        if let Some(param_value) = if_none_match {
            req = req.with_header_param("if-none-match".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_legacy_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectLegacyChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select-legacy/v1/session/actions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_legacy_v1_session_my_selection(&self, selection: crate::models::LolChampSelectLegacyChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select-legacy/v1/session/my-selection".to_string())
        ;
        req = req.with_body_param(selection);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_v1_session_actions_by_id(&self, id: i64, data: crate::models::LolChampSelectChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select/v1/session/actions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_champ_select_v1_session_my_selection(&self, selection: crate::models::LolChampSelectChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-champ-select/v1/session/my-selection".to_string())
        ;
        req = req.with_body_param(selection);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str, tag: crate::models::LolClubsClubTag) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/{clubKey}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_body_param(tag);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str, motd: crate::models::LolClubsClubMotd) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/{clubKey}/motd".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_body_param(motd);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_invitations(&self, invitation: crate::models::LolClubsClubInvite) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/invitations".to_string())
        ;
        req = req.with_body_param(invitation);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_membership_preferences(&self, preferences: crate::models::LolClubsClubPreferences) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/membership/preferences".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_game_settings_v1_game_settings(&self, settings_resource: serde_json::Value) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-game-settings/v1/game-settings".to_string())
        ;
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_game_settings_v1_input_settings(&self, settings_resource: serde_json::Value) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-game-settings/v1/input-settings".to_string())
        ;
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_loadouts_v4_loadouts_by_id(&self, id: &str, loadout: crate::models::LolLoadoutsUpdateLoadoutDto) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-loadouts/v4/loadouts/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(loadout);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_lobby_team_builder_champ_select_v1_session_actions_by_id(&self, id: i32, data: crate::models::LolLobbyTeamBuilderChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-lobby-team-builder/champ-select/v1/session/actions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_lobby_team_builder_champ_select_v1_session_my_selection(&self, selection: crate::models::LolLobbyTeamBuilderChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-lobby-team-builder/champ-select/v1/session/my-selection".to_string())
        ;
        req = req.with_body_param(selection);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_missions_v1_grants_by_grant_id_viewed(&self, grant_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-missions/v1/grants/{grantId}/viewed".to_string())
        ;
        req = req.with_path_param("grantId".to_string(), grant_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_npe_tutorial_path_v1_tutorials_init(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-npe-tutorial-path/v1/tutorials/init".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_settings_v1_account_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-settings/v1/account/{category}".to_string())
        ;
        req = req.with_path_param("category".to_string(), category.to_string());
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_settings_v1_local_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-settings/v1/local/{category}".to_string())
        ;
        req = req.with_path_param("category".to_string(), category.to_string());
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_settings_v2_account_by_pp_type_by_category(&self, pp_type: &str, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-settings/v2/account/{ppType}/{category}".to_string())
        ;
        req = req.with_path_param("ppType".to_string(), pp_type.to_string());
        req = req.with_path_param("category".to_string(), category.to_string());
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_settings_v2_local_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-settings/v2/local/{category}".to_string())
        ;
        req = req.with_path_param("category".to_string(), category.to_string());
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn patch_patcher_v1_p2p_status(&self, data: crate::models::PatcherP2PStatusUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/patcher/v1/p2p/status".to_string())
        ;
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn post_gcloud_voice_chat_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/gcloud-voice-chat/v1/push-to-talk/check-available".to_string())
        ;
        req = req.with_body_param(prompt);

        req.execute(self.configuration.borrow())
    }

    fn post_gcloud_voice_chat_v1_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/gcloud-voice-chat/v1/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_gcloud_voice_chat_v2_sessions(&self, JWT: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/gcloud-voice-chat/v2/sessions".to_string())
        ;
        req = req.with_header_param("JWT".to_string(), JWT.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_gcloud_voice_chat_v2_sessions_by_id(&self, id: &str, JWT: &str) -> Box<dyn Future<Item = crate::models::GcloudVoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/gcloud-voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_header_param("JWT".to_string(), JWT.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_authenticate(&self, authenticate_request: crate::models::LolAccountVerificationAuthenticateRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationAuthenticateResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/authenticate".to_string())
        ;
        req = req.with_body_param(authenticate_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_invalidate(&self, ) -> Box<dyn Future<Item = crate::models::LolAccountVerificationInvalidateResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/invalidate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_send_token(&self, send_token_request: crate::models::LolAccountVerificationSendTokenRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationSendTokenResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/send-token".to_string())
        ;
        req = req.with_body_param(send_token_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_account_verification_v1_verify(&self, verify_request: crate::models::LolAccountVerificationVerifyRequest) -> Box<dyn Future<Item = crate::models::LolAccountVerificationVerifyResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-account-verification/v1/verify".to_string())
        ;
        req = req.with_body_param(verify_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_acs_v1_acs_endpoint_override(&self, data: crate::models::LolAcsAcsEndPoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-acs/v1/acs-endpoint-override".to_string())
        ;
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_career_stats_v1_champion_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-career-stats/v1/champion-stats-percentiles".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_career_stats_v1_position_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsPositionStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-career-stats/v1/position-stats-percentiles".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/battle-training/launch".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/actions/{id}/complete".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/my-selection/reroll".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/cancel".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectLegacyChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/session/trades/{id}/request".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_legacy_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select-legacy/v1/team-boost/purchase".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_battle_training_launch(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/battle-training/launch".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/retrieve-latest-game-dto".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_actions_by_id_complete(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/actions/{id}/complete".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/bench/swap/{championId}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/my-selection/reroll".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/report-player/{id}/{category}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_simple_inventory(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/simple-inventory".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_accept(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_cancel(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/cancel".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_decline(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_session_trades_by_id_request(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolChampSelectChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/session/trades/{id}/request".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/team-boost/purchase".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_toggle_favorite_by_champion_id_by_position(&self, champion_id: i64, position: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/toggle-favorite/{championId}/{position}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_champ_select_v1_toggle_player_muted(&self, player: crate::models::LolChampSelectMutedPlayerInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-champ-select/v1/toggle-player-muted".to_string())
        ;
        req = req.with_body_param(player);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_blocked_players(&self, blocked: crate::models::LolChatBlockedPlayerResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/blocked-players".to_string())
        ;
        req = req.with_body_param(blocked);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_conversations(&self, conversation: crate::models::LolChatConversationResource) -> Box<dyn Future<Item = crate::models::LolChatConversationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/conversations".to_string())
        ;
        req = req.with_body_param(conversation);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_conversations_by_id_closed(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/conversations/{id}/closed".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_conversations_by_id_messages(&self, id: &str, body: crate::models::LolChatConversationMessageResource) -> Box<dyn Future<Item = crate::models::LolChatConversationMessageResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/conversations/{id}/messages".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_conversations_by_id_participants(&self, id: &str, invitee: crate::models::LolChatUserResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/conversations/{id}/participants".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(invitee);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_friend_groups(&self, group: crate::models::LolChatGroupResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/friend-groups".to_string())
        ;
        req = req.with_body_param(group);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_friend_requests(&self, request: crate::models::LolChatFriendRequestResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/friend-requests".to_string())
        ;
        req = req.with_body_param(request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_session_plain(&self, auth: crate::models::LolChatAuthResourcePlain) -> Box<dyn Future<Item = crate::models::LolChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/session/plain".to_string())
        ;
        req = req.with_body_param(auth);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_chat_v1_session_rso(&self, auth: crate::models::LolChatAuthResourceRsoAccessToken) -> Box<dyn Future<Item = crate::models::LolChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-chat/v1/session/rso".to_string())
        ;
        req = req.with_body_param(auth);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_eog_player_update_acknowledge(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/eog-player-update/acknowledge".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_events(&self, uuids: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, crate::models::ClashEventData>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/events".to_string())
        ;
        req = req.with_body_param(uuids);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_game_end_acknowledge(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/game-end/acknowledge".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_notifications_acknowledge(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/notifications/acknowledge".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_refresh(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/refresh".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_accept(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/accept".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_cancel_withdraw(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/cancel-withdraw".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_all_details(&self, roster_id: &str, roster_details: crate::models::LolClashRosterDetails) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/change-all-details".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(roster_details);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_icon(&self, roster_id: &str, change_icon_request: crate::models::LolClashChangeIconRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/change-icon".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(change_icon_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_name(&self, roster_id: &str, change_name_request: crate::models::LolClashChangeNameRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/change-name".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(change_name_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_short_name(&self, roster_id: &str, change_name_request: crate::models::LolClashChangeNameRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/change-short-name".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(change_name_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_decline(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/decline".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_disband(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/disband".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_invite(&self, roster_id: &str, summoner_ids: Vec<i64>) -> Box<dyn Future<Item = Vec<crate::models::LolClashClientFailedInvite>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/invite".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(summoner_ids);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_kick(&self, roster_id: &str, kick_request: crate::models::LolClashKickRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/kick".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(kick_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_leave(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/leave".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_lockin(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/lockin".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_set_position(&self, roster_id: &str, set_position_request: crate::models::LolClashSetPositionRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/set-position".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(set_position_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_set_ticket(&self, roster_id: &str, set_ticket_request: crate::models::LolClashSetTicketRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/set-ticket".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(set_ticket_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_accept(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/substitute/accept".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_by_summoner_id_revoke(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/substitute/{summonerId}/revoke".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_decline(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/substitute/decline".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_invite(&self, roster_id: &str, invite_sub_request: crate::models::LolClashInviteSubRequest) -> Box<dyn Future<Item = Vec<crate::models::LolClashClientFailedInvite>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/substitute/invite".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(invite_sub_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_reclaim(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/substitute/reclaim".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_accept(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/accept".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_decline(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/decline".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_offer(&self, roster_id: &str, summoner_id: i64, offer_ticket_request: crate::models::LolClashOfferTicketRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/offer".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(offer_ticket_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_revoke(&self, roster_id: &str, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/revoke".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_transfer_captain(&self, roster_id: &str, new_captain_summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/transfer-captain".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(new_captain_summoner_id);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_unlockin(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/unlockin".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_unwithdraw(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/unwithdraw".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_update_logos(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/update-logos".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_withdraw(&self, roster_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/roster/{rosterId}/withdraw".to_string())
        ;
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_simple_state_flags_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/simple-state-flags/{id}/acknowledge".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_tournament_by_tournament_id_create_roster(&self, tournament_id: i64, roster_details: crate::models::LolClashRosterDetails) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/tournament/{tournamentId}/create-roster".to_string())
        ;
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());
        req = req.with_body_param(roster_details);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_update_logos(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/update-logos".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_voice(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/voice".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_voice_delay_by_delay_seconds(&self, delay_seconds: f64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clash/v1/voice-delay/{delaySeconds}".to_string())
        ;
        req = req.with_path_param("delaySeconds".to_string(), delay_seconds.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/invitations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/members/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/nominations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/promotions/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_view(&self, club_key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/view".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_membership(&self, name: crate::models::LolClubsClubName) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/membership".to_string())
        ;
        req = req.with_body_param(name);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_email_verification_v1_confirm_email(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-email-verification/v1/confirm-email".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_end_of_game_v1_gameclient_eog_stats_block(&self, stats: crate::models::LolEndOfGameGameClientEndOfGameStats) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-end-of-game/v1/gameclient-eog-stats-block".to_string())
        ;
        req = req.with_body_param(stats);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_end_of_game_v1_state_dismiss_stats(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-end-of-game/v1/state/dismiss-stats".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_end_of_game_v2_player_complaints(&self, complaint: crate::models::LolEndOfGameEndOfGamePlayerComplaintV2) -> Box<dyn Future<Item = crate::models::LolEndOfGameEndOfGamePlayerComplaintV2, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-end-of-game/v2/player-complaints".to_string())
        ;
        req = req.with_body_param(complaint);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_esport_stream_notifications_v1_send_stats(&self, event_type: &str, match_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-esport-stream-notifications/v1/send-stats".to_string())
        ;
        req = req.with_path_param("eventType".to_string(), event_type.to_string());
        req = req.with_path_param("matchId".to_string(), match_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_game_client_chat_v1_instant_messages(&self, summoner_name: &str, message: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-game-client-chat/v1/instant-messages".to_string())
        ;
        req = req.with_query_param("summonerName".to_string(), summoner_name.to_string());
        req = req.with_query_param("message".to_string(), message.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_game_client_chat_v1_party_messages(&self, message: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-game-client-chat/v1/party-messages".to_string())
        ;
        req = req.with_query_param("message".to_string(), message.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_game_settings_v1_reload_post_game(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-game-settings/v1/reload-post-game".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_game_settings_v1_save(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-game-settings/v1/save".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_ack_failed_to_launch(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/ack-failed-to-launch".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_basic_tutorial_start(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/basic-tutorial/start".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_battle_training_start(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/battle-training/start".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_battle_training_stop(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/battle-training/stop".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_client_received_message(&self, messsage: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/client-received-message".to_string())
        ;
        req = req.with_body_param(messsage);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_early_exit(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/early-exit".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_extra_game_client_args(&self, extra_game_client_args: Vec<String>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/extra-game-client-args".to_string())
        ;
        req = req.with_body_param(extra_game_client_args);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_gameflow_metadata_player_status(&self, player_status: crate::models::LolGameflowPlayerStatus) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/gameflow-metadata/player-status".to_string())
        ;
        req = req.with_body_param(player_status);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_gameflow_metadata_registration_status(&self, registration_status: crate::models::LolGameflowRegistrationStatus) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/gameflow-metadata/registration-status".to_string())
        ;
        req = req.with_body_param(registration_status);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_pre_end_game_transition(&self, enabled: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/pre-end-game-transition".to_string())
        ;
        req = req.with_query_param("enabled".to_string(), enabled.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_reconnect(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/reconnect".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_session_dodge(&self, dodge_data: crate::models::LolGameflowGameflowGameDodge) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/session/dodge".to_string())
        ;
        req = req.with_body_param(dodge_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_session_event(&self, session: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/session/event".to_string())
        ;
        req = req.with_body_param(session);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_session_game_configuration(&self, queue: crate::models::LolGameflowQueue) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/session/game-configuration".to_string())
        ;
        req = req.with_body_param(queue);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_session_request_enter_gameflow(&self, event_type: &str) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/session/request-enter-gameflow".to_string())
        ;
        req = req.with_body_param(event_type);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_session_request_lobby(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/session/request-lobby".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_session_request_tournament_checkin(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/session/request-tournament-checkin".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_session_tournament_ended(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/session/tournament-ended".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_spectate_launch(&self, target_summoner_name: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/spectate/launch".to_string())
        ;
        req = req.with_body_param(target_summoner_name);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_spectate_quit(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/spectate/quit".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_tick(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/tick".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v1_watch_launch(&self, args: Vec<String>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v1/watch/launch".to_string())
        ;
        req = req.with_body_param(args);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_gameflow_v2_spectate_launch(&self, args: crate::models::LolGameflowSpectateGameInfoResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-gameflow/v2/spectate/launch".to_string())
        ;
        req = req.with_body_param(args);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_highlights_v1_file_browser_by_highlight_id(&self, highlight_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-highlights/v1/file-browser/{highlightId}".to_string())
        ;
        req = req.with_path_param("highlightId".to_string(), highlight_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-highlights/v1/highlights".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_honor_player(&self, honor_player_request: crate::models::LolHonorV2ApiHonorPlayerServerRequest) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/honor-player".to_string())
        ;
        req = req.with_body_param(honor_player_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_late_recognition_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/late-recognition/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_level_change_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/level-change/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_mutual_honor_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/mutual-honor/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_reward_granted_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/reward-granted/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_inventory_v1_notification_acknowledge(&self, id: i64) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-inventory/v1/notification/acknowledge".to_string())
        ;
        req = req.with_body_param(id);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_set: crate::models::LolItemSetsItemSet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-item-sets/v1/item-sets/{summonerId}/sets".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(item_set);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_item_sets_v1_item_sets_by_summoner_id_validate(&self, summoner_id: i64, input: crate::models::LolItemSetsValidateItemSetNameInput) -> Box<dyn Future<Item = crate::models::LolItemSetsValidateItemSetNameResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-item-sets/v1/item-sets/{summonerId}/validate".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(input);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_kr_shutdown_law_v1_rating_screen_acknowledge(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-kr-shutdown-law/v1/rating-screen/acknowledge".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_license_agreement_v1_agreements_by_id_accept(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-license-agreement/v1/agreements/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_license_agreement_v1_agreements_by_id_decline(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-license-agreement/v1/agreements/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loadouts_v4_loadouts(&self, loadout: crate::models::LolLoadoutsCreateLoadoutDto) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loadouts/v4/loadouts".to_string())
        ;
        req = req.with_body_param(loadout);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/report-player/{id}/{category}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/retrieve-latest-game-dto".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_actions_by_id_complete(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/actions/{id}/complete".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/bench/swap/{championId}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/my-selection/reroll".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_accept(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_cancel(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/cancel".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_decline(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_request(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/request".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_simple_inventory(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/simple-inventory".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/team-boost/purchase".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_invitations_accept(&self, invitation: crate::models::LolLobbyTeamBuilderLobbyInvitation) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/invitations/accept".to_string())
        ;
        req = req.with_body_param(invitation);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_lobby(&self, lobby: crate::models::LolLobbyTeamBuilderLobby) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/lobby".to_string())
        ;
        req = req.with_body_param(lobby);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_kick(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/lobby/members/{id}/kick".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_promote(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/lobby/members/{id}/promote".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_matchmaking_low_priority_queue_abandon(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/matchmaking/low-priority-queue/abandon".to_string())
        ;
        req = req.with_body_param(leaver_buster_token);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_matchmaking_search(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/matchmaking/search".to_string())
        ;
        req = req.with_body_param(leaver_buster_token);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_ready_check_accept(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/ready-check/accept".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_ready_check_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/ready-check/decline".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v2_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferencesV2) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v2/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_clash(&self, token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/clash".to_string())
        ;
        req = req.with_body_param(token);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_custom_games_by_id_join(&self, id: i64, parameters: crate::models::LolLobbyLobbyCustomJoinParameters) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/custom-games/{id}/join".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(parameters);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_custom_games_refresh(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/custom-games/refresh".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_bots(&self, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/bots".to_string())
        ;
        req = req.with_body_param(parameters);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}".to_string())
        ;
        req = req.with_path_param("summonerInternalName".to_string(), summoner_internal_name.to_string());
        req = req.with_body_param(parameters);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_cancel_champ_select(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/cancel-champ-select".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_start_champ_select(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomChampSelectStartResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/start-champ-select".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_switch_teams(&self, team: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/switch-teams".to_string())
        ;
        if let Some(ref s) = team {
            req = req.with_query_param("team".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_invitations(&self, invitation: crate::models::LolLobbyLobbyInvitation) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/invitations".to_string())
        ;
        req = req.with_body_param(invitation);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_tournaments_by_id_join(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/tournaments/{id}/join".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_eligibility_party(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/eligibility/party".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_eligibility_self(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/eligibility/self".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_eog_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/eog-invitations".to_string())
        ;
        req = req.with_body_param(invitations);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby".to_string())
        ;
        req = req.with_body_param(lobby_change);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/invitations".to_string())
        ;
        req = req.with_body_param(invitations);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/matchmaking/search".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_grant_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/grant-invite".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_kick(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/kick".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_promote(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/promote".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_revoke_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/revoke-invite".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_matchmaking_quick_search(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/matchmaking/quick-search".to_string())
        ;
        req = req.with_body_param(lobby_change);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_notifications(&self, notification: crate::models::LolLobbyLobbyNotification) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/notifications".to_string())
        ;
        req = req.with_body_param(notification);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_parties_overrides_enabled(&self, enabled: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/parties/overrides/Enabled".to_string())
        ;
        req = req.with_query_param("enabled".to_string(), enabled.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_parties_overrides_enabled_for_team_builder_queues(&self, enabled_for_teambuilder_queues: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/parties/overrides/EnabledForTeamBuilderQueues".to_string())
        ;
        req = req.with_query_param("enabledForTeambuilderQueues".to_string(), enabled_for_teambuilder_queues.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_party_by_party_id_join(&self, party_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/party/{partyId}/join".to_string())
        ;
        req = req.with_path_param("partyId".to_string(), party_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_play_again(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/play-again".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_play_again_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/play-again-decline".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_received_invitations_by_invitation_id_accept(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/received-invitations/{invitationId}/accept".to_string())
        ;
        req = req.with_path_param("invitationId".to_string(), invitation_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_received_invitations_by_invitation_id_decline(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/received-invitations/{invitationId}/decline".to_string())
        ;
        req = req.with_path_param("invitationId".to_string(), invitation_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_account_state(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/account-state".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_change_summoner_name(&self, name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/change-summoner-name".to_string())
        ;
        req = req.with_body_param(name);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_delete_rso_on_close(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/delete-rso-on-close".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_league_session_status(&self, league_session: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/leagueSessionStatus".to_string())
        ;
        req = req.with_body_param(league_session);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_new_player_flow_completed(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/new-player-flow-completed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_service_proxy_async_requests_by_service_name_by_method_name(&self, service_name: &str, method_name: &str, plugin_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/service-proxy-async-requests/{serviceName}/{methodName}".to_string())
        ;
        req = req.with_query_param("pluginId".to_string(), plugin_id.to_string());
        req = req.with_path_param("serviceName".to_string(), service_name.to_string());
        req = req.with_path_param("methodName".to_string(), method_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_service_proxy_uuid_requests(&self, service_name: &str, method_name: &str, plugin_id: i32, timeout_millis: i64, payload: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/service-proxy-uuid-requests".to_string())
        ;
        req = req.with_query_param("serviceName".to_string(), service_name.to_string());
        req = req.with_query_param("methodName".to_string(), method_name.to_string());
        req = req.with_query_param("pluginId".to_string(), plugin_id.to_string());
        req = req.with_query_param("timeoutMillis".to_string(), timeout_millis.to_string());
        req = req.with_query_param("payload".to_string(), payload.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_session(&self, username_and_password: crate::models::LolLoginUsernameAndPassword) -> Box<dyn Future<Item = crate::models::LolLoginLoginSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/session".to_string())
        ;
        req = req.with_body_param(username_and_password);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_session_invoke(&self, destination: &str, method: &str, UNKNOWN_BASE_TYPE: crate::models::UNKNOWN_BASE_TYPE) -> Box<dyn Future<Item = crate::models::LolLoginLcdsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/session/invoke".to_string())
        ;
        req = req.with_query_param("destination".to_string(), destination.to_string());
        req = req.with_query_param("method".to_string(), method.to_string());
        req = req.with_body_param(UNKNOWN_BASE_TYPE);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_login_v1_summoner_created(&self, summoner_id: crate::models::LolLoginSummonerCreatedResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-login/v1/summoner-created".to_string())
        ;
        req = req.with_body_param(summoner_id);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_new_player_check_done_by_new_value(&self, new_value: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/new-player-check-done/{newValue}".to_string())
        ;
        req = req.with_path_param("newValue".to_string(), new_value.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_player_loot_by_loot_id_context_menu(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootContextMenu>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/player-loot/{lootId}/context-menu".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_player_loot_by_loot_name_redeem(&self, loot_name: &str) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/player-loot/{lootName}/redeem".to_string())
        ;
        req = req.with_path_param("lootName".to_string(), loot_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_player_loot_notifications_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/player-loot-notifications/{id}/acknowledge".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_recipes_by_recipe_name_craft(&self, recipe_name: &str, player_loot_list: Vec<String>, repeat: Option<i32>) -> Box<dyn Future<Item = crate::models::LolLootPlayerLootUpdate, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/recipes/{recipeName}/craft".to_string())
        ;
        if let Some(ref s) = repeat {
            req = req.with_query_param("repeat".to_string(), s.to_string());
        }
        req = req.with_path_param("recipeName".to_string(), recipe_name.to_string());
        req = req.with_body_param(player_loot_list);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_recipes_initial_item_by_loot_id(&self, loot_id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolLootRecipe>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/recipes/initial-item/{lootId}".to_string())
        ;
        req = req.with_path_param("lootId".to_string(), loot_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_loot_v1_refresh(&self, force: bool) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-loot/v1/refresh".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_maps_v1_map(&self, map: crate::models::LolMapsMaps) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-maps/v1/map".to_string())
        ;
        req = req.with_body_param(map);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_matchmaking_v1_ready_check_accept(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-matchmaking/v1/ready-check/accept".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_matchmaking_v1_ready_check_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-matchmaking/v1/ready-check/decline".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_matchmaking_v1_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-matchmaking/v1/search".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_missions_v1_force(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-missions/v1/force".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_npe_rewards_v1_challenges_opt(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-npe-rewards/v1/challenges/opt".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_patch_v1_products_league_of_legends_detect_corruption_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-patch/v1/products/league_of_legends/detect-corruption-request".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_patch_v1_products_league_of_legends_partial_repair_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-patch/v1/products/league_of_legends/partial-repair-request".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_patch_v1_products_league_of_legends_start_checking_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-patch/v1/products/league_of_legends/start-checking-request".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_patch_v1_products_league_of_legends_start_patching_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-patch/v1/products/league_of_legends/start-patching-request".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_patch_v1_products_league_of_legends_stop_checking_request(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-patch/v1/products/league_of_legends/stop-checking-request".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_patch_v1_products_league_of_legends_stop_patching_request(&self, restart: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-patch/v1/products/league_of_legends/stop-patching-request".to_string())
        ;
        req = req.with_query_param("restart".to_string(), restart.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_perks_v1_pages(&self, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-perks/v1/pages".to_string())
        ;
        req = req.with_body_param(page);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-perks/v1/show-auto-modified-pages-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_perks_v1_update_page_order(&self, request: crate::models::LolPerksUpdatePageOrderRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-perks/v1/update-page-order".to_string())
        ;
        req = req.with_body_param(request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_personalized_offers_v1_offers_by_id_purchase(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPersonalizedOffersPurchaseResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-personalized-offers/v1/offers/{id}/purchase".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_personalized_offers_v1_offers_by_id_reveal(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::LolPersonalizedOffersUiOffer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-personalized-offers/v1/offers/{id}/reveal".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_personalized_offers_v1_offers_purchase(&self, offer_requests: crate::models::LolPersonalizedOffersOfferRequests) -> Box<dyn Future<Item = crate::models::LolPersonalizedOffersPurchaseResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-personalized-offers/v1/offers/purchase".to_string())
        ;
        req = req.with_body_param(offer_requests);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_personalized_offers_v1_offers_reveal(&self, offer_ids: crate::models::LolPersonalizedOffersOfferIds) -> Box<dyn Future<Item = Vec<crate::models::LolPersonalizedOffersUiOffer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-personalized-offers/v1/offers/reveal".to_string())
        ;
        req = req.with_body_param(offer_ids);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pft_v2_events(&self, pft_event: crate::models::LolPftPftEvent) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pft/v2/events".to_string())
        ;
        req = req.with_body_param(pft_event);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pft_v2_survey(&self, survey: crate::models::LolPftPftSurvey) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pft/v2/survey".to_string())
        ;
        req = req.with_body_param(survey);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_player_level_up_v1_level_up_notifications_by_plugin_name(&self, plugin_name: &str, level_up_event_ack: crate::models::LolPlayerLevelUpPlayerLevelUpEventAck) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-player-level-up/v1/level-up-notifications/{pluginName}".to_string())
        ;
        req = req.with_path_param("pluginName".to_string(), plugin_name.to_string());
        req = req.with_body_param(level_up_event_ack);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_player_preferences_v1_hash(&self, preferences: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-player-preferences/v1/hash".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_player_preferences_v1_player_preferences_endpoint_override(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferencesEndpoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-player-preferences/v1/player-preferences-endpoint-override".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pre_end_of_game_v1_complete_by_sequence_event_name(&self, sequence_event_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pre-end-of-game/v1/complete/{sequenceEventName}".to_string())
        ;
        req = req.with_path_param("sequenceEventName".to_string(), sequence_event_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pre_end_of_game_v1_registration_by_sequence_event_name_by_priority(&self, sequence_event_name: &str, priority: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pre-end-of-game/v1/registration/{sequenceEventName}/{priority}".to_string())
        ;
        req = req.with_path_param("sequenceEventName".to_string(), sequence_event_name.to_string());
        req = req.with_path_param("priority".to_string(), priority.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_first_experience_game(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/first-experience/game".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_first_experience_lcu(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/first-experience/lcu".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_first_experience_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/first-experience/reset".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_game_client_updated_ptt_key(&self, new_key: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/gameClientUpdatedPTTKey".to_string())
        ;
        req = req.with_body_param(new_key);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/mic-test".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/push-to-talk/check-available".to_string())
        ;
        req = req.with_body_param(prompt);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_settings_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/settings/reset".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_purchase_widget_v1_purchasable_items_by_inventory_type(&self, inventory_type: &str, item_ids: Vec<i64>) -> Box<dyn Future<Item = crate::models::LolPurchaseWidgetItemChoices, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-purchase-widget/v1/purchasable-items/{inventoryType}".to_string())
        ;
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());
        req = req.with_body_param(item_ids);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_purchase_widget_v1_purchase_items(&self, purchase_request: crate::models::LolPurchaseWidgetPurchaseRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-purchase-widget/v1/purchaseItems".to_string())
        ;
        req = req.with_body_param(purchase_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_purchase_widget_v1_validate_items(&self, validation_request: crate::models::LolPurchaseWidgetValidationRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-purchase-widget/v1/validateItems".to_string())
        ;
        req = req.with_body_param(validation_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_purchase_widget_v2_purchase_items(&self, purchase_request: crate::models::LolPurchaseWidgetPurchaseRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-purchase-widget/v2/purchaseItems".to_string())
        ;
        req = req.with_body_param(purchase_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_ranked_v1_eos_notifications_by_id_acknowledge(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-ranked/v1/eos-notifications/{id}/acknowledge".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_ranked_v1_notifications_by_id_acknowledge(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-ranked/v1/notifications/{id}/acknowledge".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_metadata_by_game_id_create_game_version_by_game_version_game_type_by_game_type_queue_id_by_queue_id(&self, game_id: i64, game_version: &str, game_type: &str, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/metadata/{gameId}/create/gameVersion/{gameVersion}/gameType/{gameType}/queueId/{queueId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_path_param("gameVersion".to_string(), game_version.to_string());
        req = req.with_path_param("gameType".to_string(), game_type.to_string());
        req = req.with_path_param("queueId".to_string(), queue_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_by_game_id_download(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/{gameId}/download".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(context_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_by_game_id_download_graceful(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/{gameId}/download/graceful".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(context_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_by_game_id_watch(&self, game_id: i64, context_data: crate::models::LolReplaysReplayContextData) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/{gameId}/watch".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(context_data);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v1_rofls_scan(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v1/rofls/scan".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_replays_v2_metadata_by_game_id_create(&self, game_id: i64, request: crate::models::LolReplaysReplayCreateMetadata) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-replays/v2/metadata/{gameId}/create".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());
        req = req.with_body_param(request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_authorization_gas(&self, creds: crate::models::LolRsoAuthRsoPlayerCredentials) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/authorization/gas".to_string())
        ;
        req = req.with_body_param(creds);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_authorization_refresh(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/authorization/refresh".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/authorization/userinfo".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_device_id(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthDeviceId, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/device-id".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v2_config(&self, config: crate::models::LolRsoAuthPublicClientConfig) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v2/config".to_string())
        ;
        req = req.with_body_param(config);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_settings_v1_account_save(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-settings/v1/account/save".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_simple_dialog_messages_v1_messages(&self, message_request: crate::models::LolSimpleDialogMessagesLocalMessageRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-simple-dialog-messages/v1/messages".to_string())
        ;
        req = req.with_body_param(message_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_spectator_v1_buddy_spectate(&self, summoner_or_team_names: Vec<String>) -> Box<dyn Future<Item = crate::models::LolSpectatorSummonerOrTeamAvailabilty, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-spectator/v1/buddy/spectate".to_string())
        ;
        req = req.with_body_param(summoner_or_team_names);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_spectator_v1_spectate_launch(&self, spectate_game_info: crate::models::LolSpectatorSpectateGameInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-spectator/v1/spectate/launch".to_string())
        ;
        req = req.with_body_param(spectate_game_info);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_statstones_v1_featured_champion_statstones_by_champion_item_id_by_statstone_id(&self, champion_item_id: i32, statstone_id: &str, featured_info: crate::models::LolStatstonesStatstoneFeaturedRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-statstones/v1/featured-champion-statstones/{championItemId}/{statstoneId}".to_string())
        ;
        req = req.with_path_param("championItemId".to_string(), champion_item_id.to_string());
        req = req.with_path_param("statstoneId".to_string(), statstone_id.to_string());
        req = req.with_body_param(featured_info);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_store_v1_last_page(&self, page_type: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-store/v1/lastPage".to_string())
        ;
        req = req.with_body_param(page_type);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_store_v1_notifications_acknowledge(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-store/v1/notifications/acknowledge".to_string())
        ;
        req = req.with_body_param(id);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_store_v1_skins_by_skin_id_purchase(&self, skin_id: i32, cost: crate::models::LolStoreItemCost) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-store/v1/skins/{skinId}/purchase".to_string())
        ;
        req = req.with_path_param("skinId".to_string(), skin_id.to_string());
        req = req.with_body_param(cost);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_suggested_players_v1_reported_player(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersReportedPlayer) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-suggested-players/v1/reported-player".to_string())
        ;
        req = req.with_body_param(resource);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_suggested_players_v1_victorious_comrade(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersVictoriousComrade) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-suggested-players/v1/victorious-comrade".to_string())
        ;
        req = req.with_body_param(resource);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_summoner_v1_current_summoner_name(&self, name: &str) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-summoner/v1/current-summoner/name".to_string())
        ;
        req = req.with_body_param(name);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_summoner_v1_current_summoner_summoner_profile(&self, body: crate::models::LolSummonerSummonerProfileUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-summoner/v1/current-summoner/summoner-profile".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_summoner_v1_summoners(&self, name: crate::models::LolSummonerSummonerRequestedName) -> Box<dyn Future<Item = crate::models::LolSummonerInternalSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-summoner/v1/summoners".to_string())
        ;
        req = req.with_body_param(name);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_summoner_v2_summoners_names(&self, summoner_names: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummoner>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-summoner/v2/summoners/names".to_string())
        ;
        req = req.with_body_param(summoner_names);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_summoner_v2_summoners_puuid(&self, puuids: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::LolSummonerSummoner>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-summoner/v2/summoners/puuid".to_string())
        ;
        req = req.with_body_param(puuids);

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_notifications(&self, notification_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/notifications".to_string())
        ;
        req = req.with_query_param("notificationId".to_string(), notification_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_detect_corruption_request(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/detect-corruption-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_partial_repair_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/partial-repair-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_signal_start_patching_delayed(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/signal-start-patching-delayed".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_start_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/start-checking-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_start_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/start-patching-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_stop_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/stop-checking-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_stop_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/stop-patching-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_league_of_legends_full_repair_request(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/league_of_legends/full-repair-request".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_payments_v1_pmc_start_url(&self, options: crate::models::PaymentsFrontEndRequest) -> Box<dyn Future<Item = crate::models::PaymentsFrontEndResult, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payments/v1/pmc-start-url".to_string())
        ;
        req = req.with_body_param(options);

        req.execute(self.configuration.borrow())
    }

    fn post_player_notifications_v1_notifications(&self, notification: crate::models::PlayerNotificationsPlayerNotificationResource) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/player-notifications/v1/notifications".to_string())
        ;
        req = req.with_body_param(notification);

        req.execute(self.configuration.borrow())
    }

    fn post_recofriender_v1_contacts_by_account_id_available(&self, account_id: i64, retain_in_cache: Option<bool>) -> Box<dyn Future<Item = crate::models::RecofrienderContactStateResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/recofriender/v1/contacts/{accountId}/available".to_string())
        ;
        if let Some(ref s) = retain_in_cache {
            req = req.with_query_param("retainInCache".to_string(), s.to_string());
        }
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_recofriender_v1_contacts_by_account_id_dismissed(&self, account_id: i64, retain_in_cache: Option<bool>) -> Box<dyn Future<Item = crate::models::RecofrienderContactStateResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/recofriender/v1/contacts/{accountId}/dismissed".to_string())
        ;
        if let Some(ref s) = retain_in_cache {
            req = req.with_query_param("retainInCache".to_string(), s.to_string());
        }
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_recofriender_v1_contacts_by_account_id_invited(&self, account_id: i64, retain_in_cache: Option<bool>) -> Box<dyn Future<Item = crate::models::RecofrienderContactStateResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/recofriender/v1/contacts/{accountId}/invited".to_string())
        ;
        if let Some(ref s) = retain_in_cache {
            req = req.with_query_param("retainInCache".to_string(), s.to_string());
        }
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_recofriender_v1_registrations_by_network(&self, network: &str) -> Box<dyn Future<Item = crate::models::RecofrienderUrlResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/recofriender/v1/registrations/{network}".to_string())
        ;
        req = req.with_path_param("network".to_string(), network.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_riot_messaging_service_v1_connect(&self, id_token: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/riot-messaging-service/v1/connect".to_string())
        ;
        req = req.with_body_param(id_token);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riot_messaging_service_v1_entitlements(&self, token: crate::models::RiotMessagingServiceEntitlementsToken) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/riot-messaging-service/v1/entitlements".to_string())
        ;
        req = req.with_body_param(token);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_sanitizer_v1_contains_sanitized(&self, request: crate::models::SanitizerContainsSanitizedRequest) -> Box<dyn Future<Item = crate::models::SanitizerContainsSanitizedResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/sanitizer/v1/containsSanitized".to_string())
        ;
        req = req.with_body_param(request);

        req.execute(self.configuration.borrow())
    }

    fn post_sanitizer_v1_sanitize(&self, request: crate::models::SanitizerSanitizeRequest) -> Box<dyn Future<Item = crate::models::SanitizerSanitizeResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/sanitizer/v1/sanitize".to_string())
        ;
        req = req.with_body_param(request);

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v1/push-to-talk/check-available".to_string())
        ;
        req = req.with_body_param(prompt);

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v1_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v1/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v2_sessions(&self, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v2/sessions".to_string())
        ;
        req = req.with_header_param("JWT".to_string(), JWT.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v2_sessions_by_id(&self, id: &str, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_header_param("JWT".to_string(), JWT.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_client_config_v1_entitlements_token(&self, update: crate::models::ClientConfigEntitlementsUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/client-config/v1/entitlements-token".to_string())
        ;
        req = req.with_body_param(update);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_client_config_v1_refresh_config_status(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/client-config/v1/refresh-config-status".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_client_config_v2_namespace_changes(&self, namespaces: crate::models::ClientConfigConfigNamespaceUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/client-config/v2/namespace-changes".to_string())
        ;
        req = req.with_body_param(namespaces);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_gcloud_voice_chat_v1_codec_settings(&self, settings: crate::models::GcloudVoiceChatUpdateCodecSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/gcloud-voice-chat/v1/codec-settings".to_string())
        ;
        req = req.with_body_param(settings);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_gcloud_voice_chat_v1_push_to_talk(&self, push_to_talk: crate::models::GcloudVoiceChatPushToTalkResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/gcloud-voice-chat/v1/push-to-talk".to_string())
        ;
        req = req.with_body_param(push_to_talk);

        req.execute(self.configuration.borrow())
    }

    fn put_gcloud_voice_chat_v2_devices_capture_prompt_for_permission(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/gcloud-voice-chat/v2/devices/capture/prompt-for-permission".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_gcloud_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str, participant: crate::models::GcloudVoiceChatUpdateParticipantResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/gcloud-voice-chat/v2/sessions/{sessionId}/participants/{participantId}".to_string())
        ;
        req = req.with_path_param("sessionId".to_string(), session_id.to_string());
        req = req.with_path_param("participantId".to_string(), participant_id.to_string());
        req = req.with_body_param(participant);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_gcloud_voice_chat_v2_settings(&self, settings: crate::models::GcloudVoiceChatUpdateSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/gcloud-voice-chat/v2/settings".to_string())
        ;
        req = req.with_body_param(settings);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_banners_v1_current_summoner_flags_equipped(&self, flag: crate::models::LolBannersBannerFlag) -> Box<dyn Future<Item = crate::models::LolBannersBannerFlag, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-banners/v1/current-summoner/flags/equipped".to_string())
        ;
        req = req.with_body_param(flag);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_conversations_active(&self, active_conversation: crate::models::LolChatActiveConversationResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/conversations/active".to_string())
        ;
        req = req.with_body_param(active_conversation);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_conversations_by_id(&self, id: &str, updated_conversation: crate::models::LolChatConversationResource) -> Box<dyn Future<Item = crate::models::LolChatConversationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/conversations/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(updated_conversation);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_conversations_by_id_closed(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/conversations/{id}/closed".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_friend_groups_by_id(&self, id: i32, group: crate::models::LolChatGroupResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/friend-groups/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(group);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_friend_groups_order(&self, order: crate::models::LolChatFriendGroupOrder) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/friend-groups/order".to_string())
        ;
        req = req.with_body_param(order);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_friend_requests_by_id(&self, id: &str, request: crate::models::LolChatFriendRequestResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/friend-requests/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(request);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_friends_by_id(&self, id: &str, contact: crate::models::LolChatFriendResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/friends/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(contact);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_me(&self, me: crate::models::LolChatUserResource) -> Box<dyn Future<Item = crate::models::LolChatUserResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/me".to_string())
        ;
        req = req.with_body_param(me);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_settings(&self, data: serde_json::Value, do_async: Option<bool>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/settings".to_string())
        ;
        if let Some(ref s) = do_async {
            req = req.with_query_param("doAsync".to_string(), s.to_string());
        }
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_chat_v1_settings_by_key(&self, key: &str, value: serde_json::Value, do_async: Option<bool>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-chat/v1/settings/{key}".to_string())
        ;
        if let Some(ref s) = do_async {
            req = req.with_query_param("doAsync".to_string(), s.to_string());
        }
        req = req.with_path_param("key".to_string(), key.to_string());
        req = req.with_body_param(value);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_collections_v1_inventories_by_summoner_id_verification(&self, summoner_id: i64, verification_code: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-collections/v1/inventories/{summonerId}/verification".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(verification_code);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_cosmetics_v1_selection_companion(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-cosmetics/v1/selection/companion".to_string())
        ;
        req = req.with_body_param(item_id);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_cosmetics_v1_selection_tft_damage_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-cosmetics/v1/selection/tft-damage-skin".to_string())
        ;
        req = req.with_body_param(item_id);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_cosmetics_v1_selection_tft_map_skin(&self, item_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-cosmetics/v1/selection/tft-map-skin".to_string())
        ;
        req = req.with_body_param(item_id);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_email_verification_v1_email(&self, email_update: crate::models::LolEmailVerificationEmailUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-email-verification/v1/email".to_string())
        ;
        req = req.with_body_param(email_update);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_highlights_v1_highlights_by_id(&self, id: i64, highlight: crate::models::LolHighlightsHighlight) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-highlights/v1/highlights/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(highlight);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_sets: crate::models::LolItemSetsItemSets) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-item-sets/v1/item-sets/{summonerId}/sets".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(item_sets);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_loadouts_v4_loadouts_by_id(&self, id: &str, loadout: crate::models::LolLoadoutsUpdateLoadoutDto) -> Box<dyn Future<Item = crate::models::LolLoadoutsScopedLoadout, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-loadouts/v4/loadouts/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(loadout);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/autofill-displayed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/lobby/members/localMember/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_active(&self, active: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/active".to_string())
        ;
        req = req.with_body_param(active);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_by_party_id_members_by_puuid_role(&self, party_id: &str, puuid: &str, role: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/{partyId}/members/{puuid}/role".to_string())
        ;
        req = req.with_path_param("partyId".to_string(), party_id.to_string());
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_body_param(role);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_metadata(&self, metadata: crate::models::LolLobbyPartyMemberMetadataDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/metadata".to_string())
        ;
        req = req.with_body_param(metadata);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_queue(&self, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/queue".to_string())
        ;
        req = req.with_body_param(queue_id);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_ready(&self, ready: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/ready".to_string())
        ;
        req = req.with_body_param(ready);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v2_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v2/lobby/members/localMember/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v2_lobby_party_type(&self, party_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v2/lobby/partyType".to_string())
        ;
        req = req.with_body_param(party_type);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_login_v1_shutdown_locks_by_lock_name(&self, lock_name: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-login/v1/shutdown-locks/{lockName}".to_string())
        ;
        req = req.with_path_param("lockName".to_string(), lock_name.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_matchmaking_v1_search(&self, search: crate::models::LolMatchmakingMatchmakingSearchResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-matchmaking/v1/search".to_string())
        ;
        req = req.with_body_param(search);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_missions_v1_player(&self, ids: crate::models::IdsDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-missions/v1/player".to_string())
        ;
        req = req.with_body_param(ids);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_missions_v1_player_by_mission_id(&self, mission_id: &str, reward_groups: crate::models::LolMissionsRewardGroupsSelection) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-missions/v1/player/{missionId}".to_string())
        ;
        req = req.with_path_param("missionId".to_string(), mission_id.to_string());
        req = req.with_body_param(reward_groups);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_missions_v2_player_opt(&self, series_opt: crate::models::LolMissionsSeriesOpt) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-missions/v2/player/opt".to_string())
        ;
        req = req.with_body_param(series_opt);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_npe_tutorial_path_v1_settings(&self, settings: crate::models::LolNpeTutorialPathAccountSettingsTutorial) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-npe-tutorial-path/v1/settings".to_string())
        ;
        req = req.with_body_param(settings);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_npe_tutorial_path_v1_tutorials_by_tutorial_id_view(&self, tutorial_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-npe-tutorial-path/v1/tutorials/{tutorialId}/view".to_string())
        ;
        req = req.with_path_param("tutorialId".to_string(), tutorial_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_patch_v1_game_patch_url(&self, url: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-patch/v1/game-patch-url".to_string())
        ;
        req = req.with_query_param("url".to_string(), url.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_patch_v1_self_update_restart(&self, force_restart_on_self_update: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-patch/v1/self-update-restart".to_string())
        ;
        req = req.with_query_param("forceRestartOnSelfUpdate".to_string(), force_restart_on_self_update.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_patch_v1_ux(&self, ux: crate::models::LolPatchUxResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-patch/v1/ux".to_string())
        ;
        req = req.with_body_param(ux);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_currentpage(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/currentpage".to_string())
        ;
        req = req.with_body_param(id);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_pages_by_id(&self, id: i32, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/pages/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(page);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_pages_validate(&self, page_data: crate::models::LolPerksValidatePageNameData) -> Box<dyn Future<Item = crate::models::LolPerksValidatePageNameResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/pages/validate".to_string())
        ;
        req = req.with_body_param(page_data);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_perks_ack_gameplay_updated(&self, ids: Vec<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/perks/ack-gameplay-updated".to_string())
        ;
        req = req.with_body_param(ids);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_settings(&self, show_long_descriptions: crate::models::LolPerksUiSettings) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/settings".to_string())
        ;
        req = req.with_body_param(show_long_descriptions);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_player_preferences_v1_preference(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-player-preferences/v1/preference".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_capturedevices(&self, handle: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/capturedevices".to_string())
        ;
        req = req.with_body_param(handle);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_participants_by_puuid_mute(&self, puuid: &str, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/participants/{puuid}/mute".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_body_param(muted);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_participants_by_puuid_volume(&self, puuid: &str, volume: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/participants/{puuid}/volume".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_body_param(volume);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_activation_sensitivity(&self, sensitivity: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/activationSensitivity".to_string())
        ;
        req = req.with_body_param(sensitivity);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_input_mode(&self, input_mode: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/inputMode".to_string())
        ;
        req = req.with_body_param(input_mode);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_mic_level(&self, mic_level: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/micLevel".to_string())
        ;
        req = req.with_body_param(mic_level);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_mute(&self, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/mute".to_string())
        ;
        req = req.with_body_param(muted);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_regalia_v2_current_summoner_regalia(&self, regalia: crate::models::LolRegaliaRegaliaPreferences) -> Box<dyn Future<Item = crate::models::LolRegaliaRegaliaWithPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-regalia/v2/current-summoner/regalia".to_string())
        ;
        req = req.with_body_param(regalia);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_settings_v1_account_by_category(&self, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-settings/v1/account/{category}".to_string())
        ;
        req = req.with_path_param("category".to_string(), category.to_string());
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_settings_v2_account_by_pp_type_by_category(&self, pp_type: &str, category: &str, settings_resource: crate::models::LolSettingsSettingCategory) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-settings/v2/account/{ppType}/{category}".to_string())
        ;
        req = req.with_path_param("ppType".to_string(), pp_type.to_string());
        req = req.with_path_param("category".to_string(), category.to_string());
        req = req.with_body_param(settings_resource);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_summoner_v1_current_summoner_icon(&self, body: crate::models::LolSummonerSummonerIcon) -> Box<dyn Future<Item = crate::models::LolSummonerSummoner, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-summoner/v1/current-summoner/icon".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn put_patcher_v1_self_update_restart(&self, force_restart_on_self_update: bool) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/patcher/v1/self-update-restart".to_string())
        ;
        req = req.with_query_param("forceRestartOnSelfUpdate".to_string(), force_restart_on_self_update.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_patcher_v1_ux(&self, ux: crate::models::PatcherUxResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/patcher/v1/ux".to_string())
        ;
        req = req.with_body_param(ux);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_player_notifications_v1_config(&self, config: crate::models::PlayerNotificationsPlayerNotificationConfigResource) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationConfigResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/player-notifications/v1/config".to_string())
        ;
        req = req.with_body_param(config);

        req.execute(self.configuration.borrow())
    }

    fn put_player_notifications_v1_notifications_by_id(&self, id: i64, notification: serde_json::Value) -> Box<dyn Future<Item = crate::models::PlayerNotificationsPlayerNotificationResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/player-notifications/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(notification);

        req.execute(self.configuration.borrow())
    }

    fn put_recofriender_v1_debug(&self, debug_configuration: crate::models::RecofrienderDebugConfig) -> Box<dyn Future<Item = crate::models::RecofrienderDebugConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/recofriender/v1/debug".to_string())
        ;
        req = req.with_body_param(debug_configuration);

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v1_codec_settings(&self, settings: crate::models::VoiceChatUpdateCodecSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v1/codec-settings".to_string())
        ;
        req = req.with_body_param(settings);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v1_push_to_talk(&self, push_to_talk: crate::models::VoiceChatPushToTalkResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v1/push-to-talk".to_string())
        ;
        req = req.with_body_param(push_to_talk);

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v2_devices_capture_prompt_for_permission(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v2/devices/capture/prompt-for-permission".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str, participant: crate::models::VoiceChatUpdateParticipantResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}".to_string())
        ;
        req = req.with_path_param("sessionId".to_string(), session_id.to_string());
        req = req.with_path_param("participantId".to_string(), participant_id.to_string());
        req = req.with_body_param(participant);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v2_settings(&self, settings: crate::models::VoiceChatUpdateSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v2/settings".to_string())
        ;
        req = req.with_body_param(settings);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
