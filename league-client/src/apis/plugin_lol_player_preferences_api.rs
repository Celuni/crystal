/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolPlayerPreferencesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolPlayerPreferencesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolPlayerPreferencesApiClient<C> {
        PluginLolPlayerPreferencesApiClient {
            configuration,
        }
    }
}

pub trait PluginLolPlayerPreferencesApi {
    fn get_lol_player_preferences_v1_player_preferences_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_player_preferences_v1_preference_by_type(&self, _type: &str, hash: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_player_preferences_v1_hash(&self, preferences: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_player_preferences_v1_player_preferences_endpoint_override(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferencesEndpoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_player_preferences_v1_preference(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolPlayerPreferencesApi for PluginLolPlayerPreferencesApiClient<C> {
    fn get_lol_player_preferences_v1_player_preferences_ready(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-preferences/v1/player-preferences-ready".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_preferences_v1_preference_by_type(&self, _type: &str, hash: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-preferences/v1/preference/{type}".to_string())
        ;
        if let Some(ref s) = hash {
            req = req.with_query_param("hash".to_string(), s.to_string());
        }
        req = req.with_path_param("type".to_string(), _type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_player_preferences_v1_hash(&self, preferences: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-player-preferences/v1/hash".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_player_preferences_v1_player_preferences_endpoint_override(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferencesEndpoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-player-preferences/v1/player-preferences-endpoint-override".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_player_preferences_v1_preference(&self, preferences: crate::models::LolPlayerPreferencesPlayerPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-player-preferences/v1/preference".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

}
