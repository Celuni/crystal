use crate::helpers::JoinIterator;

/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use futures::Future;
use hyper;
use serde_json;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct PluginLolClashApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolClashApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolClashApiClient<C> {
        PluginLolClashApiClient { configuration }
    }
}

pub trait PluginLolClashApi {
    fn delete_lol_clash_v1_voice(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn delete_lol_clash_v1_voice_delay_by_delay_seconds(
        &self,
        delay_seconds: f64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_all_tournaments(
        &self,
    ) -> Box<dyn Future<Item = Vec<crate::models::TournamentDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_bracket_by_bracket_id(
        &self,
        bracket_id: i64,
    ) -> Box<dyn Future<Item = crate::models::LolClashBracket, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_checkin_allowed(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_current_tournament_ids(
        &self,
    ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_disabled_config(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashClashDisabledConfig,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_enabled(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_eog_player_update(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashEogPlayerUpdateDto,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_event_by_uuid(
        &self,
        uuid: &str,
    ) -> Box<dyn Future<Item = crate::models::ClashEventData, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_game_end(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentGameEnd,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_historyandwinners(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentHistoryAndWinners,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_iconconfig(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_invited_roster_ids(
        &self,
    ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashPlayerNotificationData,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_ping(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_player(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolClashPlayerData, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_player_chat_rosters(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashPlayerChatRoster>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_player_history(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashRosterStats>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_playmode_restricted(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_ready(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_rewards(
        &self,
    ) -> Box<
        dyn Future<Item = crate::models::LolClashPlayerRewards, Error = Error<serde_json::Value>>,
    >;
    fn get_lol_clash_v1_roster_by_roster_id(
        &self,
        roster_id: &str,
    ) -> Box<dyn Future<Item = crate::models::LolClashRoster, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_roster_by_roster_id_stats(
        &self,
        roster_id: i64,
    ) -> Box<dyn Future<Item = crate::models::LolClashRosterStats, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_scouting_champions(
        &self,
        summoner_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashScoutingChampions>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_scouting_matchhistory(
        &self,
        summoner_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_simple_state_flags(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashSimpleStateFlag>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_thirdparty_team_data(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashThirdPartyApiRoster,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_time(
        &self,
    ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id(
        &self,
        tournament_id: i64,
    ) -> Box<dyn Future<Item = crate::models::LolClashTournament, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_get_player_tiers(
        &self,
        tournament_id: i64,
        summoner_ids: Vec<i64>,
    ) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_player(
        &self,
        tournament_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashPlayerTournamentData,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_tournament_by_tournament_id_player_honor_restricted(
        &self,
        tournament_id: i64,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_by_tournament_id_state_info(
        &self,
        tournament_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentStateInfo,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_tournament_by_tournament_id_winners(
        &self,
        tournament_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentWinnerHistory,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_tournament_cancelled(
        &self,
    ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_get_all_player_tiers(
        &self,
    ) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_tournament_state_info(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashTournamentStateInfo>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_tournament_summary(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashTournamentSummary>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_clash_v1_visible(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v1_voice_enabled(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_clash_v2_playmode_restricted(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashPlaymodeRestrictedInfo,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_eog_player_update_acknowledge(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_events(
        &self,
        uuids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, crate::models::ClashEventData>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_game_end_acknowledge(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_notifications_acknowledge(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_refresh(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_accept(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_cancel_withdraw(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_change_all_details(
        &self,
        roster_id: &str,
        roster_details: crate::models::LolClashRosterDetails,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_change_icon(
        &self,
        roster_id: &str,
        change_icon_request: crate::models::LolClashChangeIconRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_change_name(
        &self,
        roster_id: &str,
        change_name_request: crate::models::LolClashChangeNameRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_change_short_name(
        &self,
        roster_id: &str,
        change_name_request: crate::models::LolClashChangeNameRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_decline(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_disband(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_invite(
        &self,
        roster_id: &str,
        summoner_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashClientFailedInvite>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_kick(
        &self,
        roster_id: &str,
        kick_request: crate::models::LolClashKickRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_leave(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_lockin(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_set_position(
        &self,
        roster_id: &str,
        set_position_request: crate::models::LolClashSetPositionRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_set_ticket(
        &self,
        roster_id: &str,
        set_ticket_request: crate::models::LolClashSetTicketRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_accept(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_by_summoner_id_revoke(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_decline(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_invite(
        &self,
        roster_id: &str,
        invite_sub_request: crate::models::LolClashInviteSubRequest,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashClientFailedInvite>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_substitute_reclaim(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_accept(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_decline(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_offer(
        &self,
        roster_id: &str,
        summoner_id: i64,
        offer_ticket_request: crate::models::LolClashOfferTicketRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_revoke(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_transfer_captain(
        &self,
        roster_id: &str,
        new_captain_summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_unlockin(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_unwithdraw(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_update_logos(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_roster_by_roster_id_withdraw(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_simple_state_flags_by_id_acknowledge(
        &self,
        id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_tournament_by_tournament_id_create_roster(
        &self,
        tournament_id: i64,
        roster_details: crate::models::LolClashRosterDetails,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_update_logos(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_voice(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn post_lol_clash_v1_voice_delay_by_delay_seconds(
        &self,
        delay_seconds: f64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    >;
}

impl<C: hyper::client::Connect> PluginLolClashApi for PluginLolClashApiClient<C> {
    fn delete_lol_clash_v1_voice(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Delete,
            "/lol-clash/v1/voice".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clash_v1_voice_delay_by_delay_seconds(
        &self,
        delay_seconds: f64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Delete,
            "/lol-clash/v1/voice-delay/{delaySeconds}".to_string(),
        );
        req = req.with_path_param("delaySeconds".to_string(), delay_seconds.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_all_tournaments(
        &self,
    ) -> Box<dyn Future<Item = Vec<crate::models::TournamentDto>, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/all-tournaments".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_bracket_by_bracket_id(
        &self,
        bracket_id: i64,
    ) -> Box<dyn Future<Item = crate::models::LolClashBracket, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/bracket/{bracketId}".to_string(),
        );
        req = req.with_path_param("bracketId".to_string(), bracket_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_checkin_allowed(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/checkin-allowed".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_current_tournament_ids(
        &self,
    ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/currentTournamentIds".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_disabled_config(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashClashDisabledConfig,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/disabled-config".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_enabled(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/enabled".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_eog_player_update(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashEogPlayerUpdateDto,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/eog-player-update".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_event_by_uuid(
        &self,
        uuid: &str,
    ) -> Box<dyn Future<Item = crate::models::ClashEventData, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/event/{uuid}".to_string(),
        );
        req = req.with_path_param("uuid".to_string(), uuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_game_end(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentGameEnd,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/game-end".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_historyandwinners(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentHistoryAndWinners,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/historyandwinners".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_iconconfig(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/iconconfig".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_invited_roster_ids(
        &self,
    ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/invited-roster-ids".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_notifications(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashPlayerNotificationData,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/notifications".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_ping(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req =
            __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/ping".to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_player(
        &self,
    ) -> Box<dyn Future<Item = crate::models::LolClashPlayerData, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/player".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_player_chat_rosters(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashPlayerChatRoster>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/player/chat-rosters".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_player_history(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashRosterStats>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/player/history".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_playmode_restricted(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/playmode-restricted".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_ready(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/ready".to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_rewards(
        &self,
    ) -> Box<
        dyn Future<Item = crate::models::LolClashPlayerRewards, Error = Error<serde_json::Value>>,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/rewards".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_roster_by_roster_id(
        &self,
        roster_id: &str,
    ) -> Box<dyn Future<Item = crate::models::LolClashRoster, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/roster/{rosterId}".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_roster_by_roster_id_stats(
        &self,
        roster_id: i64,
    ) -> Box<dyn Future<Item = crate::models::LolClashRosterStats, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/roster/{rosterId}/stats".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_scouting_champions(
        &self,
        summoner_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashScoutingChampions>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/scouting/champions".to_string(),
        );
        req = req.with_query_param(
            "summonerIds".to_string(),
            summoner_ids.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_scouting_matchhistory(
        &self,
        summoner_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/scouting/matchhistory".to_string(),
        );
        req = req.with_query_param(
            "summonerIds".to_string(),
            summoner_ids.join(",").to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_simple_state_flags(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashSimpleStateFlag>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/simple-state-flags".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_thirdparty_team_data(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashThirdPartyApiRoster,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/thirdparty/team-data".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_time(
        &self,
    ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::Get, "/lol-clash/v1/time".to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id(
        &self,
        tournament_id: i64,
    ) -> Box<dyn Future<Item = crate::models::LolClashTournament, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/{tournamentId}".to_string(),
        );
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_get_player_tiers(
        &self,
        tournament_id: i64,
        summoner_ids: Vec<i64>,
    ) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/{tournamentId}/get-player-tiers".to_string(),
        );
        req = req.with_query_param(
            "summonerIds".to_string(),
            summoner_ids.join(",").to_string(),
        );
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_player(
        &self,
        tournament_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashPlayerTournamentData,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/{tournamentId}/player".to_string(),
        );
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_player_honor_restricted(
        &self,
        tournament_id: i64,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/{tournamentId}/player-honor-restricted".to_string(),
        );
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_state_info(
        &self,
        tournament_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentStateInfo,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/{tournamentId}/stateInfo".to_string(),
        );
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_by_tournament_id_winners(
        &self,
        tournament_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashTournamentWinnerHistory,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/{tournamentId}/winners".to_string(),
        );
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_cancelled(
        &self,
    ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/cancelled".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_get_all_player_tiers(
        &self,
    ) -> Box<dyn Future<Item = Vec<crate::models::PlayerTierDto>, Error = Error<serde_json::Value>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament/get-all-player-tiers".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_state_info(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashTournamentStateInfo>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament-state-info".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_tournament_summary(
        &self,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashTournamentSummary>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/tournament-summary".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_visible(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/visible".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v1_voice_enabled(
        &self,
    ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v1/voice-enabled".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clash_v2_playmode_restricted(
        &self,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolClashPlaymodeRestrictedInfo,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-clash/v2/playmode-restricted".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_eog_player_update_acknowledge(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/eog-player-update/acknowledge".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_events(
        &self,
        uuids: Vec<String>,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, crate::models::ClashEventData>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/events".to_string(),
        );
        req = req.with_body_param(uuids);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_game_end_acknowledge(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/game-end/acknowledge".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_notifications_acknowledge(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/notifications/acknowledge".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_refresh(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/refresh".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_accept(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/accept".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_cancel_withdraw(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/cancel-withdraw".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_all_details(
        &self,
        roster_id: &str,
        roster_details: crate::models::LolClashRosterDetails,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/change-all-details".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(roster_details);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_icon(
        &self,
        roster_id: &str,
        change_icon_request: crate::models::LolClashChangeIconRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/change-icon".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(change_icon_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_name(
        &self,
        roster_id: &str,
        change_name_request: crate::models::LolClashChangeNameRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/change-name".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(change_name_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_change_short_name(
        &self,
        roster_id: &str,
        change_name_request: crate::models::LolClashChangeNameRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/change-short-name".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(change_name_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_decline(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/decline".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_disband(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/disband".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_invite(
        &self,
        roster_id: &str,
        summoner_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashClientFailedInvite>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/invite".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(summoner_ids);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_kick(
        &self,
        roster_id: &str,
        kick_request: crate::models::LolClashKickRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/kick".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(kick_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_leave(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/leave".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_lockin(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/lockin".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_set_position(
        &self,
        roster_id: &str,
        set_position_request: crate::models::LolClashSetPositionRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/set-position".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(set_position_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_set_ticket(
        &self,
        roster_id: &str,
        set_ticket_request: crate::models::LolClashSetTicketRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/set-ticket".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(set_ticket_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_accept(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/substitute/accept".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_by_summoner_id_revoke(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/substitute/{summonerId}/revoke".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_decline(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/substitute/decline".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_invite(
        &self,
        roster_id: &str,
        invite_sub_request: crate::models::LolClashInviteSubRequest,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolClashClientFailedInvite>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/substitute/invite".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(invite_sub_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_substitute_reclaim(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/substitute/reclaim".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_accept(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/accept".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_decline(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/decline".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_offer(
        &self,
        roster_id: &str,
        summoner_id: i64,
        offer_ticket_request: crate::models::LolClashOfferTicketRequest,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/offer".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(offer_ticket_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_ticket_offer_by_summoner_id_revoke(
        &self,
        roster_id: &str,
        summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/revoke".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_transfer_captain(
        &self,
        roster_id: &str,
        new_captain_summoner_id: i64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/transfer-captain".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());
        req = req.with_body_param(new_captain_summoner_id);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_unlockin(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/unlockin".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_unwithdraw(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/unwithdraw".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_update_logos(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/update-logos".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_roster_by_roster_id_withdraw(
        &self,
        roster_id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/roster/{rosterId}/withdraw".to_string(),
        );
        req = req.with_path_param("rosterId".to_string(), roster_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_simple_state_flags_by_id_acknowledge(
        &self,
        id: &str,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/simple-state-flags/{id}/acknowledge".to_string(),
        );
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_tournament_by_tournament_id_create_roster(
        &self,
        tournament_id: i64,
        roster_details: crate::models::LolClashRosterDetails,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/tournament/{tournamentId}/create-roster".to_string(),
        );
        req = req.with_path_param("tournamentId".to_string(), tournament_id.to_string());
        req = req.with_body_param(roster_details);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_update_logos(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/update-logos".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_voice(
        &self,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/voice".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clash_v1_voice_delay_by_delay_seconds(
        &self,
        delay_seconds: f64,
    ) -> Box<
        dyn Future<
            Item = ::std::collections::HashMap<String, serde_json::Value>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Post,
            "/lol-clash/v1/voice-delay/{delaySeconds}".to_string(),
        );
        req = req.with_path_param("delaySeconds".to_string(), delay_seconds.to_string());

        req.execute(self.configuration.borrow())
    }
}
