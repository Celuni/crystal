/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolLobbyApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolLobbyApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolLobbyApiClient<C> {
        PluginLolLobbyApiClient {
            configuration,
        }
    }
}

pub trait PluginLolLobbyApi {
    fn delete_lol_lobby_v1_clash(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_lobby_v2_notifications_by_notification_id(&self, notification_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_custom_games(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyCustomGame>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_custom_games_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomGame, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyQueueAvailability, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitation>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_lobby_invitations_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_parties_gamemode(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyGameModeDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_parties_player(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPlayerDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v1_party_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyPartyRewards, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_comms_members(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPremadePartyDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_comms_token(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_eligibility_game_select_eligibility_hash(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_eligibility_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_custom_available_bots(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyBotChampion>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_custom_bots_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_matchmaking_search_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyMatchmakingSearchResource, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_lobby_members(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyParticipantDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyNotification>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_party_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_party_eog_status(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPartyStatusDto, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_received_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyReceivedInvitationDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_v2_registration_status(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_clash(&self, token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_custom_games_by_id_join(&self, id: i64, parameters: crate::models::LolLobbyLobbyCustomJoinParameters) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_custom_games_refresh(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_bots(&self, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_cancel_champ_select(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_start_champ_select(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomChampSelectStartResponse, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_custom_switch_teams(&self, team: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_lobby_invitations(&self, invitation: crate::models::LolLobbyLobbyInvitation) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v1_tournaments_by_id_join(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_eligibility_party(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_eligibility_self(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_eog_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_grant_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_kick(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_promote(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_lobby_members_by_summoner_id_revoke_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_matchmaking_quick_search(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_notifications(&self, notification: crate::models::LolLobbyLobbyNotification) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_parties_overrides_enabled(&self, enabled: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_parties_overrides_enabled_for_team_builder_queues(&self, enabled_for_teambuilder_queues: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_party_by_party_id_join(&self, party_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_play_again(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_play_again_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_received_invitations_by_invitation_id_accept(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_v2_received_invitations_by_invitation_id_decline(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_active(&self, active: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_by_party_id_members_by_puuid_role(&self, party_id: &str, puuid: &str, role: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_metadata(&self, metadata: crate::models::LolLobbyPartyMemberMetadataDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_queue(&self, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v1_parties_ready(&self, ready: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v2_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_lobby_v2_lobby_party_type(&self, party_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolLobbyApi for PluginLolLobbyApiClient<C> {
    fn delete_lol_lobby_v1_clash(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v1/clash".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}".to_string())
        ;
        req = req.with_path_param("summonerInternalName".to_string(), summoner_internal_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v2/lobby".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v2/lobby/matchmaking/search".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_lobby_v2_notifications_by_notification_id(&self, notification_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby/v2/notifications/{notificationId}".to_string())
        ;
        req = req.with_path_param("notificationId".to_string(), notification_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/autofill-displayed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_custom_games(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyCustomGame>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/custom-games".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_custom_games_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/custom-games/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyQueueAvailability, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/availability".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/countdown".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitation>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_lobby_invitations_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/lobby/invitations/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_parties_gamemode(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyGameModeDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/parties/gamemode".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_parties_player(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPlayerDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/parties/player".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v1_party_rewards(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyPartyRewards, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v1/party-rewards".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_comms_members(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPremadePartyDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/comms/members".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_comms_token(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/comms/token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_eligibility_game_select_eligibility_hash(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/eligibility/game-select-eligibility-hash".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_eligibility_initial_configuration_complete(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/eligibility/initial-configuration-complete".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_custom_available_bots(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyBotChampion>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/custom/available-bots".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_custom_bots_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/custom/bots-enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_matchmaking_search_state(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyMatchmakingSearchResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/matchmaking/search-state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_lobby_members(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyParticipantDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/lobby/members".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_party_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/party-active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_party_eog_status(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyPartyStatusDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/party/eog-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_received_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyReceivedInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/received-invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_v2_registration_status(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby/v2/registration-status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_clash(&self, token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/clash".to_string())
        ;
        req = req.with_body_param(token);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_custom_games_by_id_join(&self, id: i64, parameters: crate::models::LolLobbyLobbyCustomJoinParameters) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/custom-games/{id}/join".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(parameters);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_custom_games_refresh(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/custom-games/refresh".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_bots(&self, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/bots".to_string())
        ;
        req = req.with_body_param(parameters);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_bots_by_summoner_internal_name(&self, summoner_internal_name: &str, parameters: crate::models::LolLobbyLobbyBotParams) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}".to_string())
        ;
        req = req.with_path_param("summonerInternalName".to_string(), summoner_internal_name.to_string());
        req = req.with_body_param(parameters);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_cancel_champ_select(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/cancel-champ-select".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_start_champ_select(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyCustomChampSelectStartResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/start-champ-select".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_custom_switch_teams(&self, team: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/custom/switch-teams".to_string())
        ;
        if let Some(ref s) = team {
            req = req.with_query_param("team".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_lobby_invitations(&self, invitation: crate::models::LolLobbyLobbyInvitation) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyInvitation, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/lobby/invitations".to_string())
        ;
        req = req.with_body_param(invitation);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v1_tournaments_by_id_join(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v1/tournaments/{id}/join".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_eligibility_party(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/eligibility/party".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_eligibility_self(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyEligibility>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/eligibility/self".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_eog_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/eog-invitations".to_string())
        ;
        req = req.with_body_param(invitations);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = crate::models::LolLobbyLobbyDto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby".to_string())
        ;
        req = req.with_body_param(lobby_change);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_invitations(&self, invitations: Vec<crate::models::LolLobbyLobbyInvitationDto>) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyLobbyInvitationDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/invitations".to_string())
        ;
        req = req.with_body_param(invitations);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_matchmaking_search(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/matchmaking/search".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_grant_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/grant-invite".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_kick(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/kick".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_promote(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/promote".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_lobby_members_by_summoner_id_revoke_invite(&self, summoner_id: i64) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/lobby/members/{summonerId}/revoke-invite".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_matchmaking_quick_search(&self, lobby_change: crate::models::LolLobbyLobbyChangeGameDto) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/matchmaking/quick-search".to_string())
        ;
        req = req.with_body_param(lobby_change);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_notifications(&self, notification: crate::models::LolLobbyLobbyNotification) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/notifications".to_string())
        ;
        req = req.with_body_param(notification);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_parties_overrides_enabled(&self, enabled: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/parties/overrides/Enabled".to_string())
        ;
        req = req.with_query_param("enabled".to_string(), enabled.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_parties_overrides_enabled_for_team_builder_queues(&self, enabled_for_teambuilder_queues: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/parties/overrides/EnabledForTeamBuilderQueues".to_string())
        ;
        req = req.with_query_param("enabledForTeambuilderQueues".to_string(), enabled_for_teambuilder_queues.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_party_by_party_id_join(&self, party_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/party/{partyId}/join".to_string())
        ;
        req = req.with_path_param("partyId".to_string(), party_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_play_again(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/play-again".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_play_again_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/play-again-decline".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_received_invitations_by_invitation_id_accept(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/received-invitations/{invitationId}/accept".to_string())
        ;
        req = req.with_path_param("invitationId".to_string(), invitation_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_v2_received_invitations_by_invitation_id_decline(&self, invitation_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby/v2/received-invitations/{invitationId}/decline".to_string())
        ;
        req = req.with_path_param("invitationId".to_string(), invitation_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_autofill_displayed(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/autofill-displayed".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/lobby/members/localMember/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_active(&self, active: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/active".to_string())
        ;
        req = req.with_body_param(active);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_by_party_id_members_by_puuid_role(&self, party_id: &str, puuid: &str, role: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/{partyId}/members/{puuid}/role".to_string())
        ;
        req = req.with_path_param("partyId".to_string(), party_id.to_string());
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_body_param(role);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_metadata(&self, metadata: crate::models::LolLobbyPartyMemberMetadataDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/metadata".to_string())
        ;
        req = req.with_body_param(metadata);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_queue(&self, queue_id: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/queue".to_string())
        ;
        req = req.with_body_param(queue_id);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v1_parties_ready(&self, ready: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v1/parties/ready".to_string())
        ;
        req = req.with_body_param(ready);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v2_lobby_members_local_member_position_preferences(&self, position_preferences: crate::models::LolLobbyLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v2/lobby/members/localMember/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_lobby_v2_lobby_party_type(&self, party_type: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-lobby/v2/lobby/partyType".to_string())
        ;
        req = req.with_body_param(party_type);

        req.execute(self.configuration.borrow())
    }

}
