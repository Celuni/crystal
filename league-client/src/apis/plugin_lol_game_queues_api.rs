/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolGameQueuesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolGameQueuesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolGameQueuesApiClient<C> {
        PluginLolGameQueuesApiClient {
            configuration,
        }
    }
}

pub trait PluginLolGameQueuesApi {
    fn get_lol_game_queues_v1_custom(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_custom_non_default(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id(&self, game_type_config_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id_map_by_map_id(&self, game_type_config_id: i32, map_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_queues(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolGameQueuesQueue>, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_queues_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>>;
    fn get_lol_game_queues_v1_queues_type_by_queue_type(&self, queue_type: &str) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolGameQueuesApi for PluginLolGameQueuesApiClient<C> {
    fn get_lol_game_queues_v1_custom(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/custom".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_custom_non_default(&self, ) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueCustomGame, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/custom-non-default".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id(&self, game_type_config_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/game-type-config/{gameTypeConfigId}".to_string())
        ;
        req = req.with_path_param("gameTypeConfigId".to_string(), game_type_config_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_game_type_config_by_game_type_config_id_map_by_map_id(&self, game_type_config_id: i32, map_id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueueGameTypeConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/game-type-config/{gameTypeConfigId}/map/{mapId}".to_string())
        ;
        req = req.with_path_param("gameTypeConfigId".to_string(), game_type_config_id.to_string());
        req = req.with_path_param("mapId".to_string(), map_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_queues(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolGameQueuesQueue>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/queues".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_queues_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/queues/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_game_queues_v1_queues_type_by_queue_type(&self, queue_type: &str) -> Box<dyn Future<Item = crate::models::LolGameQueuesQueue, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-game-queues/v1/queues/type/{queueType}".to_string())
        ;
        req = req.with_path_param("queueType".to_string(), queue_type.to_string());

        req.execute(self.configuration.borrow())
    }

}
