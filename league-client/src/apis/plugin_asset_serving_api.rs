/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginAssetServingApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginAssetServingApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginAssetServingApiClient<C> {
        PluginAssetServingApiClient {
            configuration,
        }
    }
}

pub trait PluginAssetServingApi {
    fn get_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn head_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginAssetServingApi for PluginAssetServingApiClient<C> {
    fn get_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/{plugin}/assets/{path}".to_string())
        ;
        req = req.with_path_param("plugin".to_string(), plugin.to_string());
        req = req.with_path_param("path".to_string(), path.to_string());
        if let Some(param_value) = if_none_match {
            req = req.with_header_param("if-none-match".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn head_by_plugin_assets_by_path(&self, plugin: &str, path: &str, if_none_match: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Head, "/{plugin}/assets/{path}".to_string())
        ;
        req = req.with_path_param("plugin".to_string(), plugin.to_string());
        req = req.with_path_param("path".to_string(), path.to_string());
        if let Some(param_value) = if_none_match {
            req = req.with_header_param("if-none-match".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
