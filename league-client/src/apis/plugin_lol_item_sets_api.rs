/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolItemSetsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolItemSetsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolItemSetsApiClient<C> {
        PluginLolItemSetsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolItemSetsApi {
    fn get_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolItemSetsItemSets, Error = Error<serde_json::Value>>>;
    fn post_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_set: crate::models::LolItemSetsItemSet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_item_sets_v1_item_sets_by_summoner_id_validate(&self, summoner_id: i64, input: crate::models::LolItemSetsValidateItemSetNameInput) -> Box<dyn Future<Item = crate::models::LolItemSetsValidateItemSetNameResponse, Error = Error<serde_json::Value>>>;
    fn put_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_sets: crate::models::LolItemSetsItemSets) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolItemSetsApi for PluginLolItemSetsApiClient<C> {
    fn get_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolItemSetsItemSets, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-item-sets/v1/item-sets/{summonerId}/sets".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_set: crate::models::LolItemSetsItemSet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-item-sets/v1/item-sets/{summonerId}/sets".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(item_set);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_item_sets_v1_item_sets_by_summoner_id_validate(&self, summoner_id: i64, input: crate::models::LolItemSetsValidateItemSetNameInput) -> Box<dyn Future<Item = crate::models::LolItemSetsValidateItemSetNameResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-item-sets/v1/item-sets/{summonerId}/validate".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(input);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_item_sets_v1_item_sets_by_summoner_id_sets(&self, summoner_id: i64, item_sets: crate::models::LolItemSetsItemSets) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-item-sets/v1/item-sets/{summonerId}/sets".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(item_sets);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
