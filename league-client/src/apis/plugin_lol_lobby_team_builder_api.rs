/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolLobbyTeamBuilderApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolLobbyTeamBuilderApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolLobbyTeamBuilderApiClient<C> {
        PluginLolLobbyTeamBuilderApiClient {
            configuration,
        }
    }
}

pub trait PluginLolLobbyTeamBuilderApi {
    fn delete_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_has_auto_assigned_smite(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectPickableSkins, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampionSelectPreferences, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_sending_loadouts_gcos_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectSession, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyTeamBuilderChampSelectTradeContract>, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderTeamBoost, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobbyCountdownTimer, Error = Error<serde_json::Value>>>;
    fn get_lol_lobby_team_builder_v1_matchmaking(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>>;
    fn patch_lol_lobby_team_builder_champ_select_v1_session_actions_by_id(&self, id: i32, data: crate::models::LolLobbyTeamBuilderChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn patch_lol_lobby_team_builder_champ_select_v1_session_my_selection(&self, selection: crate::models::LolLobbyTeamBuilderChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_actions_by_id_complete(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_accept(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_cancel(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_decline(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_request(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_simple_inventory(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_invitations_accept(&self, invitation: crate::models::LolLobbyTeamBuilderLobbyInvitation) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_lobby(&self, lobby: crate::models::LolLobbyTeamBuilderLobby) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_kick(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_promote(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_matchmaking_low_priority_queue_abandon(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_matchmaking_search(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_ready_check_accept(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v1_ready_check_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_lobby_team_builder_v2_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferencesV2) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolLobbyTeamBuilderApi for PluginLolLobbyTeamBuilderApiClient<C> {
    fn delete_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-lobby-team-builder/v1/lobby".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_bannable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/bannable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_current_champion(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/current-champion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_disabled_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/disabled-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_has_auto_assigned_smite(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/has-auto-assigned-smite".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_implementation_active(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/implementation-active".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_pickable_champion_ids(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/pickable-champion-ids".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_pickable_skins(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectPickableSkins, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/pickable-skins".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampionSelectPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/preferences".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_sending_loadouts_gcos_enabled(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/sending-loadouts-gcos-enabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session_timer(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session/timer".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session_trades(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolLobbyTeamBuilderChampSelectTradeContract>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session/trades".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_session_trades_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_champ_select_v1_team_boost(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderTeamBoost, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/champ-select/v1/team-boost".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_v1_lobby(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/v1/lobby".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_v1_lobby_countdown(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobbyCountdownTimer, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/v1/lobby/countdown".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_lobby_team_builder_v1_matchmaking(&self, ) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-lobby-team-builder/v1/matchmaking".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_lobby_team_builder_champ_select_v1_session_actions_by_id(&self, id: i32, data: crate::models::LolLobbyTeamBuilderChampSelectAction) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-lobby-team-builder/champ-select/v1/session/actions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_lobby_team_builder_champ_select_v1_session_my_selection(&self, selection: crate::models::LolLobbyTeamBuilderChampSelectMySelection) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-lobby-team-builder/champ-select/v1/session/my-selection".to_string())
        ;
        req = req.with_body_param(selection);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_report_player_by_id_by_category(&self, id: &str, category: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/report-player/{id}/{category}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("category".to_string(), category.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_retrieve_latest_game_dto(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/retrieve-latest-game-dto".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_actions_by_id_complete(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/actions/{id}/complete".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_bench_swap_by_champion_id(&self, champion_id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/bench/swap/{championId}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_my_selection_reroll(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/my-selection/reroll".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_accept(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/accept".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_cancel(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/cancel".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_decline(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/decline".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_session_trades_by_id_request(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderChampSelectTradeContract, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/request".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_simple_inventory(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/simple-inventory".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_champ_select_v1_team_boost_purchase(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/champ-select/v1/team-boost/purchase".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_invitations_accept(&self, invitation: crate::models::LolLobbyTeamBuilderLobbyInvitation) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/invitations/accept".to_string())
        ;
        req = req.with_body_param(invitation);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_lobby(&self, lobby: crate::models::LolLobbyTeamBuilderLobby) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderLobby, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/lobby".to_string())
        ;
        req = req.with_body_param(lobby);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_kick(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/lobby/members/{id}/kick".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_lobby_members_by_id_promote(&self, id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/lobby/members/{id}/promote".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_matchmaking_low_priority_queue_abandon(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/matchmaking/low-priority-queue/abandon".to_string())
        ;
        req = req.with_body_param(leaver_buster_token);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_matchmaking_search(&self, leaver_buster_token: &str) -> Box<dyn Future<Item = crate::models::LolLobbyTeamBuilderMatchmakingSearchResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/matchmaking/search".to_string())
        ;
        req = req.with_body_param(leaver_buster_token);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferences) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_ready_check_accept(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/ready-check/accept".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v1_ready_check_decline(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v1/ready-check/decline".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_lobby_team_builder_v2_position_preferences(&self, position_preferences: crate::models::LolLobbyTeamBuilderLobbyPositionPreferencesV2) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-lobby-team-builder/v2/position-preferences".to_string())
        ;
        req = req.with_body_param(position_preferences);

        req.execute(self.configuration.borrow())
    }

}
