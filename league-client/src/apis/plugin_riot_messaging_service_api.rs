/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginRiotMessagingServiceApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginRiotMessagingServiceApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginRiotMessagingServiceApiClient<C> {
        PluginRiotMessagingServiceApiClient {
            configuration,
        }
    }
}

pub trait PluginRiotMessagingServiceApi {
    fn delete_riot_messaging_service_v1_connect(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_riot_messaging_service_v1_entitlements(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a(&self, a: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b(&self, a: &str, b: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c(&self, a: &str, b: &str, c: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d(&self, a: &str, b: &str, c: &str, d: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e(&self, a: &str, b: &str, c: &str, d: &str, e: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e_by_f(&self, a: &str, b: &str, c: &str, d: &str, e: &str, f: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceSession, Error = Error<serde_json::Value>>>;
    fn get_riot_messaging_service_v1_state(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceState, Error = Error<serde_json::Value>>>;
    fn post_riot_messaging_service_v1_connect(&self, id_token: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_riot_messaging_service_v1_entitlements(&self, token: crate::models::RiotMessagingServiceEntitlementsToken) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginRiotMessagingServiceApi for PluginRiotMessagingServiceApiClient<C> {
    fn delete_riot_messaging_service_v1_connect(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/riot-messaging-service/v1/connect".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_riot_messaging_service_v1_entitlements(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/riot-messaging-service/v1/entitlements".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/riot-messaging-service/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a(&self, a: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b(&self, a: &str, b: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c(&self, a: &str, b: &str, c: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d(&self, a: &str, b: &str, c: &str, d: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());
        req = req.with_path_param("d".to_string(), d.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e(&self, a: &str, b: &str, c: &str, d: &str, e: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());
        req = req.with_path_param("d".to_string(), d.to_string());
        req = req.with_path_param("e".to_string(), e.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_message_by_a_by_b_by_c_by_d_by_e_by_f(&self, a: &str, b: &str, c: &str, d: &str, e: &str, f: &str) -> Box<dyn Future<Item = crate::models::RmsMessage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}".to_string())
        ;
        req = req.with_path_param("a".to_string(), a.to_string());
        req = req.with_path_param("b".to_string(), b.to_string());
        req = req.with_path_param("c".to_string(), c.to_string());
        req = req.with_path_param("d".to_string(), d.to_string());
        req = req.with_path_param("e".to_string(), e.to_string());
        req = req.with_path_param("f".to_string(), f.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_session(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceSession, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/session".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_riot_messaging_service_v1_state(&self, ) -> Box<dyn Future<Item = crate::models::RiotMessagingServiceState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/riot-messaging-service/v1/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_riot_messaging_service_v1_connect(&self, id_token: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/riot-messaging-service/v1/connect".to_string())
        ;
        req = req.with_body_param(id_token);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_riot_messaging_service_v1_entitlements(&self, token: crate::models::RiotMessagingServiceEntitlementsToken) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/riot-messaging-service/v1/entitlements".to_string())
        ;
        req = req.with_body_param(token);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
