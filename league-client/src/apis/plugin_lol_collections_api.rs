/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolCollectionsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolCollectionsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolCollectionsApiClient<C> {
        PluginLolCollectionsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolCollectionsApi {
    fn get_lol_collections_v1_inventories_by_summoner_id_backdrop(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerBackdrop, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsChampionMastery>, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery_top(&self, summoner_id: i64, limit: i64, sort_rule: Option<&str>) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsTopChampionMasteries, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_spells(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerSpells, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsWardSkin>, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins_by_ward_skin_id(&self, summoner_id: i64, ward_skin_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsWardSkin, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v1_inventories_chest_eligibility(&self, ) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsChestEligibility, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>>;
    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons_by_summoner_icon_id(&self, summoner_id: i64, summoner_icon_id: i32) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcon, Error = Error<serde_json::Value>>>;
    fn put_lol_collections_v1_inventories_by_summoner_id_verification(&self, summoner_id: i64, verification_code: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolCollectionsApi for PluginLolCollectionsApiClient<C> {
    fn get_lol_collections_v1_inventories_by_summoner_id_backdrop(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerBackdrop, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/backdrop".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsChampionMastery>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/champion-mastery".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_champion_mastery_top(&self, summoner_id: i64, limit: i64, sort_rule: Option<&str>) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsTopChampionMasteries, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/champion-mastery/top".to_string())
        ;
        req = req.with_query_param("limit".to_string(), limit.to_string());
        if let Some(ref s) = sort_rule {
            req = req.with_query_param("sortRule".to_string(), s.to_string());
        }
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_spells(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerSpells, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/spells".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/summoner-icons".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolCollectionsCollectionsWardSkin>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/ward-skins".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_by_summoner_id_ward_skins_by_ward_skin_id(&self, summoner_id: i64, ward_skin_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsWardSkin, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/{summonerId}/ward-skins/{wardSkinId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("wardSkinId".to_string(), ward_skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v1_inventories_chest_eligibility(&self, ) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsChestEligibility, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v1/inventories/chest-eligibility".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcons, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v2/inventories/{summonerId}/summoner-icons".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_collections_v2_inventories_by_summoner_id_summoner_icons_by_summoner_icon_id(&self, summoner_id: i64, summoner_icon_id: i32) -> Box<dyn Future<Item = crate::models::LolCollectionsCollectionsSummonerIcon, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-collections/v2/inventories/{summonerId}/summoner-icons/{summonerIconId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("summonerIconId".to_string(), summoner_icon_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_lol_collections_v1_inventories_by_summoner_id_verification(&self, summoner_id: i64, verification_code: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-collections/v1/inventories/{summonerId}/verification".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_body_param(verification_code);

        req.execute(self.configuration.borrow())
    }

}
