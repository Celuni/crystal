/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolPlayerBehaviorApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolPlayerBehaviorApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolPlayerBehaviorApiClient<C> {
        PluginLolPlayerBehaviorApiClient {
            configuration,
        }
    }
}

pub trait PluginLolPlayerBehaviorApi {
    fn delete_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_ban(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorBanNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_chat_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorPlayerBehaviorConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_ranked_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCard, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_reporter_feedback(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPlayerBehaviorReporterFeedback>, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>>;
    fn get_lol_player_behavior_v2_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCardV2, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolPlayerBehaviorApi for PluginLolPlayerBehaviorApiClient<C> {
    fn delete_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-player-behavior/v1/reporter-feedback/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_ban(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorBanNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/ban".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_chat_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/chat-restriction".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorPlayerBehaviorConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_ranked_restriction(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorRestrictionNotification, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/ranked-restriction".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCard, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/reform-card".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_reporter_feedback(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPlayerBehaviorReporterFeedback>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/reporter-feedback".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v1_reporter_feedback_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReporterFeedback, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v1/reporter-feedback/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_player_behavior_v2_reform_card(&self, ) -> Box<dyn Future<Item = crate::models::LolPlayerBehaviorReformCardV2, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-player-behavior/v2/reform-card".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

}
