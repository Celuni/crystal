/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolPerksApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolPerksApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolPerksApiClient<C> {
        PluginLolPerksApiClient {
            configuration,
        }
    }
}

pub trait PluginLolPerksApi {
    fn delete_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_perks_v1_pages_by_id_auto_modified_selections(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_currentpage(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_customizationlimits(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksCustomizationLimits, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_inventory(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPlayerInventory, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkPageResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_perks(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiPerk>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_perks_disabled(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_perks_gameplay_updated(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_schema_version(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_servicesettings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksServiceSettings, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksUiSettings, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn get_lol_perks_v1_styles(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiStyle>, Error = Error<serde_json::Value>>>;
    fn post_lol_perks_v1_pages(&self, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>>;
    fn post_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_perks_v1_update_page_order(&self, request: crate::models::LolPerksUpdatePageOrderRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_currentpage(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_pages_by_id(&self, id: i32, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_pages_validate(&self, page_data: crate::models::LolPerksValidatePageNameData) -> Box<dyn Future<Item = crate::models::LolPerksValidatePageNameResponse, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_perks_ack_gameplay_updated(&self, ids: Vec<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_lol_perks_v1_settings(&self, show_long_descriptions: crate::models::LolPerksUiSettings) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolPerksApi for PluginLolPerksApiClient<C> {
    fn delete_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-perks/v1/pages".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-perks/v1/pages/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_perks_v1_pages_by_id_auto_modified_selections(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-perks/v1/pages/{id}/auto-modified-selections".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_currentpage(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/currentpage".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_customizationlimits(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksCustomizationLimits, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/customizationlimits".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_inventory(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksPlayerInventory, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/inventory".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_pages(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkPageResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/pages".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_pages_by_id(&self, id: i32) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/pages/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_perks(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiPerk>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/perks".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_perks_disabled(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/perks/disabled".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_perks_gameplay_updated(&self, ) -> Box<dyn Future<Item = Vec<i32>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/perks/gameplay-updated".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_schema_version(&self, ) -> Box<dyn Future<Item = i32, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/schema-version".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_servicesettings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksServiceSettings, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/servicesettings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPerksUiSettings, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/show-auto-modified-pages-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_perks_v1_styles(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPerksPerkUiStyle>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-perks/v1/styles".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_perks_v1_pages(&self, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = crate::models::LolPerksPerkPageResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-perks/v1/pages".to_string())
        ;
        req = req.with_body_param(page);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_perks_v1_show_auto_modified_pages_notification(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-perks/v1/show-auto-modified-pages-notification".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_perks_v1_update_page_order(&self, request: crate::models::LolPerksUpdatePageOrderRequest) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-perks/v1/update-page-order".to_string())
        ;
        req = req.with_body_param(request);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_currentpage(&self, id: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/currentpage".to_string())
        ;
        req = req.with_body_param(id);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_pages_by_id(&self, id: i32, page: crate::models::LolPerksPerkPageResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/pages/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(page);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_pages_validate(&self, page_data: crate::models::LolPerksValidatePageNameData) -> Box<dyn Future<Item = crate::models::LolPerksValidatePageNameResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/pages/validate".to_string())
        ;
        req = req.with_body_param(page_data);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_perks_ack_gameplay_updated(&self, ids: Vec<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/perks/ack-gameplay-updated".to_string())
        ;
        req = req.with_body_param(ids);

        req.execute(self.configuration.borrow())
    }

    fn put_lol_perks_v1_settings(&self, show_long_descriptions: crate::models::LolPerksUiSettings) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-perks/v1/settings".to_string())
        ;
        req = req.with_body_param(show_long_descriptions);

        req.execute(self.configuration.borrow())
    }

}
