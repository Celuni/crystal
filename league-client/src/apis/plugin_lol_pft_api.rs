/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolPftApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolPftApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolPftApiClient<C> {
        PluginLolPftApiClient {
            configuration,
        }
    }
}

pub trait PluginLolPftApi {
    fn get_lol_pft_v2_survey(&self, ) -> Box<dyn Future<Item = crate::models::LolPftPftSurvey, Error = Error<serde_json::Value>>>;
    fn post_lol_pft_v2_events(&self, pft_event: crate::models::LolPftPftEvent) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_pft_v2_survey(&self, survey: crate::models::LolPftPftSurvey) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolPftApi for PluginLolPftApiClient<C> {
    fn get_lol_pft_v2_survey(&self, ) -> Box<dyn Future<Item = crate::models::LolPftPftSurvey, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-pft/v2/survey".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pft_v2_events(&self, pft_event: crate::models::LolPftPftEvent) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pft/v2/events".to_string())
        ;
        req = req.with_body_param(pft_event);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_pft_v2_survey(&self, survey: crate::models::LolPftPftSurvey) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-pft/v2/survey".to_string())
        ;
        req = req.with_body_param(survey);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
