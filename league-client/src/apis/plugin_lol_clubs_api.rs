/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolClubsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolClubsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolClubsApiClient<C> {
        PluginLolClubsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolClubsApi {
    fn delete_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn delete_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsPlayerClub>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_invitations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_members(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_by_club_key_nominations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubInvite>, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_membership(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>>;
    fn get_lol_clubs_v1_clubs_membership_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str, tag: crate::models::LolClubsClubTag) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str, motd: crate::models::LolClubsClubMotd) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_invitations(&self, invitation: crate::models::LolClubsClubInvite) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>>;
    fn patch_lol_clubs_v1_clubs_membership_preferences(&self, preferences: crate::models::LolClubsClubPreferences) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_by_club_key_view(&self, club_key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_clubs_v1_clubs_membership(&self, name: crate::models::LolClubsClubName) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolClubsApi for PluginLolClubsApiClient<C> {
    fn delete_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/invitations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/members/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/nominations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-clubs/v1/clubs/{clubKey}/promotions/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsPlayerClub>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_invitations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/invitations".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_members(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/members".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/motd".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_by_club_key_nominations(&self, club_key: &str) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/{clubKey}/nominations".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_invitations(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolClubsClubInvite>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/invitations".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_membership(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/membership".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_clubs_v1_clubs_membership_preferences(&self, ) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-clubs/v1/clubs/membership/preferences".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_by_club_key(&self, club_key: &str, tag: crate::models::LolClubsClubTag) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/{clubKey}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_body_param(tag);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_by_club_key_motd(&self, club_key: &str, motd: crate::models::LolClubsClubMotd) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/{clubKey}/motd".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_body_param(motd);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_invitations(&self, invitation: crate::models::LolClubsClubInvite) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClubMembership, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/invitations".to_string())
        ;
        req = req.with_body_param(invitation);

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_clubs_v1_clubs_membership_preferences(&self, preferences: crate::models::LolClubsClubPreferences) -> Box<dyn Future<Item = crate::models::LolClubsClubPreferences, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-clubs/v1/clubs/membership/preferences".to_string())
        ;
        req = req.with_body_param(preferences);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_invitations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/invitations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_members_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/members/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_nominations_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/nominations/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_promotions_by_summoner_id(&self, club_key: &str, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolClubsClubMemberLists, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/promotions/{summonerId}".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_by_club_key_view(&self, club_key: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/{clubKey}/view".to_string())
        ;
        req = req.with_path_param("clubKey".to_string(), club_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_clubs_v1_clubs_membership(&self, name: crate::models::LolClubsClubName) -> Box<dyn Future<Item = crate::models::LolClubsPlayerClub, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-clubs/v1/clubs/membership".to_string())
        ;
        req = req.with_body_param(name);

        req.execute(self.configuration.borrow())
    }

}
