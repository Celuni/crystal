/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolHighlightsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolHighlightsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolHighlightsApiClient<C> {
        PluginLolHighlightsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolHighlightsApi {
    fn delete_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlightsConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights_folder_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_lol_highlights_v1_highlights_folder_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_highlights_v1_file_browser_by_highlight_id(&self, highlight_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>>;
    fn put_lol_highlights_v1_highlights_by_id(&self, id: i64, highlight: crate::models::LolHighlightsHighlight) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolHighlightsApi for PluginLolHighlightsApiClient<C> {
    fn delete_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-highlights/v1/highlights/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlightsConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights_folder_path(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights-folder-path".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_highlights_v1_highlights_folder_path_default(&self, ) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-highlights/v1/highlights-folder-path/default".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_highlights_v1_file_browser_by_highlight_id(&self, highlight_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-highlights/v1/file-browser/{highlightId}".to_string())
        ;
        req = req.with_path_param("highlightId".to_string(), highlight_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_highlights_v1_highlights(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHighlightsHighlight>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-highlights/v1/highlights".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn put_lol_highlights_v1_highlights_by_id(&self, id: i64, highlight: crate::models::LolHighlightsHighlight) -> Box<dyn Future<Item = crate::models::LolHighlightsHighlight, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-highlights/v1/highlights/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(highlight);

        req.execute(self.configuration.borrow())
    }

}
