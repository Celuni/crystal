/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolMapsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolMapsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolMapsApiClient<C> {
        PluginLolMapsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolMapsApi {
    fn get_lol_maps_v1_map_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v1_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v2_map_by_id_by_game_mode(&self, id: i64, game_mode: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v2_map_by_id_by_game_mode_by_game_mutator(&self, id: i64, game_mode: &str, game_mutator: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>>;
    fn get_lol_maps_v2_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>>;
    fn post_lol_maps_v1_map(&self, map: crate::models::LolMapsMaps) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolMapsApi for PluginLolMapsApiClient<C> {
    fn get_lol_maps_v1_map_by_id(&self, id: i64) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v1/map/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v1_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v1/maps".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v2_map_by_id_by_game_mode(&self, id: i64, game_mode: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v2/map/{id}/{gameMode}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("gameMode".to_string(), game_mode.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v2_map_by_id_by_game_mode_by_game_mutator(&self, id: i64, game_mode: &str, game_mutator: &str) -> Box<dyn Future<Item = crate::models::LolMapsMaps, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v2/map/{id}/{gameMode}/{gameMutator}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_path_param("gameMode".to_string(), game_mode.to_string());
        req = req.with_path_param("gameMutator".to_string(), game_mutator.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_maps_v2_maps(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMapsMaps>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-maps/v2/maps".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_maps_v1_map(&self, map: crate::models::LolMapsMaps) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-maps/v1/map".to_string())
        ;
        req = req.with_body_param(map);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
