/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolSuggestedPlayersApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolSuggestedPlayersApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolSuggestedPlayersApiClient<C> {
        PluginLolSuggestedPlayersApiClient {
            configuration,
        }
    }
}

pub trait PluginLolSuggestedPlayersApi {
    fn delete_lol_suggested_players_v1_suggested_players_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_suggested_players_v1_suggested_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSuggestedPlayersSuggestedPlayersSuggestedPlayer>, Error = Error<serde_json::Value>>>;
    fn post_lol_suggested_players_v1_reported_player(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersReportedPlayer) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_suggested_players_v1_victorious_comrade(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersVictoriousComrade) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolSuggestedPlayersApi for PluginLolSuggestedPlayersApiClient<C> {
    fn delete_lol_suggested_players_v1_suggested_players_by_summoner_id(&self, summoner_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-suggested-players/v1/suggested-players/{summonerId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_suggested_players_v1_suggested_players(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolSuggestedPlayersSuggestedPlayersSuggestedPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-suggested-players/v1/suggested-players".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_suggested_players_v1_reported_player(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersReportedPlayer) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-suggested-players/v1/reported-player".to_string())
        ;
        req = req.with_body_param(resource);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_suggested_players_v1_victorious_comrade(&self, resource: crate::models::LolSuggestedPlayersSuggestedPlayersVictoriousComrade) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-suggested-players/v1/victorious-comrade".to_string())
        ;
        req = req.with_body_param(resource);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
