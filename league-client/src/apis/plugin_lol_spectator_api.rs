/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolSpectatorApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolSpectatorApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolSpectatorApiClient<C> {
        PluginLolSpectatorApiClient {
            configuration,
        }
    }
}

pub trait PluginLolSpectatorApi {
    fn get_lol_spectator_v1_spectate(&self, ) -> Box<dyn Future<Item = crate::models::LolSpectatorSpectateGameInfo, Error = Error<serde_json::Value>>>;
    fn post_lol_spectator_v1_buddy_spectate(&self, summoner_or_team_names: Vec<String>) -> Box<dyn Future<Item = crate::models::LolSpectatorSummonerOrTeamAvailabilty, Error = Error<serde_json::Value>>>;
    fn post_lol_spectator_v1_spectate_launch(&self, spectate_game_info: crate::models::LolSpectatorSpectateGameInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolSpectatorApi for PluginLolSpectatorApiClient<C> {
    fn get_lol_spectator_v1_spectate(&self, ) -> Box<dyn Future<Item = crate::models::LolSpectatorSpectateGameInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-spectator/v1/spectate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_spectator_v1_buddy_spectate(&self, summoner_or_team_names: Vec<String>) -> Box<dyn Future<Item = crate::models::LolSpectatorSummonerOrTeamAvailabilty, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-spectator/v1/buddy/spectate".to_string())
        ;
        req = req.with_body_param(summoner_or_team_names);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_spectator_v1_spectate_launch(&self, spectate_game_info: crate::models::LolSpectatorSpectateGameInfo) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-spectator/v1/spectate/launch".to_string())
        ;
        req = req.with_body_param(spectate_game_info);

        req.execute(self.configuration.borrow())
    }

}
