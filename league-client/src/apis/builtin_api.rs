/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct BuiltinApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BuiltinApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BuiltinApiClient<C> {
        BuiltinApiClient {
            configuration,
        }
    }
}

pub trait BuiltinApi {
    fn async_delete(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn async_result(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn async_status(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn cancel(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn exit(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn help(&self, target: Option<&str>, format: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn http2_api_docs_v2(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn http_api_declaration_v1(&self, api: &str, api2: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn http_api_docs_v1(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn http_api_docs_v3(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn http_async_delete(&self, async_token: i32, async_token2: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn http_async_result(&self, async_token: i32, async_token2: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn http_async_status(&self, async_token: i32, async_token2: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn subscribe(&self, event_name: &str, format: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn unsubscribe(&self, event_name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn web_socket_format(&self, format: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>BuiltinApi for BuiltinApiClient<C> {
    fn async_delete(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/AsyncDelete".to_string())
        ;
        req = req.with_query_param("asyncToken".to_string(), async_token.to_string());

        req.execute(self.configuration.borrow())
    }

    fn async_result(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/AsyncResult".to_string())
        ;
        req = req.with_query_param("asyncToken".to_string(), async_token.to_string());

        req.execute(self.configuration.borrow())
    }

    fn async_status(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/AsyncStatus".to_string())
        ;
        req = req.with_query_param("asyncToken".to_string(), async_token.to_string());

        req.execute(self.configuration.borrow())
    }

    fn cancel(&self, async_token: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/Cancel".to_string())
        ;
        req = req.with_query_param("asyncToken".to_string(), async_token.to_string());

        req.execute(self.configuration.borrow())
    }

    fn exit(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/Exit".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn help(&self, target: Option<&str>, format: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/Help".to_string())
        ;
        if let Some(ref s) = target {
            req = req.with_query_param("target".to_string(), s.to_string());
        }
        if let Some(ref s) = format {
            req = req.with_query_param("format".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn http2_api_docs_v2(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/swagger/v2/swagger.json".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn http_api_declaration_v1(&self, api: &str, api2: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/swagger/v1/api-docs/{api}".to_string())
        ;
        req = req.with_path_param("api".to_string(), api.to_string());
        req = req.with_path_param("api".to_string(), api2.to_string());

        req.execute(self.configuration.borrow())
    }

    fn http_api_docs_v1(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/swagger/v1/api-docs".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn http_api_docs_v3(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/swagger/v3/openapi.json".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn http_async_delete(&self, async_token: i32, async_token2: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/async/v1/status/{asyncToken}".to_string())
        ;
        req = req.with_path_param("asyncToken".to_string(), async_token.to_string());
        req = req.with_path_param("asyncToken".to_string(), async_token2.to_string());

        req.execute(self.configuration.borrow())
    }

    fn http_async_result(&self, async_token: i32, async_token2: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/async/v1/result/{asyncToken}".to_string())
        ;
        req = req.with_path_param("asyncToken".to_string(), async_token.to_string());
        req = req.with_path_param("asyncToken".to_string(), async_token2.to_string());

        req.execute(self.configuration.borrow())
    }

    fn http_async_status(&self, async_token: i32, async_token2: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/async/v1/status/{asyncToken}".to_string())
        ;
        req = req.with_path_param("asyncToken".to_string(), async_token.to_string());
        req = req.with_path_param("asyncToken".to_string(), async_token2.to_string());

        req.execute(self.configuration.borrow())
    }

    fn subscribe(&self, event_name: &str, format: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/Subscribe".to_string())
        ;
        req = req.with_query_param("eventName".to_string(), event_name.to_string());
        if let Some(ref s) = format {
            req = req.with_query_param("format".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn unsubscribe(&self, event_name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/Unsubscribe".to_string())
        ;
        req = req.with_query_param("eventName".to_string(), event_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn web_socket_format(&self, format: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/WebSocketFormat".to_string())
        ;
        if let Some(ref s) = format {
            req = req.with_query_param("format".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
