/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ProcessControlApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ProcessControlApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ProcessControlApiClient<C> {
        ProcessControlApiClient {
            configuration,
        }
    }
}

pub trait ProcessControlApi {
    fn get_process_control_v1_process(&self, ) -> Box<dyn Future<Item = crate::models::ProcessControlProcess, Error = Error<serde_json::Value>>>;
    fn post_process_control_v1_process_quit(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_process_control_v1_process_restart(&self, delay_seconds: i32, restart_version: Option<i32>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_process_control_v1_process_restart_to_repair(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>ProcessControlApi for ProcessControlApiClient<C> {
    fn get_process_control_v1_process(&self, ) -> Box<dyn Future<Item = crate::models::ProcessControlProcess, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/process-control/v1/process".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_process_control_v1_process_quit(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/process-control/v1/process/quit".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_process_control_v1_process_restart(&self, delay_seconds: i32, restart_version: Option<i32>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/process-control/v1/process/restart".to_string())
        ;
        req = req.with_query_param("delaySeconds".to_string(), delay_seconds.to_string());
        if let Some(ref s) = restart_version {
            req = req.with_query_param("restartVersion".to_string(), s.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_process_control_v1_process_restart_to_repair(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/process-control/v1/process/restart-to-repair".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
