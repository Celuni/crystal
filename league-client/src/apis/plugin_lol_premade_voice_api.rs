/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolPremadeVoiceApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolPremadeVoiceApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolPremadeVoiceApiClient<C> {
        PluginLolPremadeVoiceApiClient {
            configuration,
        }
    }
}

pub trait PluginLolPremadeVoiceApi {
    fn delete_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceVoiceAvailability, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_capturedevices(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoiceDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_first_experience(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceFirstExperience, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceAudioPropertiesResource, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_participant_records(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_participants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_premade_voice_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceSettingsResource, Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_first_experience_game(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_first_experience_lcu(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_first_experience_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_game_client_updated_ptt_key(&self, new_key: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_premade_voice_v1_settings_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_capturedevices(&self, handle: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_participants_by_puuid_mute(&self, puuid: &str, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_participants_by_puuid_volume(&self, puuid: &str, volume: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_activation_sensitivity(&self, sensitivity: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_input_mode(&self, input_mode: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_mic_level(&self, mic_level: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_premade_voice_v1_self_mute(&self, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolPremadeVoiceApi for PluginLolPremadeVoiceApiClient<C> {
    fn delete_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-premade-voice/v1/mic-test".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-premade-voice/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_availability(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceVoiceAvailability, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/availability".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_capturedevices(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoiceDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/capturedevices".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_first_experience(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceFirstExperience, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/first-experience".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceAudioPropertiesResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/mic-test".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_participant_records(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/participant-records".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_participants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolPremadeVoicePremadeVoiceParticipantDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/participants".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_premade_voice_v1_settings(&self, ) -> Box<dyn Future<Item = crate::models::LolPremadeVoiceSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-premade-voice/v1/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_first_experience_game(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/first-experience/game".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_first_experience_lcu(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/first-experience/lcu".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_first_experience_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/first-experience/reset".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_game_client_updated_ptt_key(&self, new_key: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/gameClientUpdatedPTTKey".to_string())
        ;
        req = req.with_body_param(new_key);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_mic_test(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/mic-test".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/push-to-talk/check-available".to_string())
        ;
        req = req.with_body_param(prompt);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_premade_voice_v1_settings_reset(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-premade-voice/v1/settings/reset".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_capturedevices(&self, handle: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/capturedevices".to_string())
        ;
        req = req.with_body_param(handle);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_participants_by_puuid_mute(&self, puuid: &str, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/participants/{puuid}/mute".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_body_param(muted);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_participants_by_puuid_volume(&self, puuid: &str, volume: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/participants/{puuid}/volume".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_body_param(volume);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_activation_sensitivity(&self, sensitivity: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/activationSensitivity".to_string())
        ;
        req = req.with_body_param(sensitivity);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_input_mode(&self, input_mode: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/inputMode".to_string())
        ;
        req = req.with_body_param(input_mode);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_mic_level(&self, mic_level: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/micLevel".to_string())
        ;
        req = req.with_body_param(mic_level);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_premade_voice_v1_self_mute(&self, muted: i32) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-premade-voice/v1/self/mute".to_string())
        ;
        req = req.with_body_param(muted);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
