/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginVoiceChatApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginVoiceChatApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginVoiceChatApiClient<C> {
        PluginVoiceChatApiClient {
            configuration,
        }
    }
}

pub trait PluginVoiceChatApi {
    fn delete_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_audio_properties(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatAudioPropertiesResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_call_stats_aggregate(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCallStatsResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_call_stats_by_id(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatCallStatsResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_codec_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCodecSettingsResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatConfigResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatVoiceErrorCounterResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v1_push_to_talk(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatPushToTalkResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_devices_capture(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_devices_capture_permission(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCaptureDevicePermissionStatus, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_devices_render(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatSessionResource>, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatParticipantResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatSettingsResource, Error = Error<serde_json::Value>>>;
    fn get_voice_chat_v2_state(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatStateResource, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v1_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v2_sessions(&self, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn post_voice_chat_v2_sessions_by_id(&self, id: &str, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v1_codec_settings(&self, settings: crate::models::VoiceChatUpdateCodecSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v1_push_to_talk(&self, push_to_talk: crate::models::VoiceChatPushToTalkResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v2_devices_capture_prompt_for_permission(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str, participant: crate::models::VoiceChatUpdateParticipantResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_voice_chat_v2_settings(&self, settings: crate::models::VoiceChatUpdateSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginVoiceChatApi for PluginVoiceChatApiClient<C> {
    fn delete_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/voice-chat/v2/sessions".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_audio_properties(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatAudioPropertiesResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/audio-properties".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_call_stats_aggregate(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCallStatsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/call-stats/aggregate".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_call_stats_by_id(&self, id: &str) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatCallStatsResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/call-stats/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_codec_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCodecSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/codec-settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatConfigResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_errors(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatVoiceErrorCounterResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/errors".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v1_push_to_talk(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatPushToTalkResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v1/push-to-talk".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_devices_capture(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/devices/capture".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_devices_capture_permission(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatCaptureDevicePermissionStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/devices/capture/permission".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_devices_render(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatDeviceResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/devices/render".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_sessions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::VoiceChatSessionResource>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/sessions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatParticipantResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}".to_string())
        ;
        req = req.with_path_param("sessionId".to_string(), session_id.to_string());
        req = req.with_path_param("participantId".to_string(), participant_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_settings(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatSettingsResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/settings".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_voice_chat_v2_state(&self, ) -> Box<dyn Future<Item = crate::models::VoiceChatStateResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/voice-chat/v2/state".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v1_push_to_talk_check_available(&self, prompt: i32) -> Box<dyn Future<Item = bool, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v1/push-to-talk/check-available".to_string())
        ;
        req = req.with_body_param(prompt);

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v1_sessions_by_id(&self, id: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v1/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v2_sessions(&self, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v2/sessions".to_string())
        ;
        req = req.with_header_param("JWT".to_string(), JWT.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_voice_chat_v2_sessions_by_id(&self, id: &str, JWT: &str) -> Box<dyn Future<Item = crate::models::VoiceChatSessionResource, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/voice-chat/v2/sessions/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_header_param("JWT".to_string(), JWT.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v1_codec_settings(&self, settings: crate::models::VoiceChatUpdateCodecSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v1/codec-settings".to_string())
        ;
        req = req.with_body_param(settings);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v1_push_to_talk(&self, push_to_talk: crate::models::VoiceChatPushToTalkResource) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v1/push-to-talk".to_string())
        ;
        req = req.with_body_param(push_to_talk);

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v2_devices_capture_prompt_for_permission(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v2/devices/capture/prompt-for-permission".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v2_sessions_by_session_id_participants_by_participant_id(&self, session_id: &str, participant_id: &str, participant: crate::models::VoiceChatUpdateParticipantResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}".to_string())
        ;
        req = req.with_path_param("sessionId".to_string(), session_id.to_string());
        req = req.with_path_param("participantId".to_string(), participant_id.to_string());
        req = req.with_body_param(participant);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_voice_chat_v2_settings(&self, settings: crate::models::VoiceChatUpdateSettingsResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/voice-chat/v2/settings".to_string())
        ;
        req = req.with_body_param(settings);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
