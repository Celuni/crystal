use crate::helpers::JoinIterator;

/*
 *
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use futures::Future;
use hyper;
use serde_json;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct PluginLolCatalogApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolCatalogApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolCatalogApiClient<C> {
        PluginLolCatalogApiClient { configuration }
    }
}

pub trait PluginLolCatalogApi {
    fn get_lol_catalog_v1_item_details(
        &self,
        inventory_type: &str,
        item_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolCatalogCatalogPluginItemWithDetails,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_catalog_v1_items(
        &self,
        inventory_type: &str,
        item_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolCatalogItemChoiceDetails>,
            Error = Error<serde_json::Value>,
        >,
    >;
    fn get_lol_catalog_v1_items_by_inventory_type(
        &self,
        inventory_type: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolCatalogCatalogPluginItem>,
            Error = Error<serde_json::Value>,
        >,
    >;
}

impl<C: hyper::client::Connect> PluginLolCatalogApi for PluginLolCatalogApiClient<C> {
    fn get_lol_catalog_v1_item_details(
        &self,
        inventory_type: &str,
        item_id: i64,
    ) -> Box<
        dyn Future<
            Item = crate::models::LolCatalogCatalogPluginItemWithDetails,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-catalog/v1/item-details".to_string(),
        );
        req = req.with_query_param("inventoryType".to_string(), inventory_type.to_string());
        req = req.with_query_param("itemId".to_string(), item_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_catalog_v1_items(
        &self,
        inventory_type: &str,
        item_ids: Vec<i64>,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolCatalogItemChoiceDetails>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-catalog/v1/items".to_string(),
        );
        req = req.with_query_param("inventoryType".to_string(), inventory_type.to_string());
        req = req.with_query_param("itemIds".to_string(), item_ids.join(",").to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_catalog_v1_items_by_inventory_type(
        &self,
        inventory_type: &str,
    ) -> Box<
        dyn Future<
            Item = Vec<crate::models::LolCatalogCatalogPluginItem>,
            Error = Error<serde_json::Value>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::Get,
            "/lol-catalog/v1/items/{inventoryType}".to_string(),
        );
        req = req.with_path_param("inventoryType".to_string(), inventory_type.to_string());

        req.execute(self.configuration.borrow())
    }
}
