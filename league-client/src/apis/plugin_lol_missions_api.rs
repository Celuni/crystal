/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolMissionsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolMissionsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolMissionsApiClient<C> {
        PluginLolMissionsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolMissionsApi {
    fn get_lol_missions_v1_data(&self, ) -> Box<dyn Future<Item = crate::models::PlayerMissionEligibilityData, Error = Error<serde_json::Value>>>;
    fn get_lol_missions_v1_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMissionsRewardGrant>, Error = Error<serde_json::Value>>>;
    fn get_lol_missions_v1_missions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerMissionDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_missions_v1_series(&self, ) -> Box<dyn Future<Item = Vec<crate::models::SeriesDto>, Error = Error<serde_json::Value>>>;
    fn get_lol_tft_v2_tft_battlepass(&self, ) -> Box<dyn Future<Item = crate::models::LolMissionsTftPaidBattlepass, Error = Error<serde_json::Value>>>;
    fn patch_lol_missions_v1_grants_by_grant_id_viewed(&self, grant_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_missions_v1_force(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_missions_v1_player(&self, ids: crate::models::IdsDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_missions_v1_player_by_mission_id(&self, mission_id: &str, reward_groups: crate::models::LolMissionsRewardGroupsSelection) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_lol_missions_v2_player_opt(&self, series_opt: crate::models::LolMissionsSeriesOpt) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolMissionsApi for PluginLolMissionsApiClient<C> {
    fn get_lol_missions_v1_data(&self, ) -> Box<dyn Future<Item = crate::models::PlayerMissionEligibilityData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/data".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_missions_v1_grants(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolMissionsRewardGrant>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/grants".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_missions_v1_missions(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PlayerMissionDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/missions".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_missions_v1_series(&self, ) -> Box<dyn Future<Item = Vec<crate::models::SeriesDto>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-missions/v1/series".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_tft_v2_tft_battlepass(&self, ) -> Box<dyn Future<Item = crate::models::LolMissionsTftPaidBattlepass, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-tft/v2/tft/battlepass".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn patch_lol_missions_v1_grants_by_grant_id_viewed(&self, grant_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/lol-missions/v1/grants/{grantId}/viewed".to_string())
        ;
        req = req.with_path_param("grantId".to_string(), grant_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_missions_v1_force(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-missions/v1/force".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_missions_v1_player(&self, ids: crate::models::IdsDto) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-missions/v1/player".to_string())
        ;
        req = req.with_body_param(ids);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_missions_v1_player_by_mission_id(&self, mission_id: &str, reward_groups: crate::models::LolMissionsRewardGroupsSelection) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-missions/v1/player/{missionId}".to_string())
        ;
        req = req.with_path_param("missionId".to_string(), mission_id.to_string());
        req = req.with_body_param(reward_groups);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_lol_missions_v2_player_opt(&self, series_opt: crate::models::LolMissionsSeriesOpt) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/lol-missions/v2/player/opt".to_string())
        ;
        req = req.with_body_param(series_opt);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
