/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolChampionsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolChampionsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolChampionsApiClient<C> {
        PluginLolChampionsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolChampionsApi {
    fn get_lol_champions_v1_inventories_by_summoner_id_champions(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampion>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampion, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkin>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_champion_skin_id(&self, summoner_id: i64, champion_id: i32, champion_skin_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionSkin, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_skin_id_chromas(&self, summoner_id: i64, champion_id: i32, skin_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionChroma>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_champions_playable_count(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionPlayableCounts, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_inventories_by_summoner_id_skins_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkinMinimal>, Error = Error<serde_json::Value>>>;
    fn get_lol_champions_v1_owned_champions_minimal(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolChampionsApi for PluginLolChampionsApiClient<C> {
    fn get_lol_champions_v1_inventories_by_summoner_id_champions(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampion>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampion, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins(&self, summoner_id: i64, champion_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkin>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_champion_skin_id(&self, summoner_id: i64, champion_id: i32, champion_skin_id: i32) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionSkin, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{championSkinId}".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("championSkinId".to_string(), champion_skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_by_champion_id_skins_by_skin_id_chromas(&self, summoner_id: i64, champion_id: i32, skin_id: i32) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionChroma>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{skinId}/chromas".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("skinId".to_string(), skin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions-minimal".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_champions_playable_count(&self, summoner_id: i64) -> Box<dyn Future<Item = crate::models::LolChampionsCollectionsChampionPlayableCounts, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/champions-playable-count".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_inventories_by_summoner_id_skins_minimal(&self, summoner_id: i64) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionSkinMinimal>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/inventories/{summonerId}/skins-minimal".to_string())
        ;
        req = req.with_path_param("summonerId".to_string(), summoner_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_champions_v1_owned_champions_minimal(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolChampionsCollectionsChampionMinimal>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-champions/v1/owned-champions-minimal".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

}
