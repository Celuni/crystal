/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginPatcherApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginPatcherApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginPatcherApiClient<C> {
        PluginPatcherApiClient {
            configuration,
        }
    }
}

pub trait PluginPatcherApi {
    fn delete_patcher_v1_notifications_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn delete_patcher_v1_products_by_product_id(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PatcherNotification>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_p2p_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherP2PStatus, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products_by_product_id_paths(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products_by_product_id_state(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_products_by_product_id_tags(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>>;
    fn get_patcher_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherStatus, Error = Error<serde_json::Value>>>;
    fn patch_patcher_v1_p2p_status(&self, data: crate::models::PatcherP2PStatusUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_notifications(&self, notification_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_detect_corruption_request(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_partial_repair_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_signal_start_patching_delayed(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_start_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_start_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_stop_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_by_product_id_stop_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_patcher_v1_products_league_of_legends_full_repair_request(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_patcher_v1_self_update_restart(&self, force_restart_on_self_update: bool) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_patcher_v1_ux(&self, ux: crate::models::PatcherUxResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginPatcherApi for PluginPatcherApiClient<C> {
    fn delete_patcher_v1_notifications_by_id(&self, id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/patcher/v1/notifications/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn delete_patcher_v1_products_by_product_id(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/patcher/v1/products/{product-id}".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_notifications(&self, ) -> Box<dyn Future<Item = Vec<crate::models::PatcherNotification>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/notifications".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_p2p_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherP2PStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/p2p/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products_by_product_id_paths(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products/{product-id}/paths".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products_by_product_id_state(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products/{product-id}/state".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_products_by_product_id_tags(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/products/{product-id}/tags".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_patcher_v1_status(&self, ) -> Box<dyn Future<Item = crate::models::PatcherStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/patcher/v1/status".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn patch_patcher_v1_p2p_status(&self, data: crate::models::PatcherP2PStatusUpdate) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Patch, "/patcher/v1/p2p/status".to_string())
        ;
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_notifications(&self, notification_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/notifications".to_string())
        ;
        req = req.with_query_param("notificationId".to_string(), notification_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_detect_corruption_request(&self, product_id: &str) -> Box<dyn Future<Item = crate::models::PatcherProductState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/detect-corruption-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_partial_repair_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/partial-repair-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_signal_start_patching_delayed(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/signal-start-patching-delayed".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_start_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/start-checking-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_start_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/start-patching-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_stop_checking_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/stop-checking-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_by_product_id_stop_patching_request(&self, product_id: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/{product-id}/stop-patching-request".to_string())
        ;
        req = req.with_path_param("product-id".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_patcher_v1_products_league_of_legends_full_repair_request(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/patcher/v1/products/league_of_legends/full-repair-request".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn put_patcher_v1_self_update_restart(&self, force_restart_on_self_update: bool) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/patcher/v1/self-update-restart".to_string())
        ;
        req = req.with_query_param("forceRestartOnSelfUpdate".to_string(), force_restart_on_self_update.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_patcher_v1_ux(&self, ux: crate::models::PatcherUxResource) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/patcher/v1/ux".to_string())
        ;
        req = req.with_body_param(ux);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
