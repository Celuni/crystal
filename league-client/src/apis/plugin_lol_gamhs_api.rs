/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolGamhsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolGamhsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolGamhsApiClient<C> {
        PluginLolGamhsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolGamhsApi {
    fn get_lol_gamhs_v1_products_by_product_id_by_puuid_matches(&self, product_id: &str, puuid: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_gamhs_v1_products_by_product_id_current_summoner_matches(&self, product_id: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>>;
    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_details(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>>;
    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_summary(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolGamhsApi for PluginLolGamhsApiClient<C> {
    fn get_lol_gamhs_v1_products_by_product_id_by_puuid_matches(&self, product_id: &str, puuid: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/{puuid}/matches".to_string())
        ;
        req = req.with_query_param("begin".to_string(), begin.to_string());
        req = req.with_query_param("count".to_string(), count.to_string());
        req = req.with_path_param("productId".to_string(), product_id.to_string());
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gamhs_v1_products_by_product_id_current_summoner_matches(&self, product_id: &str, begin: i32, count: i32) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/current-summoner/matches".to_string())
        ;
        req = req.with_query_param("begin".to_string(), begin.to_string());
        req = req.with_query_param("count".to_string(), count.to_string());
        req = req.with_path_param("productId".to_string(), product_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_details(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/matches/{matchId}/details".to_string())
        ;
        req = req.with_path_param("productId".to_string(), product_id.to_string());
        req = req.with_path_param("matchId".to_string(), match_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_gamhs_v1_products_by_product_id_matches_by_match_id_summary(&self, product_id: &str, match_id: &str) -> Box<dyn Future<Item = crate::models::LolGamhsMatchHistoryData, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-gamhs/v1/products/{productId}/matches/{matchId}/summary".to_string())
        ;
        req = req.with_path_param("productId".to_string(), product_id.to_string());
        req = req.with_path_param("matchId".to_string(), match_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
