/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginClientConfigApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginClientConfigApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginClientConfigApiClient<C> {
        PluginClientConfigApiClient {
            configuration,
        }
    }
}

pub trait PluginClientConfigApi {
    fn get_client_config_v1_config(&self, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>, namespace: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v1_config_by_name(&self, name: &str, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v1_status_by_type(&self, _type: &str) -> Box<dyn Future<Item = crate::models::ClientConfigConfigStatus, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_config_by_name(&self, name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_namespace_by_namespace(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_namespace_by_namespace_player(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_client_config_v2_namespace_by_namespace_public(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn put_client_config_v1_entitlements_token(&self, update: crate::models::ClientConfigEntitlementsUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_client_config_v1_refresh_config_status(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn put_client_config_v2_namespace_changes(&self, namespaces: crate::models::ClientConfigConfigNamespaceUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginClientConfigApi for PluginClientConfigApiClient<C> {
    fn get_client_config_v1_config(&self, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>, namespace: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v1/config".to_string())
        ;
        req = req.with_query_param("type".to_string(), _type.to_string());
        if let Some(ref s) = app {
            req = req.with_query_param("app".to_string(), s.to_string());
        }
        if let Some(ref s) = version {
            req = req.with_query_param("version".to_string(), s.to_string());
        }
        if let Some(ref s) = patchline {
            req = req.with_query_param("patchline".to_string(), s.to_string());
        }
        if let Some(ref s) = region {
            req = req.with_query_param("region".to_string(), s.to_string());
        }
        if let Some(ref s) = namespace {
            req = req.with_query_param("namespace".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v1_config_by_name(&self, name: &str, _type: &str, app: Option<&str>, version: Option<&str>, patchline: Option<&str>, region: Option<&str>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v1/config/{name}".to_string())
        ;
        req = req.with_query_param("type".to_string(), _type.to_string());
        if let Some(ref s) = app {
            req = req.with_query_param("app".to_string(), s.to_string());
        }
        if let Some(ref s) = version {
            req = req.with_query_param("version".to_string(), s.to_string());
        }
        if let Some(ref s) = patchline {
            req = req.with_query_param("patchline".to_string(), s.to_string());
        }
        if let Some(ref s) = region {
            req = req.with_query_param("region".to_string(), s.to_string());
        }
        req = req.with_path_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v1_status_by_type(&self, _type: &str) -> Box<dyn Future<Item = crate::models::ClientConfigConfigStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v1/status/{type}".to_string())
        ;
        req = req.with_path_param("type".to_string(), _type.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_config_by_name(&self, name: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/config/{name}".to_string())
        ;
        req = req.with_path_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_namespace_by_namespace(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/namespace/{namespace}".to_string())
        ;
        req = req.with_path_param("namespace".to_string(), namespace.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_namespace_by_namespace_player(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/namespace/{namespace}/player".to_string())
        ;
        req = req.with_path_param("namespace".to_string(), namespace.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_client_config_v2_namespace_by_namespace_public(&self, namespace: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/client-config/v2/namespace/{namespace}/public".to_string())
        ;
        req = req.with_path_param("namespace".to_string(), namespace.to_string());

        req.execute(self.configuration.borrow())
    }

    fn put_client_config_v1_entitlements_token(&self, update: crate::models::ClientConfigEntitlementsUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/client-config/v1/entitlements-token".to_string())
        ;
        req = req.with_body_param(update);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_client_config_v1_refresh_config_status(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/client-config/v1/refresh-config-status".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn put_client_config_v2_namespace_changes(&self, namespaces: crate::models::ClientConfigConfigNamespaceUpdate) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/client-config/v2/namespace-changes".to_string())
        ;
        req = req.with_body_param(namespaces);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
