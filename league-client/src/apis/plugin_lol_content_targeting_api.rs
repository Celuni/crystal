/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolContentTargetingApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolContentTargetingApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolContentTargetingApiClient<C> {
        PluginLolContentTargetingApiClient {
            configuration,
        }
    }
}

pub trait PluginLolContentTargetingApi {
    fn get_lol_content_targeting_v1_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_content_targeting_v1_locale(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingLocaleResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_content_targeting_v1_protected_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolContentTargetingApi for PluginLolContentTargetingApiClient<C> {
    fn get_lol_content_targeting_v1_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-content-targeting/v1/filters".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_content_targeting_v1_locale(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingLocaleResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-content-targeting/v1/locale".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_content_targeting_v1_protected_filters(&self, ) -> Box<dyn Future<Item = crate::models::LolContentTargetingContentTargetingFilterResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-content-targeting/v1/protected_filters".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

}
