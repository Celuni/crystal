/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CoreApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CoreApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CoreApiClient<C> {
        CoreApiClient {
            configuration,
        }
    }
}

pub trait CoreApi {
    fn post_riotclient_addorupdatemetric(&self, group: &str, object: &str, name: &str, value: i64) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>CoreApi for CoreApiClient<C> {
    fn post_riotclient_addorupdatemetric(&self, group: &str, object: &str, name: &str, value: i64) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/riotclient/addorupdatemetric".to_string())
        ;
        req = req.with_query_param("group".to_string(), group.to_string());
        req = req.with_query_param("object".to_string(), object.to_string());
        req = req.with_query_param("name".to_string(), name.to_string());
        req = req.with_query_param("value".to_string(), value.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
