/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolRsoAuthApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolRsoAuthApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolRsoAuthApiClient<C> {
        PluginLolRsoAuthApiClient {
            configuration,
        }
    }
}

pub trait PluginLolRsoAuthApi {
    fn delete_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_rso_auth_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_lol_rso_auth_v2_config(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthHint, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_access_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAccessToken, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_error(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthError, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_id_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthIdToken, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_rso_auth_v1_status_by_platform_id(&self, platform_id: &str) -> Box<dyn Future<Item = crate::models::LolRsoAuthRegionStatus, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_authorization_gas(&self, creds: crate::models::LolRsoAuthRsoPlayerCredentials) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_authorization_refresh(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v1_device_id(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthDeviceId, Error = Error<serde_json::Value>>>;
    fn post_lol_rso_auth_v2_config(&self, config: crate::models::LolRsoAuthPublicClientConfig) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolRsoAuthApi for PluginLolRsoAuthApiClient<C> {
    fn delete_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v1/auth-hints/hint".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v1/authorization".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rso_auth_v1_session(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v1/session".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn delete_lol_rso_auth_v2_config(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/lol-rso-auth/v2/config".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_auth_hints_hint(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthHint, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/auth-hints/hint".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_access_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAccessToken, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/access-token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_error(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthError, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/error".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_id_token(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthIdToken, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/id-token".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/authorization/userinfo".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_rso_auth_v1_status_by_platform_id(&self, platform_id: &str) -> Box<dyn Future<Item = crate::models::LolRsoAuthRegionStatus, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-rso-auth/v1/status/{platformId}".to_string())
        ;
        req = req.with_path_param("platformId".to_string(), platform_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_authorization_gas(&self, creds: crate::models::LolRsoAuthRsoPlayerCredentials) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/authorization/gas".to_string())
        ;
        req = req.with_body_param(creds);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_authorization_refresh(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthAuthorization, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/authorization/refresh".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_authorization_userinfo(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthUserInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/authorization/userinfo".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v1_device_id(&self, ) -> Box<dyn Future<Item = crate::models::LolRsoAuthDeviceId, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v1/device-id".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_rso_auth_v2_config(&self, config: crate::models::LolRsoAuthPublicClientConfig) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-rso-auth/v2/config".to_string())
        ;
        req = req.with_body_param(config);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
