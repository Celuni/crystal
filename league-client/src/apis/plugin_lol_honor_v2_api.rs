/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolHonorV2ApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolHonorV2ApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolHonorV2ApiClient<C> {
        PluginLolHonorV2ApiClient {
            configuration,
        }
    }
}

pub trait PluginLolHonorV2Api {
    fn get_lol_honor_v2_v1_ballot(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2Ballot, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2HonorConfig, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_late_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_latest_eligible_game(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_level_change(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedHonorChange, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_mutual_honor(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2MutualHonor, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_profile(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2ProfileInfo, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_reward_granted(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedReward, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_team_choices(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>>;
    fn get_lol_honor_v2_v1_vote_completion(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VoteCompletion, Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_honor_player(&self, honor_player_request: crate::models::LolHonorV2ApiHonorPlayerServerRequest) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_late_recognition_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_level_change_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_mutual_honor_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_honor_v2_v1_reward_granted_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolHonorV2Api for PluginLolHonorV2ApiClient<C> {
    fn get_lol_honor_v2_v1_ballot(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2Ballot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/ballot".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_config(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2HonorConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/config".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_late_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/late-recognition".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_latest_eligible_game(&self, ) -> Box<dyn Future<Item = i64, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/latest-eligible-game".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_level_change(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedHonorChange, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/level-change".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_mutual_honor(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2MutualHonor, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/mutual-honor".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_profile(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2ProfileInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/profile".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_recognition(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LolHonorV2Honor>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/recognition".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_reward_granted(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VendedReward, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/reward-granted".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_team_choices(&self, ) -> Box<dyn Future<Item = Vec<i64>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/team-choices".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_honor_v2_v1_vote_completion(&self, ) -> Box<dyn Future<Item = crate::models::LolHonorV2VoteCompletion, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-honor-v2/v1/vote-completion".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_honor_player(&self, honor_player_request: crate::models::LolHonorV2ApiHonorPlayerServerRequest) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/honor-player".to_string())
        ;
        req = req.with_body_param(honor_player_request);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_late_recognition_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/late-recognition/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_level_change_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/level-change/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_mutual_honor_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/mutual-honor/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_honor_v2_v1_reward_granted_ack(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-honor-v2/v1/reward-granted/ack".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
