/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolCareerStatsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolCareerStatsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolCareerStatsApiClient<C> {
        PluginLolCareerStatsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolCareerStatsApi {
    fn get_lol_career_stats_v1_champion_averages_by_champion_id_by_position_by_tier_by_queue(&self, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_champion_averages_season_by_season_by_champion_id_by_position_by_tier_by_queue(&self, season: i32, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_champion_experts_by_champion_id_by_position(&self, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_champion_experts_season_by_season_by_champion_id_by_position(&self, season: i32, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_averages_by_position_by_tier_by_queue(&self, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_averages_season_by_season_by_position_by_tier_by_queue(&self, season: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_experts_by_position(&self, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_position_experts_season_by_season_by_position(&self, season: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_summoner_games_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_summoner_games_by_puuid_season_by_season(&self, puuid: &str, season: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_career_stats_v1_summoner_stats_by_puuid_by_season_by_queue_by_position(&self, puuid: &str, season: i32, queue: &str, position: &str, champion_id: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn post_lol_career_stats_v1_champion_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>>;
    fn post_lol_career_stats_v1_position_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsPositionStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolCareerStatsApi for PluginLolCareerStatsApiClient<C> {
    fn get_lol_career_stats_v1_champion_averages_by_champion_id_by_position_by_tier_by_queue(&self, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-averages/{championId}/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_champion_averages_season_by_season_by_champion_id_by_position_by_tier_by_queue(&self, season: i32, champion_id: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-averages/season/{season}/{championId}/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_champion_experts_by_champion_id_by_position(&self, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-experts/{championId}/{position}".to_string())
        ;
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_champion_experts_season_by_season_by_champion_id_by_position(&self, season: i32, champion_id: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/champion-experts/season/{season}/{championId}/{position}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("championId".to_string(), champion_id.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_averages_by_position_by_tier_by_queue(&self, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-averages/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_averages_season_by_season_by_position_by_tier_by_queue(&self, season: i32, position: &str, tier: &str, queue: &str) -> Box<dyn Future<Item = crate::models::LolCareerStatsChampionQueueStatsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-averages/season/{season}/{position}/{tier}/{queue}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());
        req = req.with_path_param("tier".to_string(), tier.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_experts_by_position(&self, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-experts/{position}".to_string())
        ;
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_position_experts_season_by_season_by_position(&self, season: i32, position: &str) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsExpertPlayer>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/position-experts/season/{season}/{position}".to_string())
        ;
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_summoner_games_by_puuid(&self, puuid: &str) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/summoner-games/{puuid}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_summoner_games_by_puuid_season_by_season(&self, puuid: &str, season: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/summoner-games/{puuid}/season/{season}".to_string())
        ;
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_path_param("season".to_string(), season.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_career_stats_v1_summoner_stats_by_puuid_by_season_by_queue_by_position(&self, puuid: &str, season: i32, queue: &str, position: &str, champion_id: Option<i32>) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-career-stats/v1/summoner-stats/{puuid}/{season}/{queue}/{position}".to_string())
        ;
        if let Some(ref s) = champion_id {
            req = req.with_query_param("championId".to_string(), s.to_string());
        }
        req = req.with_path_param("puuid".to_string(), puuid.to_string());
        req = req.with_path_param("season".to_string(), season.to_string());
        req = req.with_path_param("queue".to_string(), queue.to_string());
        req = req.with_path_param("position".to_string(), position.to_string());

        req.execute(self.configuration.borrow())
    }

    fn post_lol_career_stats_v1_champion_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-career-stats/v1/champion-stats-percentiles".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    fn post_lol_career_stats_v1_position_stats_percentiles(&self, body: Vec<crate::models::LolCareerStatsPositionStatsQueryRequest>) -> Box<dyn Future<Item = Vec<crate::models::LolCareerStatsStatisticsPercentilesResponse>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-career-stats/v1/position-stats-percentiles".to_string())
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

}
