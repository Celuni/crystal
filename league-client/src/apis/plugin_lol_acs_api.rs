/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginLolAcsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginLolAcsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginLolAcsApiClient<C> {
        PluginLolAcsApiClient {
            configuration,
        }
    }
}

pub trait PluginLolAcsApi {
    fn get_lol_acs_v1_delta(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_gametimelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v1_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_matchlists(&self, account_id: i64, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_recently_played_champions_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_request_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_lol_acs_v2_request_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_lol_acs_v1_acs_endpoint_override(&self, data: crate::models::LolAcsAcsEndPoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PluginLolAcsApi for PluginLolAcsApiClient<C> {
    fn get_lol_acs_v1_delta(&self, ) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/delta".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_games_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/games/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_gametimelines_by_game_id(&self, game_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/gametimelines/{gameId}".to_string())
        ;
        req = req.with_path_param("gameId".to_string(), game_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_matchlists_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/matchlists/{accountId}".to_string())
        ;
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v1_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v1/recently-played-champions/{accountId}".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_matchlists(&self, account_id: i64, beg_index: i32, end_index: i32) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/matchlists".to_string())
        ;
        req = req.with_query_param("accountId".to_string(), account_id.to_string());
        req = req.with_query_param("begIndex".to_string(), beg_index.to_string());
        req = req.with_query_param("endIndex".to_string(), end_index.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_recently_played_champions_by_account_id(&self, account_id: i64) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/recently-played-champions/{accountId}".to_string())
        ;
        req = req.with_path_param("accountId".to_string(), account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = crate::models::LolAcsAcsChampionGamesCollection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/recently-played-champions/current-summoner".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_request_recently_played_champions_by_account_id(&self, account_id: i64, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/request-recently-played-champions/{accountId}".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());
        req = req.with_path_param("accountId".to_string(), account_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_lol_acs_v2_request_recently_played_champions_current_summoner(&self, force: bool) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/lol-acs/v2/request-recently-played-champions/current-summoner".to_string())
        ;
        req = req.with_query_param("force".to_string(), force.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn post_lol_acs_v1_acs_endpoint_override(&self, data: crate::models::LolAcsAcsEndPoint) -> Box<dyn Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/lol-acs/v1/acs-endpoint-override".to_string())
        ;
        req = req.with_body_param(data);

        req.execute(self.configuration.borrow())
    }

}
